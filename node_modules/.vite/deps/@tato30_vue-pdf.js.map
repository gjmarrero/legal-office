{
  "version": 3,
  "sources": ["browser-external:fs", "browser-external:canvas", "browser-external:http", "browser-external:https", "browser-external:url", "browser-external:zlib", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/webpack/universalModuleDefinition", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/shared/util.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/api.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/annotation_storage.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/editor/editor.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/editor/tools.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/display_utils.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/base_factory.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/shared/murmurhash3.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/font_loader.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/shared/is_node.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/canvas.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/pattern_helper.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/shared/image_utils.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/worker_options.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/shared/message_handler.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/metadata.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/optional_content_config.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/transport_stream.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/xfa_text.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/node_utils.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/node_stream.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/network_utils.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/content_disposition.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/network.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/fetch_stream.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/text_layer.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/editor/annotation_editor_layer.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/editor/freetext.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/editor/ink.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/annotation_layer.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/shared/scripting_utils.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/xfa_layer.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/svg.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/webpack/bootstrap", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/pdf.js", "../../@tato30/vue-pdf/dist/index.mjs"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"canvas\" has been externalized for browser compatibility. Cannot access \"canvas.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"http\" has been externalized for browser compatibility. Cannot access \"http.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"https\" has been externalized for browser compatibility. Cannot access \"https.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"url\" has been externalized for browser compatibility. Cannot access \"url.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"zlib\" has been externalized for browser compatibility. Cannot access \"zlib.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf\"] = factory();\n})(globalThis, () => {\nreturn ", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Skip compatibility checks for modern builds and if we already ran the module.\nif (\n  typeof PDFJSDev !== \"undefined\" &&\n  !PDFJSDev.test(\"SKIP_BABEL\") &&\n  !globalThis._pdfjsCompatibilityChecked\n) {\n  globalThis._pdfjsCompatibilityChecked = true;\n  require(\"./compatibility.js\");\n}\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\nconst MAX_IMAGE_SIZE_TO_CACHE = 10e6; // Ten megabytes.\n\n// Represent the percentage of the height of a single-line field over\n// the font size. Acrobat seems to use this value.\nconst LINE_FACTOR = 1.35;\nconst LINE_DESCENT_FACTOR = 0.35;\nconst BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;\n\n/**\n * Refer to the `WorkerTransport.getRenderingIntent`-method in the API, to see\n * how these flags are being used:\n *  - ANY, DISPLAY, and PRINT are the normal rendering intents, note the\n *    `PDFPageProxy.{render, getOperatorList, getAnnotations}`-methods.\n *  - ANNOTATIONS_FORMS, ANNOTATIONS_STORAGE, ANNOTATIONS_DISABLE control which\n *    annotations are rendered onto the canvas (i.e. by being included in the\n *    operatorList), note the `PDFPageProxy.{render, getOperatorList}`-methods\n *    and their `annotationMode`-option.\n *  - OPLIST is used with the `PDFPageProxy.getOperatorList`-method, note the\n *    `OperatorList`-constructor (on the worker-thread).\n */\nconst RenderingIntentFlag = {\n  ANY: 0x01,\n  DISPLAY: 0x02,\n  PRINT: 0x04,\n  SAVE: 0x08,\n  ANNOTATIONS_FORMS: 0x10,\n  ANNOTATIONS_STORAGE: 0x20,\n  ANNOTATIONS_DISABLE: 0x40,\n  OPLIST: 0x100,\n};\n\nconst AnnotationMode = {\n  DISABLE: 0,\n  ENABLE: 1,\n  ENABLE_FORMS: 2,\n  ENABLE_STORAGE: 3,\n};\n\nconst AnnotationEditorPrefix = \"pdfjs_internal_editor_\";\n\nconst AnnotationEditorType = {\n  DISABLE: -1,\n  NONE: 0,\n  FREETEXT: 3,\n  INK: 15,\n};\n\nconst AnnotationEditorParamsType = {\n  FREETEXT_SIZE: 1,\n  FREETEXT_COLOR: 2,\n  FREETEXT_OPACITY: 3,\n  INK_COLOR: 11,\n  INK_THICKNESS: 12,\n  INK_OPACITY: 13,\n};\n\n// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800,\n};\n\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4,\n};\n\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3,\n};\n\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26,\n};\n\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\",\n};\n\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\",\n};\n\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\",\n};\n\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\",\n};\n\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200,\n};\n\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000,\n};\n\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5,\n};\n\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\",\n};\n\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\",\n};\n\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\",\n};\n\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5,\n};\n\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n};\n\n// All the possible operations for an operator list.\nconst OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  // PLEASE NOTE: We purposely keep any removed operators commented out, since\n  //              re-numbering the list would risk breaking third-party users.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  // beginAnnotations: 78,\n  // endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  // paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n};\n\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2,\n};\n\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\n// Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.\nfunction _isValidProtocol(url) {\n  switch (url?.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Attempts to create a valid absolute URL.\n *\n * @param {URL|string} url - An absolute, or relative, URL.\n * @param {URL|string} [baseUrl] - An absolute URL.\n * @param {Object} [options]\n * @returns Either a valid {URL}, or `null` otherwise.\n */\nfunction createValidAbsoluteUrl(url, baseUrl = null, options = null) {\n  if (!url) {\n    return null;\n  }\n  try {\n    if (options && typeof url === \"string\") {\n      // Let URLs beginning with \"www.\" default to using the \"http://\" protocol.\n      if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n        const dots = url.match(/\\./g);\n        // Avoid accidentally matching a *relative* URL pointing to a file named\n        // e.g. \"www.pdf\" or similar.\n        if (dots?.length >= 2) {\n          url = `http://${url}`;\n        }\n      }\n\n      // According to ISO 32000-1:2008, section 12.6.4.7, URIs should be encoded\n      // in 7-bit ASCII. Some bad PDFs use UTF-8 encoding; see bug 1122280.\n      if (options.tryConvertEncoding) {\n        try {\n          url = stringToUTF8String(url);\n        } catch (ex) {}\n      }\n    }\n\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {\n    /* `new URL()` will throw on incorrect data. */\n  }\n  return null;\n}\n\nfunction shadow(obj, prop, value, nonSerializable = false) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n    assert(\n      prop in obj,\n      `shadow: Property \"${prop && prop.toString()}\" not found in object.`\n    );\n  }\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: !nonSerializable,\n    configurable: true,\n    writable: false,\n  });\n  return value;\n}\n\n/**\n * @type {any}\n */\nconst BaseException = (function BaseExceptionClosure() {\n  // eslint-disable-next-line no-shadow\n  function BaseException(message, name) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n    this.message = message;\n    this.name = name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n\n  return BaseException;\n})();\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg, \"PasswordException\");\n    this.code = code;\n  }\n}\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg, \"UnknownErrorException\");\n    this.details = details;\n  }\n}\n\nclass InvalidPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"InvalidPDFException\");\n  }\n}\n\nclass MissingPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"MissingPDFException\");\n  }\n}\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg, \"UnexpectedResponseException\");\n    this.status = status;\n  }\n}\n\n/**\n * Error caused during parsing PDF data.\n */\nclass FormatError extends BaseException {\n  constructor(msg) {\n    super(msg, \"FormatError\");\n  }\n}\n\n/**\n * Error used to indicate task cancellation.\n */\nclass AbortException extends BaseException {\n  constructor(msg) {\n    super(msg, \"AbortException\");\n  }\n}\n\nfunction bytesToString(bytes) {\n  if (typeof bytes !== \"object\" || bytes?.length === undefined) {\n    unreachable(\"Invalid argument for bytesToString\");\n  }\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  if (typeof str !== \"string\") {\n    unreachable(\"Invalid argument for stringToBytes\");\n  }\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\n\nfunction string32(value) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n    assert(\n      typeof value === \"number\" && Math.abs(value) < 2 ** 32,\n      `string32: Unexpected input \"${value}\".`\n    );\n  }\n  return String.fromCharCode(\n    (value >> 24) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 8) & 0xff,\n    value & 0xff\n  );\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\n// Ensure that the returned Object has a `null` prototype; hence why\n// `Object.fromEntries(...)` is not used.\nfunction objectFromMap(map) {\n  const obj = Object.create(null);\n  for (const [key, value] of map) {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Checks the endianness of the platform.\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\n\n// Checks if it's possible to eval JS expressions.\nfunction isEvalSupported() {\n  try {\n    new Function(\"\"); // eslint-disable-line no-new, no-new-func\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nclass FeatureTest {\n  static get isLittleEndian() {\n    return shadow(this, \"isLittleEndian\", isLittleEndian());\n  }\n\n  static get isEvalSupported() {\n    return shadow(this, \"isEvalSupported\", isEvalSupported());\n  }\n\n  static get isOffscreenCanvasSupported() {\n    return shadow(\n      this,\n      \"isOffscreenCanvasSupported\",\n      typeof OffscreenCanvas !== \"undefined\"\n    );\n  }\n\n  static get platform() {\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      typeof navigator === \"undefined\"\n    ) {\n      return shadow(this, \"platform\", { isWin: false, isMac: false });\n    }\n    return shadow(this, \"platform\", {\n      isWin: navigator.platform.includes(\"Win\"),\n      isMac: navigator.platform.includes(\"Mac\"),\n    });\n  }\n}\n\nconst hexNumbers = [...Array(256).keys()].map(n =>\n  n.toString(16).padStart(2, \"0\")\n);\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  // Apply a scaling matrix to some min/max values.\n  // If a scaling factor is negative then min and max must be\n  // swaped.\n  static scaleMinMax(transform, minMax) {\n    let temp;\n    if (transform[0]) {\n      if (transform[0] < 0) {\n        temp = minMax[0];\n        minMax[0] = minMax[1];\n        minMax[1] = temp;\n      }\n      minMax[0] *= transform[0];\n      minMax[1] *= transform[0];\n\n      if (transform[3] < 0) {\n        temp = minMax[2];\n        minMax[2] = minMax[3];\n        minMax[3] = temp;\n      }\n      minMax[2] *= transform[3];\n      minMax[3] *= transform[3];\n    } else {\n      temp = minMax[0];\n      minMax[0] = minMax[2];\n      minMax[2] = temp;\n      temp = minMax[1];\n      minMax[1] = minMax[3];\n      minMax[3] = temp;\n\n      if (transform[1] < 0) {\n        temp = minMax[2];\n        minMax[2] = minMax[3];\n        minMax[3] = temp;\n      }\n      minMax[2] *= transform[1];\n      minMax[3] *= transform[1];\n\n      if (transform[2] < 0) {\n        temp = minMax[0];\n        minMax[0] = minMax[1];\n        minMax[1] = temp;\n      }\n      minMax[0] *= transform[2];\n      minMax[1] *= transform[2];\n    }\n    minMax[0] += transform[4];\n    minMax[1] += transform[4];\n    minMax[2] += transform[5];\n    minMax[3] += transform[5];\n  }\n\n  // Concatenates two transformation matrices together and returns the result.\n  static transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5],\n    ];\n  }\n\n  // For 2d affine transforms\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1]),\n    ];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [\n      m[3] / d,\n      -m[1] / d,\n      -m[2] / d,\n      m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d,\n      (m[4] * m[1] - m[5] * m[0]) / d,\n    ];\n  }\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  static normalizeRect(rect) {\n    const r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'null'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  static intersect(rect1, rect2) {\n    const xLow = Math.max(\n      Math.min(rect1[0], rect1[2]),\n      Math.min(rect2[0], rect2[2])\n    );\n    const xHigh = Math.min(\n      Math.max(rect1[0], rect1[2]),\n      Math.max(rect2[0], rect2[2])\n    );\n    if (xLow > xHigh) {\n      return null;\n    }\n    const yLow = Math.max(\n      Math.min(rect1[1], rect1[3]),\n      Math.min(rect2[1], rect2[3])\n    );\n    const yHigh = Math.min(\n      Math.max(rect1[1], rect1[3]),\n      Math.max(rect2[1], rect2[3])\n    );\n    if (yLow > yHigh) {\n      return null;\n    }\n\n    return [xLow, yLow, xHigh, yHigh];\n  }\n\n  // From https://github.com/adobe-webplatform/Snap.svg/blob/b365287722a72526000ac4bfcf0ce4cac2faa015/src/path.js#L852\n  static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n    const tvalues = [],\n      bounds = [[], []];\n    let a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n    for (let i = 0; i < 2; ++i) {\n      if (i === 0) {\n        b = 6 * x0 - 12 * x1 + 6 * x2;\n        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n        c = 3 * x1 - 3 * x0;\n      } else {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n      if (Math.abs(a) < 1e-12) {\n        if (Math.abs(b) < 1e-12) {\n          continue;\n        }\n        t = -c / b;\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n        continue;\n      }\n      b2ac = b * b - 4 * c * a;\n      sqrtb2ac = Math.sqrt(b2ac);\n      if (b2ac < 0) {\n        continue;\n      }\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n    }\n\n    let j = tvalues.length,\n      mt;\n    const jlen = j;\n    while (j--) {\n      t = tvalues[j];\n      mt = 1 - t;\n      bounds[0][j] =\n        mt * mt * mt * x0 +\n        3 * mt * mt * t * x1 +\n        3 * mt * t * t * x2 +\n        t * t * t * x3;\n      bounds[1][j] =\n        mt * mt * mt * y0 +\n        3 * mt * mt * t * y1 +\n        3 * mt * t * t * y2 +\n        t * t * t * y3;\n    }\n\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    bounds[0].length = bounds[1].length = jlen + 2;\n\n    return [\n      Math.min(...bounds[0]),\n      Math.min(...bounds[1]),\n      Math.max(...bounds[0]),\n      Math.max(...bounds[1]),\n    ];\n  }\n}\n\nconst PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,\n  0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,\n  0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,\n  0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,\n  0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,\n];\n\nfunction stringToPDFString(str) {\n  if (str[0] >= \"\\xEF\") {\n    let encoding;\n    if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n      encoding = \"utf-16be\";\n    } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n      encoding = \"utf-16le\";\n    } else if (str[0] === \"\\xEF\" && str[1] === \"\\xBB\" && str[2] === \"\\xBF\") {\n      encoding = \"utf-8\";\n    }\n\n    if (encoding) {\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const buffer = stringToBytes(str);\n        return decoder.decode(buffer);\n      } catch (ex) {\n        warn(`stringToPDFString: \"${ex}\".`);\n      }\n    }\n  }\n  // ISO Latin 1\n  const strBuf = [];\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const code = PDFStringTranslateTable[str.charCodeAt(i)];\n    strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v?.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [\n    date.getUTCFullYear().toString(),\n    (date.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n    date.getUTCDate().toString().padStart(2, \"0\"),\n    date.getUTCHours().toString().padStart(2, \"0\"),\n    date.getUTCMinutes().toString().padStart(2, \"0\"),\n    date.getUTCSeconds().toString().padStart(2, \"0\"),\n  ];\n\n  return buffer.join(\"\");\n}\n\nclass PromiseCapability {\n  #settled = false;\n\n  constructor() {\n    /**\n     * @type {Promise<any>} The Promise object.\n     */\n    this.promise = new Promise((resolve, reject) => {\n      /**\n       * @type {function} Fulfills the Promise.\n       */\n      this.resolve = data => {\n        this.#settled = true;\n        resolve(data);\n      };\n\n      /**\n       * @type {function} Rejects the Promise.\n       */\n      this.reject = reason => {\n        if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n          assert(reason instanceof Error, 'Expected valid \"reason\" argument.');\n        }\n        this.#settled = true;\n        reject(reason);\n      };\n    });\n  }\n\n  /**\n   * @type {boolean} If the Promise has been fulfilled/rejected.\n   */\n  get settled() {\n    return this.#settled;\n  }\n}\n\nlet NormalizeRegex = null;\nlet NormalizationMap = null;\nfunction normalizeUnicode(str) {\n  if (!NormalizeRegex) {\n    // In order to generate the following regex:\n    //  - create a PDF containing all the chars in the range 0000-FFFF with\n    //    a NFKC which is different of the char.\n    //  - copy and paste all those chars and get the ones where NFKC is\n    //    required.\n    // It appears that most the chars here contain some ligatures.\n    NormalizeRegex =\n      /([\\u00a0\\u00b5\\u037e\\u0eb3\\u2000-\\u200a\\u202f\\u2126\\ufb00-\\ufb04\\ufb06\\ufb20-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufba1\\ufba4-\\ufba9\\ufbae-\\ufbb1\\ufbd3-\\ufbdc\\ufbde-\\ufbe7\\ufbea-\\ufbf8\\ufbfc-\\ufbfd\\ufc00-\\ufc5d\\ufc64-\\ufcf1\\ufcf5-\\ufd3d\\ufd88\\ufdf4\\ufdfa-\\ufdfb\\ufe71\\ufe77\\ufe79\\ufe7b\\ufe7d]+)|(\\ufb05+)/gu;\n    NormalizationMap = new Map([[\"ﬅ\", \"ſt\"]]);\n  }\n  return str.replaceAll(NormalizeRegex, (_, p1, p2) => {\n    return p1 ? p1.normalize(\"NFKC\") : NormalizationMap.get(p2);\n  });\n}\n\nexport {\n  AbortException,\n  AnnotationActionEventType,\n  AnnotationBorderStyleType,\n  AnnotationEditorParamsType,\n  AnnotationEditorPrefix,\n  AnnotationEditorType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationMarkedState,\n  AnnotationMode,\n  AnnotationReplyType,\n  AnnotationReviewState,\n  AnnotationStateModelType,\n  AnnotationType,\n  assert,\n  BaseException,\n  BASELINE_FACTOR,\n  bytesToString,\n  CMapCompressionType,\n  createValidAbsoluteUrl,\n  DocumentActionEventType,\n  FeatureTest,\n  FONT_IDENTITY_MATRIX,\n  FormatError,\n  getModificationDate,\n  getVerbosityLevel,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isArrayEqual,\n  LINE_DESCENT_FACTOR,\n  LINE_FACTOR,\n  MAX_IMAGE_SIZE_TO_CACHE,\n  MissingPDFException,\n  normalizeUnicode,\n  objectFromMap,\n  objectSize,\n  OPS,\n  PageActionEventType,\n  PasswordException,\n  PasswordResponses,\n  PermissionFlag,\n  PromiseCapability,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  string32,\n  stringToBytes,\n  stringToPDFString,\n  stringToUTF8String,\n  TextRenderingMode,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  utf8StringToString,\n  Util,\n  VerbosityLevel,\n  warn,\n};\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module pdfjsLib\n */\n\nimport {\n  AbortException,\n  AnnotationMode,\n  assert,\n  getVerbosityLevel,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  MAX_IMAGE_SIZE_TO_CACHE,\n  MissingPDFException,\n  PasswordException,\n  PromiseCapability,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  stringToBytes,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  AnnotationStorage,\n  PrintAnnotationStorage,\n} from \"./annotation_storage.js\";\nimport {\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMFilterFactory,\n  DOMStandardFontDataFactory,\n  isDataScheme,\n  isValidFetchUrl,\n  loadScript,\n  PageViewport,\n  RenderingCancelledException,\n  StatTimer,\n} from \"./display_utils.js\";\nimport { FontFaceObject, FontLoader } from \"./font_loader.js\";\nimport { CanvasGraphics } from \"./canvas.js\";\nimport { GlobalWorkerOptions } from \"./worker_options.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { MessageHandler } from \"../shared/message_handler.js\";\nimport { Metadata } from \"./metadata.js\";\nimport { OptionalContentConfig } from \"./optional_content_config.js\";\nimport { PDFDataTransportStream } from \"./transport_stream.js\";\nimport { XfaText } from \"./xfa_text.js\";\n\nconst DEFAULT_RANGE_CHUNK_SIZE = 65536; // 2^16 = 65536\nconst RENDERING_CANCELLED_TIMEOUT = 100; // ms\nconst DELAYED_CLEANUP_TIMEOUT = 5000; // ms\n\nlet DefaultCanvasFactory = DOMCanvasFactory;\nlet DefaultCMapReaderFactory = DOMCMapReaderFactory;\nlet DefaultFilterFactory = DOMFilterFactory;\nlet DefaultStandardFontDataFactory = DOMStandardFontDataFactory;\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\") && isNodeJS) {\n  const {\n    NodeCanvasFactory,\n    NodeCMapReaderFactory,\n    NodeFilterFactory,\n    NodeStandardFontDataFactory,\n  } = require(\"./node_utils.js\");\n\n  DefaultCanvasFactory = NodeCanvasFactory;\n  DefaultCMapReaderFactory = NodeCMapReaderFactory;\n  DefaultFilterFactory = NodeFilterFactory;\n  DefaultStandardFontDataFactory = NodeStandardFontDataFactory;\n}\n\nlet createPDFNetworkStream;\nif (typeof PDFJSDev === \"undefined\") {\n  const streamsPromise = Promise.all([\n    import(\"./network.js\"),\n    import(\"./fetch_stream.js\"),\n  ]);\n\n  createPDFNetworkStream = async params => {\n    const [{ PDFNetworkStream }, { PDFFetchStream }] = await streamsPromise;\n\n    return isValidFetchUrl(params.url)\n      ? new PDFFetchStream(params)\n      : new PDFNetworkStream(params);\n  };\n} else if (PDFJSDev.test(\"GENERIC || CHROME\")) {\n  if (PDFJSDev.test(\"GENERIC\") && isNodeJS) {\n    const { PDFNodeStream } = require(\"./node_stream.js\");\n\n    createPDFNetworkStream = params => {\n      return new PDFNodeStream(params);\n    };\n  } else {\n    const { PDFNetworkStream } = require(\"./network.js\");\n    const { PDFFetchStream } = require(\"./fetch_stream.js\");\n\n    createPDFNetworkStream = params => {\n      return isValidFetchUrl(params.url)\n        ? new PDFFetchStream(params)\n        : new PDFNetworkStream(params);\n    };\n  }\n}\n\n/**\n * @typedef { Int8Array | Uint8Array | Uint8ClampedArray |\n *            Int16Array | Uint16Array |\n *            Int32Array | Uint32Array | Float32Array |\n *            Float64Array\n * } TypedArray\n */\n\n/**\n * @typedef { TypedArray | ArrayBuffer | Array<number> | string } BinaryData\n */\n\n/**\n * @typedef {Object} RefProxy\n * @property {number} num\n * @property {number} gen\n */\n\n/**\n * Document initialization / loading parameters object.\n *\n * @typedef {Object} DocumentInitParameters\n * @property {string | URL} [url] - The URL of the PDF.\n * @property {BinaryData} [data] - Binary PDF data.\n *   Use TypedArrays (Uint8Array) to improve the memory usage. If PDF data is\n *   BASE64-encoded, use `atob()` to convert it to a binary string first.\n *\n *   NOTE: If TypedArrays are used they will generally be transferred to the\n *   worker-thread. This will help reduce main-thread memory usage, however\n *   it will take ownership of the TypedArrays.\n * @property {Object} [httpHeaders] - Basic authentication headers.\n * @property {boolean} [withCredentials] - Indicates whether or not\n *   cross-site Access-Control requests should be made using credentials such\n *   as cookies or authorization headers. The default is `false`.\n * @property {string} [password] - For decrypting password-protected PDFs.\n * @property {number} [length] - The PDF file length. It's used for progress\n *   reports and range requests operations.\n * @property {PDFDataRangeTransport} [range] - Allows for using a custom range\n *   transport implementation.\n * @property {number} [rangeChunkSize] - Specify maximum number of bytes fetched\n *   per range request. The default value is {@link DEFAULT_RANGE_CHUNK_SIZE}.\n * @property {PDFWorker} [worker] - The worker that will be used for loading and\n *   parsing the PDF data.\n * @property {number} [verbosity] - Controls the logging level; the constants\n *   from {@link VerbosityLevel} should be used.\n * @property {string} [docBaseUrl] - The base URL of the document, used when\n *   attempting to recover valid absolute URLs for annotations, and outline\n *   items, that (incorrectly) only specify relative URLs.\n * @property {string} [cMapUrl] - The URL where the predefined Adobe CMaps are\n *   located. Include the trailing slash.\n * @property {boolean} [cMapPacked] - Specifies if the Adobe CMaps are binary\n *   packed or not. The default value is `true`.\n * @property {Object} [CMapReaderFactory] - The factory that will be used when\n *   reading built-in CMap files. Providing a custom factory is useful for\n *   environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMCMapReaderFactory}.\n * @property {boolean} [useSystemFonts] - When `true`, fonts that aren't\n *   embedded in the PDF document will fallback to a system font.\n *   The default value is `true` in web environments and `false` in Node.js;\n *   unless `disableFontFace === true` in which case this defaults to `false`\n *   regardless of the environment (to prevent completely broken fonts).\n * @property {string} [standardFontDataUrl] - The URL where the standard font\n *   files are located. Include the trailing slash.\n * @property {Object} [StandardFontDataFactory] - The factory that will be used\n *   when reading the standard font files. Providing a custom factory is useful\n *   for environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMStandardFontDataFactory}.\n * @property {boolean} [useWorkerFetch] - Enable using the Fetch API in the\n *   worker-thread when reading CMap and standard font files. When `true`,\n *   the `CMapReaderFactory` and `StandardFontDataFactory` options are ignored.\n *   The default value is `true` in web environments and `false` in Node.js.\n * @property {boolean} [stopAtErrors] - Reject certain promises, e.g.\n *   `getOperatorList`, `getTextContent`, and `RenderTask`, when the associated\n *   PDF data cannot be successfully parsed, instead of attempting to recover\n *   whatever possible of the data. The default value is `false`.\n * @property {number} [maxImageSize] - The maximum allowed image size in total\n *   pixels, i.e. width * height. Images above this value will not be rendered.\n *   Use -1 for no limit, which is also the default value.\n * @property {boolean} [isEvalSupported] - Determines if we can evaluate strings\n *   as JavaScript. Primarily used to improve performance of font rendering, and\n *   when parsing PDF functions. The default value is `true`.\n * @property {boolean} [isOffscreenCanvasSupported] - Determines if we can use\n *   `OffscreenCanvas` in the worker. Primarily used to improve performance of\n *   image conversion/rendering.\n *   The default value is `true` in web environments and `false` in Node.js.\n * @property {boolean} [canvasMaxAreaInBytes] - The integer value is used to\n *   know when an image must be resized (uses `OffscreenCanvas` in the worker).\n *   If it's -1 then a possibly slow algorithm is used to guess the max value.\n * @property {boolean} [disableFontFace] - By default fonts are converted to\n *   OpenType fonts and loaded via the Font Loading API or `@font-face` rules.\n *   If disabled, fonts will be rendered using a built-in font renderer that\n *   constructs the glyphs with primitive path commands.\n *   The default value is `false` in web environments and `true` in Node.js.\n * @property {boolean} [fontExtraProperties] - Include additional properties,\n *   which are unused during rendering of PDF documents, when exporting the\n *   parsed font data from the worker-thread. This may be useful for debugging\n *   purposes (and backwards compatibility), but note that it will lead to\n *   increased memory usage. The default value is `false`.\n * @property {boolean} [enableXfa] - Render Xfa forms if any.\n *   The default value is `false`.\n * @property {HTMLDocument} [ownerDocument] - Specify an explicit document\n *   context to create elements with and to load resources, such as fonts,\n *   into. Defaults to the current document.\n * @property {boolean} [disableRange] - Disable range request loading of PDF\n *   files. When enabled, and if the server supports partial content requests,\n *   then the PDF will be fetched in chunks. The default value is `false`.\n * @property {boolean} [disableStream] - Disable streaming of PDF file data.\n *   By default PDF.js attempts to load PDF files in chunks. The default value\n *   is `false`.\n * @property {boolean} [disableAutoFetch] - Disable pre-fetching of PDF file\n *   data. When range requests are enabled PDF.js will automatically keep\n *   fetching more data even if it isn't needed to display the current page.\n *   The default value is `false`.\n *\n *   NOTE: It is also necessary to disable streaming, see above, in order for\n *   disabling of pre-fetching to work correctly.\n * @property {boolean} [pdfBug] - Enables special hooks for debugging PDF.js\n *   (see `web/debugger.js`). The default value is `false`.\n * @property {Object} [canvasFactory] - The factory instance that will be used\n *   when creating canvases. The default value is {new DOMCanvasFactory()}.\n * @property {Object} [filterFactory] - A factory instance that will be used\n *   to create SVG filters when rendering some images on the main canvas.\n */\n\n/**\n * This is the main entry point for loading a PDF and interacting with it.\n *\n * NOTE: If a URL is used to fetch the PDF data a standard Fetch API call (or\n * XHR as fallback) is used, which means it must follow same origin rules,\n * e.g. no cross-domain requests without CORS.\n *\n * @param {string | URL | TypedArray | ArrayBuffer | DocumentInitParameters}\n *   src - Can be a URL where a PDF file is located, a typed array (Uint8Array)\n *         already populated with data, or a parameter object.\n * @returns {PDFDocumentLoadingTask}\n */\nfunction getDocument(src) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n    if (typeof src === \"string\" || src instanceof URL) {\n      src = { url: src };\n    } else if (isArrayBuffer(src)) {\n      src = { data: src };\n    }\n  }\n  if (typeof src !== \"object\") {\n    throw new Error(\"Invalid parameter in getDocument, need parameter object.\");\n  }\n  if (!src.url && !src.data && !src.range) {\n    throw new Error(\n      \"Invalid parameter object: need either .data, .range or .url\"\n    );\n  }\n  const task = new PDFDocumentLoadingTask();\n  const { docId } = task;\n\n  const url = src.url ? getUrlProp(src.url) : null;\n  const data = src.data ? getDataProp(src.data) : null;\n  const httpHeaders = src.httpHeaders || null;\n  const withCredentials = src.withCredentials === true;\n  const password = src.password ?? null;\n  const rangeTransport =\n    src.range instanceof PDFDataRangeTransport ? src.range : null;\n  const rangeChunkSize =\n    Number.isInteger(src.rangeChunkSize) && src.rangeChunkSize > 0\n      ? src.rangeChunkSize\n      : DEFAULT_RANGE_CHUNK_SIZE;\n  let worker = src.worker instanceof PDFWorker ? src.worker : null;\n  const verbosity = src.verbosity;\n  // Ignore \"data:\"-URLs, since they can't be used to recover valid absolute\n  // URLs anyway. We want to avoid sending them to the worker-thread, since\n  // they contain the *entire* PDF document and can thus be arbitrarily long.\n  const docBaseUrl =\n    typeof src.docBaseUrl === \"string\" && !isDataScheme(src.docBaseUrl)\n      ? src.docBaseUrl\n      : null;\n  const cMapUrl = typeof src.cMapUrl === \"string\" ? src.cMapUrl : null;\n  const cMapPacked = src.cMapPacked !== false;\n  const CMapReaderFactory = src.CMapReaderFactory || DefaultCMapReaderFactory;\n  const standardFontDataUrl =\n    typeof src.standardFontDataUrl === \"string\"\n      ? src.standardFontDataUrl\n      : null;\n  const StandardFontDataFactory =\n    src.StandardFontDataFactory || DefaultStandardFontDataFactory;\n  const ignoreErrors = src.stopAtErrors !== true;\n  const maxImageSize =\n    Number.isInteger(src.maxImageSize) && src.maxImageSize > -1\n      ? src.maxImageSize\n      : -1;\n  const isEvalSupported = src.isEvalSupported !== false;\n  const isOffscreenCanvasSupported =\n    typeof src.isOffscreenCanvasSupported === \"boolean\"\n      ? src.isOffscreenCanvasSupported\n      : !isNodeJS;\n  const canvasMaxAreaInBytes = Number.isInteger(src.canvasMaxAreaInBytes)\n    ? src.canvasMaxAreaInBytes\n    : -1;\n  const disableFontFace =\n    typeof src.disableFontFace === \"boolean\" ? src.disableFontFace : isNodeJS;\n  const fontExtraProperties = src.fontExtraProperties === true;\n  const enableXfa = src.enableXfa === true;\n  const ownerDocument = src.ownerDocument || globalThis.document;\n  const disableRange = src.disableRange === true;\n  const disableStream = src.disableStream === true;\n  const disableAutoFetch = src.disableAutoFetch === true;\n  const pdfBug = src.pdfBug === true;\n\n  // Parameters whose default values depend on other parameters.\n  const length = rangeTransport ? rangeTransport.length : src.length ?? NaN;\n  const useSystemFonts =\n    typeof src.useSystemFonts === \"boolean\"\n      ? src.useSystemFonts\n      : !isNodeJS && !disableFontFace;\n  const useWorkerFetch =\n    typeof src.useWorkerFetch === \"boolean\"\n      ? src.useWorkerFetch\n      : (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n        (CMapReaderFactory === DOMCMapReaderFactory &&\n          StandardFontDataFactory === DOMStandardFontDataFactory &&\n          isValidFetchUrl(cMapUrl, document.baseURI) &&\n          isValidFetchUrl(standardFontDataUrl, document.baseURI));\n  const canvasFactory =\n    src.canvasFactory || new DefaultCanvasFactory({ ownerDocument });\n  const filterFactory =\n    src.filterFactory || new DefaultFilterFactory({ docId, ownerDocument });\n\n  // Parameters only intended for development/testing purposes.\n  const styleElement =\n    typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")\n      ? src.styleElement\n      : null;\n\n  // Set the main-thread verbosity level.\n  setVerbosityLevel(verbosity);\n\n  // Ensure that the various factories can be initialized, when necessary,\n  // since the user may provide *custom* ones.\n  const transportFactory = {\n    canvasFactory,\n    filterFactory,\n  };\n  if (!useWorkerFetch) {\n    transportFactory.cMapReaderFactory = new CMapReaderFactory({\n      baseUrl: cMapUrl,\n      isCompressed: cMapPacked,\n    });\n    transportFactory.standardFontDataFactory = new StandardFontDataFactory({\n      baseUrl: standardFontDataUrl,\n    });\n  }\n\n  if (!worker) {\n    const workerParams = {\n      verbosity,\n      port: GlobalWorkerOptions.workerPort,\n    };\n    // Worker was not provided -- creating and owning our own. If message port\n    // is specified in global worker options, using it.\n    worker = workerParams.port\n      ? PDFWorker.fromPort(workerParams)\n      : new PDFWorker(workerParams);\n    task._worker = worker;\n  }\n\n  const fetchDocParams = {\n    docId,\n    apiVersion:\n      typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"TESTING\")\n        ? PDFJSDev.eval(\"BUNDLE_VERSION\")\n        : null,\n    data,\n    password,\n    disableAutoFetch,\n    rangeChunkSize,\n    length,\n    docBaseUrl,\n    enableXfa,\n    evaluatorOptions: {\n      maxImageSize,\n      disableFontFace,\n      ignoreErrors,\n      isEvalSupported,\n      isOffscreenCanvasSupported,\n      canvasMaxAreaInBytes,\n      fontExtraProperties,\n      useSystemFonts,\n      cMapUrl: useWorkerFetch ? cMapUrl : null,\n      standardFontDataUrl: useWorkerFetch ? standardFontDataUrl : null,\n    },\n  };\n  const transportParams = {\n    ignoreErrors,\n    isEvalSupported,\n    disableFontFace,\n    fontExtraProperties,\n    enableXfa,\n    ownerDocument,\n    disableAutoFetch,\n    pdfBug,\n    styleElement,\n  };\n\n  worker.promise\n    .then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      const workerIdPromise = _fetchDocument(worker, fetchDocParams);\n      const networkStreamPromise = new Promise(function (resolve) {\n        let networkStream;\n        if (rangeTransport) {\n          networkStream = new PDFDataTransportStream(\n            {\n              length,\n              initialData: rangeTransport.initialData,\n              progressiveDone: rangeTransport.progressiveDone,\n              contentDispositionFilename:\n                rangeTransport.contentDispositionFilename,\n              disableRange,\n              disableStream,\n            },\n            rangeTransport\n          );\n        } else if (!data) {\n          if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n            throw new Error(\"Not implemented: createPDFNetworkStream\");\n          }\n          networkStream = createPDFNetworkStream({\n            url,\n            length,\n            httpHeaders,\n            withCredentials,\n            rangeChunkSize,\n            disableRange,\n            disableStream,\n          });\n        }\n        resolve(networkStream);\n      });\n\n      return Promise.all([workerIdPromise, networkStreamPromise]).then(\n        function ([workerId, networkStream]) {\n          if (task.destroyed) {\n            throw new Error(\"Loading aborted\");\n          }\n\n          const messageHandler = new MessageHandler(\n            docId,\n            workerId,\n            worker.port\n          );\n          const transport = new WorkerTransport(\n            messageHandler,\n            task,\n            networkStream,\n            transportParams,\n            transportFactory\n          );\n          task._transport = transport;\n          messageHandler.send(\"Ready\", null);\n        }\n      );\n    })\n    .catch(task._capability.reject);\n\n  return task;\n}\n\n/**\n * Starts fetching of specified PDF document/data.\n *\n * @param {PDFWorker} worker\n * @param {Object} source\n * @returns {Promise<string>} A promise that is resolved when the worker ID of\n *   the `MessageHandler` is known.\n * @private\n */\nasync function _fetchDocument(worker, source) {\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n  const workerId = await worker.messageHandler.sendWithPromise(\n    \"GetDocRequest\",\n    source,\n    source.data ? [source.data.buffer] : null\n  );\n\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n  return workerId;\n}\n\nfunction getUrlProp(val) {\n  if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n    return null; // The 'url' is unused with `PDFDataRangeTransport`.\n  }\n  if (val instanceof URL) {\n    return val.href;\n  }\n  try {\n    // The full path is required in the 'url' field.\n    return new URL(val, window.location).href;\n  } catch (ex) {\n    if (\n      typeof PDFJSDev !== \"undefined\" &&\n      PDFJSDev.test(\"GENERIC\") &&\n      isNodeJS &&\n      typeof val === \"string\"\n    ) {\n      return val; // Use the url as-is in Node.js environments.\n    }\n  }\n  throw new Error(\n    \"Invalid PDF url data: \" +\n      \"either string or URL-object is expected in the url property.\"\n  );\n}\n\nfunction getDataProp(val) {\n  // Converting string or array-like data to Uint8Array.\n  if (\n    typeof PDFJSDev !== \"undefined\" &&\n    PDFJSDev.test(\"GENERIC\") &&\n    isNodeJS &&\n    typeof Buffer !== \"undefined\" && // eslint-disable-line no-undef\n    val instanceof Buffer // eslint-disable-line no-undef\n  ) {\n    deprecated(\n      \"Please provide binary data as `Uint8Array`, rather than `Buffer`.\"\n    );\n    return new Uint8Array(val);\n  }\n  if (val instanceof Uint8Array && val.byteLength === val.buffer.byteLength) {\n    // Use the data as-is when it's already a Uint8Array that completely\n    // \"utilizes\" its underlying ArrayBuffer, to prevent any possible\n    // issues when transferring it to the worker-thread.\n    return val;\n  }\n  if (typeof val === \"string\") {\n    return stringToBytes(val);\n  }\n  if ((typeof val === \"object\" && !isNaN(val?.length)) || isArrayBuffer(val)) {\n    return new Uint8Array(val);\n  }\n  throw new Error(\n    \"Invalid PDF binary data: either TypedArray, \" +\n      \"string, or array-like object is expected in the data property.\"\n  );\n}\n\n/**\n * @typedef {Object} OnProgressParameters\n * @property {number} loaded - Currently loaded number of bytes.\n * @property {number} total - Total number of bytes in the PDF file.\n */\n\n/**\n * The loading task controls the operations required to load a PDF document\n * (such as network requests) and provides a way to listen for completion,\n * after which individual pages can be rendered.\n */\nclass PDFDocumentLoadingTask {\n  static #docId = 0;\n\n  constructor() {\n    this._capability = new PromiseCapability();\n    this._transport = null;\n    this._worker = null;\n\n    /**\n     * Unique identifier for the document loading task.\n     * @type {string}\n     */\n    this.docId = `d${PDFDocumentLoadingTask.#docId++}`;\n\n    /**\n     * Whether the loading task is destroyed or not.\n     * @type {boolean}\n     */\n    this.destroyed = false;\n\n    /**\n     * Callback to request a password if a wrong or no password was provided.\n     * The callback receives two parameters: a function that should be called\n     * with the new password, and a reason (see {@link PasswordResponses}).\n     * @type {function}\n     */\n    this.onPassword = null;\n\n    /**\n     * Callback to be able to monitor the loading progress of the PDF file\n     * (necessary to implement e.g. a loading bar).\n     * The callback receives an {@link OnProgressParameters} argument.\n     * @type {function}\n     */\n    this.onProgress = null;\n  }\n\n  /**\n   * Promise for document loading task completion.\n   * @type {Promise<PDFDocumentProxy>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Abort all network requests and destroy the worker.\n   * @returns {Promise<void>} A promise that is resolved when destruction is\n   *   completed.\n   */\n  async destroy() {\n    this.destroyed = true;\n    await this._transport?.destroy();\n\n    this._transport = null;\n    if (this._worker) {\n      this._worker.destroy();\n      this._worker = null;\n    }\n  }\n}\n\n/**\n * Abstract class to support range requests file loading.\n *\n * NOTE: The TypedArrays passed to the constructor and relevant methods below\n * will generally be transferred to the worker-thread. This will help reduce\n * main-thread memory usage, however it will take ownership of the TypedArrays.\n */\nclass PDFDataRangeTransport {\n  /**\n   * @param {number} length\n   * @param {Uint8Array|null} initialData\n   * @param {boolean} [progressiveDone]\n   * @param {string} [contentDispositionFilename]\n   */\n  constructor(\n    length,\n    initialData,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this.length = length;\n    this.initialData = initialData;\n    this.progressiveDone = progressiveDone;\n    this.contentDispositionFilename = contentDispositionFilename;\n\n    this._rangeListeners = [];\n    this._progressListeners = [];\n    this._progressiveReadListeners = [];\n    this._progressiveDoneListeners = [];\n    this._readyCapability = new PromiseCapability();\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addRangeListener(listener) {\n    this._rangeListeners.push(listener);\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addProgressListener(listener) {\n    this._progressListeners.push(listener);\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addProgressiveReadListener(listener) {\n    this._progressiveReadListeners.push(listener);\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addProgressiveDoneListener(listener) {\n    this._progressiveDoneListeners.push(listener);\n  }\n\n  /**\n   * @param {number} begin\n   * @param {Uint8Array|null} chunk\n   */\n  onDataRange(begin, chunk) {\n    for (const listener of this._rangeListeners) {\n      listener(begin, chunk);\n    }\n  }\n\n  /**\n   * @param {number} loaded\n   * @param {number|undefined} total\n   */\n  onDataProgress(loaded, total) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressListeners) {\n        listener(loaded, total);\n      }\n    });\n  }\n\n  /**\n   * @param {Uint8Array|null} chunk\n   */\n  onDataProgressiveRead(chunk) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveReadListeners) {\n        listener(chunk);\n      }\n    });\n  }\n\n  onDataProgressiveDone() {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveDoneListeners) {\n        listener();\n      }\n    });\n  }\n\n  transportReady() {\n    this._readyCapability.resolve();\n  }\n\n  /**\n   * @param {number} begin\n   * @param {number} end\n   */\n  requestDataRange(begin, end) {\n    unreachable(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n  }\n\n  abort() {}\n}\n\n/**\n * Proxy to a `PDFDocument` in the worker thread.\n */\nclass PDFDocumentProxy {\n  constructor(pdfInfo, transport) {\n    this._pdfInfo = pdfInfo;\n    this._transport = transport;\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      // For testing purposes.\n      Object.defineProperty(this, \"getXFADatasets\", {\n        value: () => {\n          return this._transport.getXFADatasets();\n        },\n      });\n      Object.defineProperty(this, \"getXRefPrevValue\", {\n        value: () => {\n          return this._transport.getXRefPrevValue();\n        },\n      });\n    }\n  }\n\n  /**\n   * @type {AnnotationStorage} Storage for annotation data in forms.\n   */\n  get annotationStorage() {\n    return this._transport.annotationStorage;\n  }\n\n  /**\n   * @type {Object} The filter factory instance.\n   */\n  get filterFactory() {\n    return this._transport.filterFactory;\n  }\n\n  /**\n   * @type {number} Total number of pages in the PDF file.\n   */\n  get numPages() {\n    return this._pdfInfo.numPages;\n  }\n\n  /**\n   * @type {Array<string, string|null>} A (not guaranteed to be) unique ID to\n   *   identify the PDF document.\n   *   NOTE: The first element will always be defined for all PDF documents,\n   *   whereas the second element is only defined for *modified* PDF documents.\n   */\n  get fingerprints() {\n    return this._pdfInfo.fingerprints;\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return shadow(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n  }\n\n  /**\n   * NOTE: This is (mostly) intended to support printing of XFA forms.\n   *\n   * @type {Object | null} An object representing a HTML tree structure\n   *   to render the XFA, or `null` when no XFA form exists.\n   */\n  get allXfaHtml() {\n    return this._transport._htmlForXfa;\n  }\n\n  /**\n   * @param {number} pageNumber - The page number to get. The first page is 1.\n   * @returns {Promise<PDFPageProxy>} A promise that is resolved with\n   *   a {@link PDFPageProxy} object.\n   */\n  getPage(pageNumber) {\n    return this._transport.getPage(pageNumber);\n  }\n\n  /**\n   * @param {RefProxy} ref - The page reference.\n   * @returns {Promise<number>} A promise that is resolved with the page index,\n   *   starting from zero, that is associated with the reference.\n   */\n  getPageIndex(ref) {\n    return this._transport.getPageIndex(ref);\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<any>>>} A promise that is resolved\n   *   with a mapping from named destinations to references.\n   *\n   * This can be slow for large documents. Use `getDestination` instead.\n   */\n  getDestinations() {\n    return this._transport.getDestinations();\n  }\n\n  /**\n   * @param {string} id - The named destination to get.\n   * @returns {Promise<Array<any> | null>} A promise that is resolved with all\n   *   information of the given named destination, or `null` when the named\n   *   destination is not present in the PDF file.\n   */\n  getDestination(id) {\n    return this._transport.getDestination(id);\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} containing the page labels that correspond to the page\n   *   indexes, or `null` when no page labels are present in the PDF file.\n   */\n  getPageLabels() {\n    return this._transport.getPageLabels();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page layout name.\n   */\n  getPageLayout() {\n    return this._transport.getPageLayout();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page mode name.\n   */\n  getPageMode() {\n    return this._transport.getPageMode();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with an\n   *   {Object} containing the viewer preferences, or `null` when no viewer\n   *   preferences are present in the PDF file.\n   */\n  getViewerPreferences() {\n    return this._transport.getViewerPreferences();\n  }\n\n  /**\n   * @returns {Promise<any | null>} A promise that is resolved with an {Array}\n   *   containing the destination, or `null` when no open action is present\n   *   in the PDF.\n   */\n  getOpenAction() {\n    return this._transport.getOpenAction();\n  }\n\n  /**\n   * @returns {Promise<any>} A promise that is resolved with a lookup table\n   *   for mapping named attachments to their content.\n   */\n  getAttachments() {\n    return this._transport.getAttachments();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} of all the JavaScript strings in the name tree, or `null`\n   *   if no JavaScript exists.\n   */\n  getJavaScript() {\n    return this._transport.getJavaScript();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with the JavaScript actions:\n   *     - from the name tree (like getJavaScript);\n   *     - from A or AA entries in the catalog dictionary.\n   *   , or `null` if no JavaScript exists.\n   */\n  getJSActions() {\n    return this._transport.getDocJSActions();\n  }\n\n  /**\n   * @typedef {Object} OutlineNode\n   * @property {string} title\n   * @property {boolean} bold\n   * @property {boolean} italic\n   * @property {Uint8ClampedArray} color - The color in RGB format to use for\n   *   display purposes.\n   * @property {string | Array<any> | null} dest\n   * @property {string | null} url\n   * @property {string | undefined} unsafeUrl\n   * @property {boolean | undefined} newWindow\n   * @property {number | undefined} count\n   * @property {Array<OutlineNode>} items\n   */\n\n  /**\n   * @returns {Promise<Array<OutlineNode>>} A promise that is resolved with an\n   *   {Array} that is a tree outline (if it has one) of the PDF file.\n   */\n  getOutline() {\n    return this._transport.getOutline();\n  }\n\n  /**\n   * @returns {Promise<OptionalContentConfig>} A promise that is resolved with\n   *   an {@link OptionalContentConfig} that contains all the optional content\n   *   groups (assuming that the document has any).\n   */\n  getOptionalContentConfig() {\n    return this._transport.getOptionalContentConfig();\n  }\n\n  /**\n   * @returns {Promise<Array<number> | null>} A promise that is resolved with\n   *   an {Array} that contains the permission flags for the PDF document, or\n   *   `null` when no permissions are present in the PDF file.\n   */\n  getPermissions() {\n    return this._transport.getPermissions();\n  }\n\n  /**\n   * @returns {Promise<{ info: Object, metadata: Metadata }>} A promise that is\n   *   resolved with an {Object} that has `info` and `metadata` properties.\n   *   `info` is an {Object} filled with anything available in the information\n   *   dictionary and similarly `metadata` is a {Metadata} object with\n   *   information from the metadata section of the PDF.\n   */\n  getMetadata() {\n    return this._transport.getMetadata();\n  }\n\n  /**\n   * @typedef {Object} MarkInfo\n   * Properties correspond to Table 321 of the PDF 32000-1:2008 spec.\n   * @property {boolean} Marked\n   * @property {boolean} UserProperties\n   * @property {boolean} Suspects\n   */\n\n  /**\n   * @returns {Promise<MarkInfo | null>} A promise that is resolved with\n   *   a {MarkInfo} object that contains the MarkInfo flags for the PDF\n   *   document, or `null` when no MarkInfo values are present in the PDF file.\n   */\n  getMarkInfo() {\n    return this._transport.getMarkInfo();\n  }\n\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the raw data of the PDF document.\n   */\n  getData() {\n    return this._transport.getData();\n  }\n\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the full data of the saved document.\n   */\n  saveDocument() {\n    return this._transport.saveDocument();\n  }\n\n  /**\n   * @returns {Promise<{ length: number }>} A promise that is resolved when the\n   *   document's data is loaded. It is resolved with an {Object} that contains\n   *   the `length` property that indicates size of the PDF data in bytes.\n   */\n  getDownloadInfo() {\n    return this._transport.downloadInfoCapability.promise;\n  }\n\n  /**\n   * Cleans up resources allocated by the document on both the main and worker\n   * threads.\n   *\n   * NOTE: Do not, under any circumstances, call this method when rendering is\n   * currently ongoing since that may lead to rendering errors.\n   *\n   * @param {boolean} [keepLoadedFonts] - Let fonts remain attached to the DOM.\n   *   NOTE: This will increase persistent memory usage, hence don't use this\n   *   option unless absolutely necessary. The default value is `false`.\n   * @returns {Promise} A promise that is resolved when clean-up has finished.\n   */\n  cleanup(keepLoadedFonts = false) {\n    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n  }\n\n  /**\n   * Destroys the current document instance and terminates the worker.\n   */\n  destroy() {\n    return this.loadingTask.destroy();\n  }\n\n  /**\n   * @type {DocumentInitParameters} A subset of the current\n   *   {DocumentInitParameters}, which are needed in the viewer.\n   */\n  get loadingParams() {\n    return this._transport.loadingParams;\n  }\n\n  /**\n   * @type {PDFDocumentLoadingTask} The loadingTask for the current document.\n   */\n  get loadingTask() {\n    return this._transport.loadingTask;\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<Object>> | null>} A promise that is\n   *   resolved with an {Object} containing /AcroForm field data for the JS\n   *   sandbox, or `null` when no field data is present in the PDF file.\n   */\n  getFieldObjects() {\n    return this._transport.getFieldObjects();\n  }\n\n  /**\n   * @returns {Promise<boolean>} A promise that is resolved with `true`\n   *   if some /AcroForm fields have JavaScript actions.\n   */\n  hasJSActions() {\n    return this._transport.hasJSActions();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with an\n   *   {Array<string>} containing IDs of annotations that have a calculation\n   *   action, or `null` when no such annotations are present in the PDF file.\n   */\n  getCalculationOrderIds() {\n    return this._transport.getCalculationOrderIds();\n  }\n}\n\n/**\n * Page getViewport parameters.\n *\n * @typedef {Object} GetViewportParameters\n * @property {number} scale - The desired scale of the viewport.\n * @property {number} [rotation] - The desired rotation, in degrees, of\n *   the viewport. If omitted it defaults to the page rotation.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be\n *   flipped. The default value is `false`.\n */\n\n/**\n * Page getTextContent parameters.\n *\n * @typedef {Object} getTextContentParameters\n * @property {boolean} [includeMarkedContent] - When true include marked\n *   content items in the items array of TextContent. The default is `false`.\n * @property {boolean} [disableNormalization] - When true the text is *not*\n *   normalized in the worker-thread. The default is `false`.\n */\n\n/**\n * Page text content.\n *\n * @typedef {Object} TextContent\n * @property {Array<TextItem | TextMarkedContent>} items - Array of\n *   {@link TextItem} and {@link TextMarkedContent} objects. TextMarkedContent\n *   items are included when includeMarkedContent is true.\n * @property {Object<string, TextStyle>} styles - {@link TextStyle} objects,\n *   indexed by font name.\n */\n\n/**\n * Page text content part.\n *\n * @typedef {Object} TextItem\n * @property {string} str - Text content.\n * @property {string} dir - Text direction: 'ttb', 'ltr' or 'rtl'.\n * @property {Array<any>} transform - Transformation matrix.\n * @property {number} width - Width in device space.\n * @property {number} height - Height in device space.\n * @property {string} fontName - Font name used by PDF.js for converted font.\n * @property {boolean} hasEOL - Indicating if the text content is followed by a\n *   line-break.\n */\n\n/**\n * Page text marked content part.\n *\n * @typedef {Object} TextMarkedContent\n * @property {string} type - Either 'beginMarkedContent',\n *   'beginMarkedContentProps', or 'endMarkedContent'.\n * @property {string} id - The marked content identifier. Only used for type\n *   'beginMarkedContentProps'.\n */\n\n/**\n * Text style.\n *\n * @typedef {Object} TextStyle\n * @property {number} ascent - Font ascent.\n * @property {number} descent - Font descent.\n * @property {boolean} vertical - Whether or not the text is in vertical mode.\n * @property {string} fontFamily - The possible font family.\n */\n\n/**\n * Page annotation parameters.\n *\n * @typedef {Object} GetAnnotationsParameters\n * @property {string} [intent] - Determines the annotations that are fetched,\n *   can be 'display' (viewable annotations), 'print' (printable annotations),\n *   or 'any' (all annotations). The default value is 'display'.\n */\n\n/**\n * Page render parameters.\n *\n * @typedef {Object} RenderParameters\n * @property {CanvasRenderingContext2D} canvasContext - A 2D context of a DOM\n *   Canvas object.\n * @property {PageViewport} viewport - Rendering viewport obtained by calling\n *   the `PDFPageProxy.getViewport` method.\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are rendered\n *   onto the canvas, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n * @property {Array<any>} [transform] - Additional transform, applied just\n *   before viewport transform.\n * @property {CanvasGradient | CanvasPattern | string} [background] - Background\n *   to use for the canvas.\n *   Any valid `canvas.fillStyle` can be used: a `DOMString` parsed as CSS\n *   <color> value, a `CanvasGradient` object (a linear or radial gradient) or\n *   a `CanvasPattern` object (a repetitive image). The default value is\n *   'rgb(255,255,255)'.\n *\n *   NOTE: This option may be partially, or completely, ignored when the\n *   `pageColors`-option is used.\n * @property {Object} [pageColors] - Overwrites background and foreground colors\n *   with user defined ones in order to improve readability in high contrast\n *   mode.\n * @property {Promise<OptionalContentConfig>} [optionalContentConfigPromise] -\n *   A promise that should resolve with an {@link OptionalContentConfig}\n *   created from `PDFDocumentProxy.getOptionalContentConfig`. If `null`,\n *   the configuration will be fetched automatically with the default visibility\n *   states set.\n * @property {Map<string, HTMLCanvasElement>} [annotationCanvasMap] - Map some\n *   annotation ids with canvases used to render them.\n * @property {PrintAnnotationStorage} [printAnnotationStorage]\n */\n\n/**\n * Page getOperatorList parameters.\n *\n * @typedef {Object} GetOperatorListParameters\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are included\n *   in the operatorList, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n * @property {PrintAnnotationStorage} [printAnnotationStorage]\n */\n\n/**\n * Structure tree node. The root node will have a role \"Root\".\n *\n * @typedef {Object} StructTreeNode\n * @property {Array<StructTreeNode | StructTreeContent>} children - Array of\n *   {@link StructTreeNode} and {@link StructTreeContent} objects.\n * @property {string} role - element's role, already mapped if a role map exists\n * in the PDF.\n */\n\n/**\n * Structure tree content.\n *\n * @typedef {Object} StructTreeContent\n * @property {string} type - either \"content\" for page and stream structure\n *   elements or \"object\" for object references.\n * @property {string} id - unique id that will map to the text layer.\n */\n\n/**\n * PDF page operator list.\n *\n * @typedef {Object} PDFOperatorList\n * @property {Array<number>} fnArray - Array containing the operator functions.\n * @property {Array<any>} argsArray - Array containing the arguments of the\n *   functions.\n */\n\n/**\n * Proxy to a `PDFPage` in the worker thread.\n */\nclass PDFPageProxy {\n  #delayedCleanupTimeout = null;\n\n  #pendingCleanup = false;\n\n  constructor(pageIndex, pageInfo, transport, pdfBug = false) {\n    this._pageIndex = pageIndex;\n    this._pageInfo = pageInfo;\n    this._transport = transport;\n    this._stats = pdfBug ? new StatTimer() : null;\n    this._pdfBug = pdfBug;\n    /** @type {PDFObjects} */\n    this.commonObjs = transport.commonObjs;\n    this.objs = new PDFObjects();\n\n    this._maybeCleanupAfterRender = false;\n    this._intentStates = new Map();\n    this.destroyed = false;\n  }\n\n  /**\n   * @type {number} Page number of the page. First page is 1.\n   */\n  get pageNumber() {\n    return this._pageIndex + 1;\n  }\n\n  /**\n   * @type {number} The number of degrees the page is rotated clockwise.\n   */\n  get rotate() {\n    return this._pageInfo.rotate;\n  }\n\n  /**\n   * @type {RefProxy | null} The reference that points to this page.\n   */\n  get ref() {\n    return this._pageInfo.ref;\n  }\n\n  /**\n   * @type {number} The default size of units in 1/72nds of an inch.\n   */\n  get userUnit() {\n    return this._pageInfo.userUnit;\n  }\n\n  /**\n   * @type {Array<number>} An array of the visible portion of the PDF page in\n   *   user space units [x1, y1, x2, y2].\n   */\n  get view() {\n    return this._pageInfo.view;\n  }\n\n  /**\n   * @param {GetViewportParameters} params - Viewport parameters.\n   * @returns {PageViewport} Contains 'width' and 'height' properties\n   *   along with transforms required for rendering.\n   */\n  getViewport({\n    scale,\n    rotation = this.rotate,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.view,\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * @param {GetAnnotationsParameters} params - Annotation parameters.\n   * @returns {Promise<Array<any>>} A promise that is resolved with an\n   *   {Array} of the annotation objects.\n   */\n  getAnnotations({ intent = \"display\" } = {}) {\n    const intentArgs = this._transport.getRenderingIntent(intent);\n\n    return this._transport.getAnnotations(\n      this._pageIndex,\n      intentArgs.renderingIntent\n    );\n  }\n\n  /**\n   * @returns {Promise<Object>} A promise that is resolved with an\n   *   {Object} with JS actions.\n   */\n  getJSActions() {\n    return this._transport.getPageJSActions(this._pageIndex);\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return shadow(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with a fake DOM object (a tree structure where elements\n   *   are {Object} with a name, attributes (class, style, ...), value and\n   *   children, very similar to a HTML DOM tree), or `null` if no XFA exists.\n   */\n  async getXfa() {\n    return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n  }\n\n  /**\n   * Begins the process of rendering a page to the desired context.\n   *\n   * @param {RenderParameters} params - Page render parameters.\n   * @returns {RenderTask} An object that contains a promise that is\n   *   resolved when the page finishes rendering.\n   */\n  render({\n    canvasContext,\n    viewport,\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n    transform = null,\n    background = null,\n    optionalContentConfigPromise = null,\n    annotationCanvasMap = null,\n    pageColors = null,\n    printAnnotationStorage = null,\n  }) {\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      arguments[0]?.canvasFactory\n    ) {\n      throw new Error(\n        \"render no longer accepts the `canvasFactory`-option, \" +\n          \"please pass it to the `getDocument`-function instead.\"\n      );\n    }\n\n    this._stats?.time(\"Overall\");\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode,\n      printAnnotationStorage\n    );\n    // If there was a pending destroy, cancel it so no cleanup happens during\n    // this call to render...\n    this.#pendingCleanup = false;\n    // ... and ensure that a delayed cleanup is always aborted.\n    this.#abortDelayedCleanup();\n\n    if (!optionalContentConfigPromise) {\n      optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n    }\n\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    const intentPrint = !!(\n      intentArgs.renderingIntent & RenderingIntentFlag.PRINT\n    );\n\n    // If there's no displayReadyCapability yet, then the operatorList\n    // was never requested before. Make the request and create the promise.\n    if (!intentState.displayReadyCapability) {\n      intentState.displayReadyCapability = new PromiseCapability();\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n        separateAnnots: null,\n      };\n\n      this._stats?.time(\"Page Request\");\n      this._pumpOperatorList(intentArgs);\n    }\n\n    const complete = error => {\n      intentState.renderTasks.delete(internalRenderTask);\n\n      // Attempt to reduce memory usage during *printing*, by always running\n      // cleanup immediately once rendering has finished.\n      if (this._maybeCleanupAfterRender || intentPrint) {\n        this.#pendingCleanup = true;\n      }\n      this.#tryCleanup(/* delayed = */ !intentPrint);\n\n      if (error) {\n        internalRenderTask.capability.reject(error);\n\n        this._abortOperatorList({\n          intentState,\n          reason: error instanceof Error ? error : new Error(error),\n        });\n      } else {\n        internalRenderTask.capability.resolve();\n      }\n\n      this._stats?.timeEnd(\"Rendering\");\n      this._stats?.timeEnd(\"Overall\");\n    };\n\n    const internalRenderTask = new InternalRenderTask({\n      callback: complete,\n      // Only include the required properties, and *not* the entire object.\n      params: {\n        canvasContext,\n        viewport,\n        transform,\n        background,\n      },\n      objs: this.objs,\n      commonObjs: this.commonObjs,\n      annotationCanvasMap,\n      operatorList: intentState.operatorList,\n      pageIndex: this._pageIndex,\n      canvasFactory: this._transport.canvasFactory,\n      filterFactory: this._transport.filterFactory,\n      useRequestAnimationFrame: !intentPrint,\n      pdfBug: this._pdfBug,\n      pageColors,\n    });\n\n    (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n    const renderTask = internalRenderTask.task;\n\n    Promise.all([\n      intentState.displayReadyCapability.promise,\n      optionalContentConfigPromise,\n    ])\n      .then(([transparency, optionalContentConfig]) => {\n        if (this.#pendingCleanup) {\n          complete();\n          return;\n        }\n        this._stats?.time(\"Rendering\");\n\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig,\n        });\n        internalRenderTask.operatorListChanged();\n      })\n      .catch(complete);\n\n    return renderTask;\n  }\n\n  /**\n   * @param {GetOperatorListParameters} params - Page getOperatorList\n   *   parameters.\n   * @returns {Promise<PDFOperatorList>} A promise resolved with an\n   *   {@link PDFOperatorList} object that represents the page's operator list.\n   */\n  getOperatorList({\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n    printAnnotationStorage = null,\n  } = {}) {\n    function operatorListChanged() {\n      if (intentState.operatorList.lastChunk) {\n        intentState.opListReadCapability.resolve(intentState.operatorList);\n\n        intentState.renderTasks.delete(opListTask);\n      }\n    }\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode,\n      printAnnotationStorage,\n      /* isOpList = */ true\n    );\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n    let opListTask;\n\n    if (!intentState.opListReadCapability) {\n      opListTask = Object.create(null);\n      opListTask.operatorListChanged = operatorListChanged;\n      intentState.opListReadCapability = new PromiseCapability();\n      (intentState.renderTasks ||= new Set()).add(opListTask);\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n        separateAnnots: null,\n      };\n\n      this._stats?.time(\"Page Request\");\n      this._pumpOperatorList(intentArgs);\n    }\n    return intentState.opListReadCapability.promise;\n  }\n\n  /**\n   * NOTE: All occurrences of whitespace will be replaced by\n   * standard spaces (0x20).\n   *\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {ReadableStream} Stream for reading text content chunks.\n   */\n  streamTextContent({\n    includeMarkedContent = false,\n    disableNormalization = false,\n  } = {}) {\n    const TEXT_CONTENT_CHUNK_SIZE = 100;\n\n    return this._transport.messageHandler.sendWithStream(\n      \"GetTextContent\",\n      {\n        pageIndex: this._pageIndex,\n        includeMarkedContent: includeMarkedContent === true,\n        disableNormalization: disableNormalization === true,\n      },\n      {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n        size(textContent) {\n          return textContent.items.length;\n        },\n      }\n    );\n  }\n\n  /**\n   * NOTE: All occurrences of whitespace will be replaced by\n   * standard spaces (0x20).\n   *\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {Promise<TextContent>} A promise that is resolved with a\n   *   {@link TextContent} object that represents the page's text content.\n   */\n  getTextContent(params = {}) {\n    if (this._transport._htmlForXfa) {\n      // TODO: We need to revisit this once the XFA foreground patch lands and\n      // only do this for non-foreground XFA.\n      return this.getXfa().then(xfa => {\n        return XfaText.textContent(xfa);\n      });\n    }\n    const readableStream = this.streamTextContent(params);\n\n    return new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function ({ value, done }) {\n          if (done) {\n            resolve(textContent);\n            return;\n          }\n          Object.assign(textContent.styles, value.styles);\n          textContent.items.push(...value.items);\n          pump();\n        }, reject);\n      }\n\n      const reader = readableStream.getReader();\n      const textContent = {\n        items: [],\n        styles: Object.create(null),\n      };\n      pump();\n    });\n  }\n\n  /**\n   * @returns {Promise<StructTreeNode>} A promise that is resolved with a\n   *   {@link StructTreeNode} object that represents the page's structure tree,\n   *   or `null` when no structure tree is present for the current page.\n   */\n  getStructTree() {\n    return this._transport.getStructTree(this._pageIndex);\n  }\n\n  /**\n   * Destroys the page object.\n   * @private\n   */\n  _destroy() {\n    this.destroyed = true;\n\n    const waitOn = [];\n    for (const intentState of this._intentStates.values()) {\n      this._abortOperatorList({\n        intentState,\n        reason: new Error(\"Page was destroyed.\"),\n        force: true,\n      });\n\n      if (intentState.opListReadCapability) {\n        // Avoid errors below, since the renderTasks are just stubs.\n        continue;\n      }\n      for (const internalRenderTask of intentState.renderTasks) {\n        waitOn.push(internalRenderTask.completed);\n        internalRenderTask.cancel();\n      }\n    }\n    this.objs.clear();\n    this.#pendingCleanup = false;\n    this.#abortDelayedCleanup();\n\n    return Promise.all(waitOn);\n  }\n\n  /**\n   * Cleans up resources allocated by the page.\n   *\n   * @param {boolean} [resetStats] - Reset page stats, if enabled.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  cleanup(resetStats = false) {\n    this.#pendingCleanup = true;\n    const success = this.#tryCleanup(/* delayed = */ false);\n\n    if (resetStats && success) {\n      this._stats &&= new StatTimer();\n    }\n    return success;\n  }\n\n  /**\n   * Attempts to clean up if rendering is in a state where that's possible.\n   * @param {boolean} [delayed] - Delay the cleanup, to e.g. improve zooming\n   *   performance in documents with large images.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  #tryCleanup(delayed = false) {\n    this.#abortDelayedCleanup();\n\n    if (!this.#pendingCleanup) {\n      return false;\n    }\n    if (delayed) {\n      this.#delayedCleanupTimeout = setTimeout(() => {\n        this.#delayedCleanupTimeout = null;\n        this.#tryCleanup(/* delayed = */ false);\n      }, DELAYED_CLEANUP_TIMEOUT);\n\n      return false;\n    }\n    for (const { renderTasks, operatorList } of this._intentStates.values()) {\n      if (renderTasks.size > 0 || !operatorList.lastChunk) {\n        return false;\n      }\n    }\n    this._intentStates.clear();\n    this.objs.clear();\n    this.#pendingCleanup = false;\n    return true;\n  }\n\n  #abortDelayedCleanup() {\n    if (this.#delayedCleanupTimeout) {\n      clearTimeout(this.#delayedCleanupTimeout);\n      this.#delayedCleanupTimeout = null;\n    }\n  }\n\n  /**\n   * @private\n   */\n  _startRenderPage(transparency, cacheKey) {\n    const intentState = this._intentStates.get(cacheKey);\n    if (!intentState) {\n      return; // Rendering was cancelled.\n    }\n    this._stats?.timeEnd(\"Page Request\");\n\n    // TODO Refactor RenderPageRequest to separate rendering\n    // and operator list logic\n    intentState.displayReadyCapability?.resolve(transparency);\n  }\n\n  /**\n   * @private\n   */\n  _renderPageChunk(operatorListChunk, intentState) {\n    // Add the new chunk to the current operator list.\n    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n    }\n    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n    intentState.operatorList.separateAnnots = operatorListChunk.separateAnnots;\n\n    // Notify all the rendering tasks there are more operators to be consumed.\n    for (const internalRenderTask of intentState.renderTasks) {\n      internalRenderTask.operatorListChanged();\n    }\n\n    if (operatorListChunk.lastChunk) {\n      this.#tryCleanup(/* delayed = */ true);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _pumpOperatorList({ renderingIntent, cacheKey, annotationStorageMap }) {\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      assert(\n        Number.isInteger(renderingIntent) && renderingIntent > 0,\n        '_pumpOperatorList: Expected valid \"renderingIntent\" argument.'\n      );\n    }\n\n    const readableStream = this._transport.messageHandler.sendWithStream(\n      \"GetOperatorList\",\n      {\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n        cacheKey,\n        annotationStorage: annotationStorageMap,\n      }\n    );\n    const reader = readableStream.getReader();\n\n    const intentState = this._intentStates.get(cacheKey);\n    intentState.streamReader = reader;\n\n    const pump = () => {\n      reader.read().then(\n        ({ value, done }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          this._renderPageChunk(value, intentState);\n          pump();\n        },\n        reason => {\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          if (intentState.operatorList) {\n            // Mark operator list as complete.\n            intentState.operatorList.lastChunk = true;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n            this.#tryCleanup(/* delayed = */ true);\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        }\n      );\n    };\n    pump();\n  }\n\n  /**\n   * @private\n   */\n  _abortOperatorList({ intentState, reason, force = false }) {\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      assert(\n        reason instanceof Error,\n        '_abortOperatorList: Expected valid \"reason\" argument.'\n      );\n    }\n\n    if (!intentState.streamReader) {\n      return;\n    }\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    if (!force) {\n      // Ensure that an Error occurring in *only* one `InternalRenderTask`, e.g.\n      // multiple render() calls on the same canvas, won't break all rendering.\n      if (intentState.renderTasks.size > 0) {\n        return;\n      }\n      // Don't immediately abort parsing on the worker-thread when rendering is\n      // cancelled, since that will unnecessarily delay re-rendering when (for\n      // partially parsed pages) e.g. zooming/rotation occurs in the viewer.\n      if (reason instanceof RenderingCancelledException) {\n        let delay = RENDERING_CANCELLED_TIMEOUT;\n        if (reason.extraDelay > 0 && reason.extraDelay < /* ms = */ 1000) {\n          // Above, we prevent the total delay from becoming arbitrarily large.\n          delay += reason.extraDelay;\n        }\n\n        intentState.streamReaderCancelTimeout = setTimeout(() => {\n          intentState.streamReaderCancelTimeout = null;\n          this._abortOperatorList({ intentState, reason, force: true });\n        }, delay);\n        return;\n      }\n    }\n    intentState.streamReader\n      .cancel(new AbortException(reason.message))\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n    intentState.streamReader = null;\n\n    if (this._transport.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    // Remove the current `intentState`, since a cancelled `getOperatorList`\n    // call on the worker-thread cannot be re-started...\n    for (const [curCacheKey, curIntentState] of this._intentStates) {\n      if (curIntentState === intentState) {\n        this._intentStates.delete(curCacheKey);\n        break;\n      }\n    }\n    // ... and force clean-up to ensure that any old state is always removed.\n    this.cleanup();\n  }\n\n  /**\n   * @type {StatTimer | null} Returns page stats, if enabled; returns `null`\n   *   otherwise.\n   */\n  get stats() {\n    return this._stats;\n  }\n}\n\nclass LoopbackPort {\n  #listeners = new Set();\n\n  #deferred = Promise.resolve();\n\n  postMessage(obj, transfer) {\n    const event = {\n      data: structuredClone(\n        obj,\n        (typeof PDFJSDev === \"undefined\" ||\n          PDFJSDev.test(\"SKIP_BABEL || TESTING\")) &&\n          transfer\n          ? { transfer }\n          : null\n      ),\n    };\n\n    this.#deferred.then(() => {\n      for (const listener of this.#listeners) {\n        listener.call(this, event);\n      }\n    });\n  }\n\n  addEventListener(name, listener) {\n    this.#listeners.add(listener);\n  }\n\n  removeEventListener(name, listener) {\n    this.#listeners.delete(listener);\n  }\n\n  terminate() {\n    this.#listeners.clear();\n  }\n}\n\n/**\n * @typedef {Object} PDFWorkerParameters\n * @property {string} [name] - The name of the worker.\n * @property {Worker} [port] - The `workerPort` object.\n * @property {number} [verbosity] - Controls the logging level;\n *   the constants from {@link VerbosityLevel} should be used.\n */\n\nconst PDFWorkerUtil = {\n  isWorkerDisabled: false,\n  fallbackWorkerSrc: null,\n  fakeWorkerId: 0,\n};\nif (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n  // eslint-disable-next-line no-undef\n  if (isNodeJS && typeof __non_webpack_require__ === \"function\") {\n    // Workers aren't supported in Node.js, force-disabling them there.\n    PDFWorkerUtil.isWorkerDisabled = true;\n\n    PDFWorkerUtil.fallbackWorkerSrc = PDFJSDev.test(\"LIB\")\n      ? \"../pdf.worker.js\"\n      : \"./pdf.worker.js\";\n  } else if (typeof document === \"object\") {\n    const pdfjsFilePath = document?.currentScript?.src;\n    if (pdfjsFilePath) {\n      PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(\n        /(\\.(?:min\\.)?js)(\\?.*)?$/i,\n        \".worker$1$2\"\n      );\n    }\n  }\n\n  // Check if URLs have the same origin. For non-HTTP based URLs, returns false.\n  PDFWorkerUtil.isSameOrigin = function (baseUrl, otherUrl) {\n    let base;\n    try {\n      base = new URL(baseUrl);\n      if (!base.origin || base.origin === \"null\") {\n        return false; // non-HTTP url\n      }\n    } catch (e) {\n      return false;\n    }\n\n    const other = new URL(otherUrl, base);\n    return base.origin === other.origin;\n  };\n\n  PDFWorkerUtil.createCDNWrapper = function (url) {\n    // We will rely on blob URL's property to specify origin.\n    // We want this function to fail in case if createObjectURL or Blob do not\n    // exist or fail for some reason -- our Worker creation will fail anyway.\n    const wrapper = `importScripts(\"${url}\");`;\n    return URL.createObjectURL(new Blob([wrapper]));\n  };\n}\n\n/**\n * PDF.js web worker abstraction that controls the instantiation of PDF\n * documents. Message handlers are used to pass information from the main\n * thread to the worker thread and vice versa. If the creation of a web\n * worker is not possible, a \"fake\" worker will be used instead.\n *\n * @param {PDFWorkerParameters} params - The worker initialization parameters.\n */\nclass PDFWorker {\n  static #workerPorts = new WeakMap();\n\n  constructor({\n    name = null,\n    port = null,\n    verbosity = getVerbosityLevel(),\n  } = {}) {\n    if (port && PDFWorker.#workerPorts.has(port)) {\n      throw new Error(\"Cannot use more than one PDFWorker per port.\");\n    }\n\n    this.name = name;\n    this.destroyed = false;\n    this.verbosity = verbosity;\n\n    this._readyCapability = new PromiseCapability();\n    this._port = null;\n    this._webWorker = null;\n    this._messageHandler = null;\n\n    if (port) {\n      PDFWorker.#workerPorts.set(port, this);\n      this._initializeFromPort(port);\n      return;\n    }\n    this._initialize();\n  }\n\n  /**\n   * Promise for worker initialization completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._readyCapability.promise;\n  }\n\n  /**\n   * The current `workerPort`, when it exists.\n   * @type {Worker}\n   */\n  get port() {\n    return this._port;\n  }\n\n  /**\n   * The current MessageHandler-instance.\n   * @type {MessageHandler}\n   */\n  get messageHandler() {\n    return this._messageHandler;\n  }\n\n  _initializeFromPort(port) {\n    this._port = port;\n    this._messageHandler = new MessageHandler(\"main\", \"worker\", port);\n    this._messageHandler.on(\"ready\", function () {\n      // Ignoring \"ready\" event -- MessageHandler should already be initialized\n      // and ready to accept messages.\n    });\n    this._readyCapability.resolve();\n    // Send global setting, e.g. verbosity level.\n    this._messageHandler.send(\"configure\", {\n      verbosity: this.verbosity,\n    });\n  }\n\n  _initialize() {\n    // If worker support isn't disabled explicit and the browser has worker\n    // support, create a new web worker and test if it/the browser fulfills\n    // all requirements to run parts of pdf.js in a web worker.\n    // Right now, the requirement is, that an Uint8Array is still an\n    // Uint8Array as it arrives on the worker. (Chrome added this with v.15.)\n    if (\n      !PDFWorkerUtil.isWorkerDisabled &&\n      !PDFWorker._mainThreadWorkerMessageHandler\n    ) {\n      let { workerSrc } = PDFWorker;\n\n      try {\n        // Wraps workerSrc path into blob URL, if the former does not belong\n        // to the same origin.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          !PDFWorkerUtil.isSameOrigin(window.location.href, workerSrc)\n        ) {\n          workerSrc = PDFWorkerUtil.createCDNWrapper(\n            new URL(workerSrc, window.location).href\n          );\n        }\n\n        const worker =\n          typeof PDFJSDev === \"undefined\" &&\n          !workerSrc.endsWith(\"/build/pdf.worker.js\")\n            ? new Worker(workerSrc, { type: \"module\" })\n            : new Worker(workerSrc);\n        const messageHandler = new MessageHandler(\"main\", \"worker\", worker);\n        const terminateEarly = () => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          messageHandler.destroy();\n          worker.terminate();\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          } else {\n            // Fall back to fake worker if the termination is caused by an\n            // error (e.g. NetworkError / SecurityError).\n            this._setupFakeWorker();\n          }\n        };\n\n        const onWorkerError = () => {\n          if (!this._webWorker) {\n            // Worker failed to initialize due to an error. Clean up and fall\n            // back to the fake worker.\n            terminateEarly();\n          }\n        };\n        worker.addEventListener(\"error\", onWorkerError);\n\n        messageHandler.on(\"test\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          if (data) {\n            this._messageHandler = messageHandler;\n            this._port = worker;\n            this._webWorker = worker;\n\n            this._readyCapability.resolve();\n            // Send global setting, e.g. verbosity level.\n            messageHandler.send(\"configure\", {\n              verbosity: this.verbosity,\n            });\n          } else {\n            this._setupFakeWorker();\n            messageHandler.destroy();\n            worker.terminate();\n          }\n        });\n\n        messageHandler.on(\"ready\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          try {\n            sendTest();\n          } catch (e) {\n            // We need fallback to a faked worker.\n            this._setupFakeWorker();\n          }\n        });\n\n        const sendTest = () => {\n          const testObj = new Uint8Array();\n          // Ensure that we can use `postMessage` transfers.\n          messageHandler.send(\"test\", testObj, [testObj.buffer]);\n        };\n\n        // It might take time for the worker to initialize. We will try to send\n        // the \"test\" message immediately, and once the \"ready\" message arrives.\n        // The worker shall process only the first received \"test\" message.\n        sendTest();\n        return;\n      } catch (e) {\n        info(\"The worker has been disabled.\");\n      }\n    }\n    // Either workers are disabled, not supported or have thrown an exception.\n    // Thus, we fallback to a faked worker.\n    this._setupFakeWorker();\n  }\n\n  _setupFakeWorker() {\n    if (!PDFWorkerUtil.isWorkerDisabled) {\n      warn(\"Setting up fake worker.\");\n      PDFWorkerUtil.isWorkerDisabled = true;\n    }\n\n    PDFWorker._setupFakeWorkerGlobal\n      .then(WorkerMessageHandler => {\n        if (this.destroyed) {\n          this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          return;\n        }\n        const port = new LoopbackPort();\n        this._port = port;\n\n        // All fake workers use the same port, making id unique.\n        const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n\n        // If the main thread is our worker, setup the handling for the\n        // messages -- the main thread sends to it self.\n        const workerHandler = new MessageHandler(id + \"_worker\", id, port);\n        WorkerMessageHandler.setup(workerHandler, port);\n\n        const messageHandler = new MessageHandler(id, id + \"_worker\", port);\n        this._messageHandler = messageHandler;\n        this._readyCapability.resolve();\n        // Send global setting, e.g. verbosity level.\n        messageHandler.send(\"configure\", {\n          verbosity: this.verbosity,\n        });\n      })\n      .catch(reason => {\n        this._readyCapability.reject(\n          new Error(`Setting up fake worker failed: \"${reason.message}\".`)\n        );\n      });\n  }\n\n  /**\n   * Destroys the worker instance.\n   */\n  destroy() {\n    this.destroyed = true;\n    if (this._webWorker) {\n      // We need to terminate only web worker created resource.\n      this._webWorker.terminate();\n      this._webWorker = null;\n    }\n    PDFWorker.#workerPorts.delete(this._port);\n    this._port = null;\n    if (this._messageHandler) {\n      this._messageHandler.destroy();\n      this._messageHandler = null;\n    }\n  }\n\n  /**\n   * @param {PDFWorkerParameters} params - The worker initialization parameters.\n   */\n  static fromPort(params) {\n    if (!params?.port) {\n      throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n    }\n    if (this.#workerPorts.has(params.port)) {\n      return this.#workerPorts.get(params.port);\n    }\n    return new PDFWorker(params);\n  }\n\n  /**\n   * The current `workerSrc`, when it exists.\n   * @type {string}\n   */\n  static get workerSrc() {\n    if (GlobalWorkerOptions.workerSrc) {\n      return GlobalWorkerOptions.workerSrc;\n    }\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      PDFWorkerUtil.fallbackWorkerSrc !== null\n    ) {\n      if (!isNodeJS) {\n        deprecated('No \"GlobalWorkerOptions.workerSrc\" specified.');\n      }\n      return PDFWorkerUtil.fallbackWorkerSrc;\n    }\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n  }\n\n  static get _mainThreadWorkerMessageHandler() {\n    try {\n      return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n    } catch (ex) {\n      return null;\n    }\n  }\n\n  // Loads worker code into the main-thread.\n  static get _setupFakeWorkerGlobal() {\n    const loader = async () => {\n      const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n\n      if (mainWorkerMessageHandler) {\n        // The worker was already loaded using e.g. a `<script>` tag.\n        return mainWorkerMessageHandler;\n      }\n      if (typeof PDFJSDev === \"undefined\") {\n        const worker = await import(\"pdfjs/pdf.worker.js\");\n        return worker.WorkerMessageHandler;\n      }\n      if (\n        PDFJSDev.test(\"GENERIC\") &&\n        isNodeJS &&\n        // eslint-disable-next-line no-undef\n        typeof __non_webpack_require__ === \"function\"\n      ) {\n        // Since bundlers, such as Webpack, cannot be told to leave `require`\n        // statements alone we are thus forced to jump through hoops in order\n        // to prevent `Critical dependency: ...` warnings in third-party\n        // deployments of the built `pdf.js`/`pdf.worker.js` files; see\n        // https://github.com/webpack/webpack/issues/8826\n        //\n        // The following hack is based on the assumption that code running in\n        // Node.js won't ever be affected by e.g. Content Security Policies that\n        // prevent the use of `eval`. If that ever occurs, we should revert this\n        // to a normal `__non_webpack_require__` statement and simply document\n        // the Webpack warnings instead (telling users to ignore them).\n        //\n        // eslint-disable-next-line no-eval\n        const worker = eval(\"require\")(this.workerSrc);\n        return worker.WorkerMessageHandler;\n      }\n      await loadScript(this.workerSrc);\n      return window.pdfjsWorker.WorkerMessageHandler;\n    };\n\n    return shadow(this, \"_setupFakeWorkerGlobal\", loader());\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass WorkerTransport {\n  #methodPromises = new Map();\n\n  #pageCache = new Map();\n\n  #pagePromises = new Map();\n\n  constructor(messageHandler, loadingTask, networkStream, params, factory) {\n    this.messageHandler = messageHandler;\n    this.loadingTask = loadingTask;\n    this.commonObjs = new PDFObjects();\n    this.fontLoader = new FontLoader({\n      ownerDocument: params.ownerDocument,\n      styleElement: params.styleElement,\n    });\n    this._params = params;\n\n    this.canvasFactory = factory.canvasFactory;\n    this.filterFactory = factory.filterFactory;\n    this.cMapReaderFactory = factory.cMapReaderFactory;\n    this.standardFontDataFactory = factory.standardFontDataFactory;\n\n    this.destroyed = false;\n    this.destroyCapability = null;\n    this._passwordCapability = null;\n\n    this._networkStream = networkStream;\n    this._fullReader = null;\n    this._lastProgress = null;\n    this.downloadInfoCapability = new PromiseCapability();\n\n    this.setupMessageHandler();\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      // For testing purposes.\n      Object.defineProperty(this, \"getXFADatasets\", {\n        value: () => {\n          return this.messageHandler.sendWithPromise(\"GetXFADatasets\", null);\n        },\n      });\n      Object.defineProperty(this, \"getXRefPrevValue\", {\n        value: () => {\n          return this.messageHandler.sendWithPromise(\"GetXRefPrevValue\", null);\n        },\n      });\n    }\n  }\n\n  #cacheSimpleMethod(name, data = null) {\n    const cachedPromise = this.#methodPromises.get(name);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler.sendWithPromise(name, data);\n\n    this.#methodPromises.set(name, promise);\n    return promise;\n  }\n\n  get annotationStorage() {\n    return shadow(this, \"annotationStorage\", new AnnotationStorage());\n  }\n\n  getRenderingIntent(\n    intent,\n    annotationMode = AnnotationMode.ENABLE,\n    printAnnotationStorage = null,\n    isOpList = false\n  ) {\n    let renderingIntent = RenderingIntentFlag.DISPLAY; // Default value.\n    let annotationMap = null;\n\n    switch (intent) {\n      case \"any\":\n        renderingIntent = RenderingIntentFlag.ANY;\n        break;\n      case \"display\":\n        break;\n      case \"print\":\n        renderingIntent = RenderingIntentFlag.PRINT;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid intent: ${intent}`);\n    }\n\n    switch (annotationMode) {\n      case AnnotationMode.DISABLE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_DISABLE;\n        break;\n      case AnnotationMode.ENABLE:\n        break;\n      case AnnotationMode.ENABLE_FORMS:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_FORMS;\n        break;\n      case AnnotationMode.ENABLE_STORAGE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_STORAGE;\n\n        const annotationStorage =\n          renderingIntent & RenderingIntentFlag.PRINT &&\n          printAnnotationStorage instanceof PrintAnnotationStorage\n            ? printAnnotationStorage\n            : this.annotationStorage;\n\n        annotationMap = annotationStorage.serializable;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n    }\n\n    if (isOpList) {\n      renderingIntent += RenderingIntentFlag.OPLIST;\n    }\n\n    return {\n      renderingIntent,\n      cacheKey: `${renderingIntent}_${AnnotationStorage.getHash(\n        annotationMap\n      )}`,\n      annotationStorageMap: annotationMap,\n    };\n  }\n\n  destroy() {\n    if (this.destroyCapability) {\n      return this.destroyCapability.promise;\n    }\n\n    this.destroyed = true;\n    this.destroyCapability = new PromiseCapability();\n\n    if (this._passwordCapability) {\n      this._passwordCapability.reject(\n        new Error(\"Worker was destroyed during onPassword callback\")\n      );\n    }\n\n    const waitOn = [];\n    // We need to wait for all renderings to be completed, e.g.\n    // timeout/rAF can take a long time.\n    for (const page of this.#pageCache.values()) {\n      waitOn.push(page._destroy());\n    }\n    this.#pageCache.clear();\n    this.#pagePromises.clear();\n    // Allow `AnnotationStorage`-related clean-up when destroying the document.\n    if (this.hasOwnProperty(\"annotationStorage\")) {\n      this.annotationStorage.resetModified();\n    }\n    // We also need to wait for the worker to finish its long running tasks.\n    const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n    waitOn.push(terminated);\n\n    Promise.all(waitOn).then(() => {\n      this.commonObjs.clear();\n      this.fontLoader.clear();\n      this.#methodPromises.clear();\n      this.filterFactory.destroy();\n\n      if (this._networkStream) {\n        this._networkStream.cancelAllRequests(\n          new AbortException(\"Worker was terminated.\")\n        );\n      }\n\n      if (this.messageHandler) {\n        this.messageHandler.destroy();\n        this.messageHandler = null;\n      }\n      this.destroyCapability.resolve();\n    }, this.destroyCapability.reject);\n    return this.destroyCapability.promise;\n  }\n\n  setupMessageHandler() {\n    const { messageHandler, loadingTask } = this;\n\n    messageHandler.on(\"GetReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetReader - no `IPDFStream` instance available.\"\n      );\n      this._fullReader = this._networkStream.getFullReader();\n      this._fullReader.onProgress = evt => {\n        this._lastProgress = {\n          loaded: evt.loaded,\n          total: evt.total,\n        };\n      };\n      sink.onPull = () => {\n        this._fullReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              value instanceof ArrayBuffer,\n              \"GetReader - expected an ArrayBuffer.\"\n            );\n            // Enqueue data chunk into sink, and transfer it\n            // to other side as `Transferable` object.\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        this._fullReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"ReaderHeadersReady\", data => {\n      const headersCapability = new PromiseCapability();\n      const fullReader = this._fullReader;\n      fullReader.headersReady.then(() => {\n        // If stream or range are disabled, it's our only way to report\n        // loading progress.\n        if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n          if (this._lastProgress) {\n            loadingTask.onProgress?.(this._lastProgress);\n          }\n          fullReader.onProgress = evt => {\n            loadingTask.onProgress?.({\n              loaded: evt.loaded,\n              total: evt.total,\n            });\n          };\n        }\n\n        headersCapability.resolve({\n          isStreamingSupported: fullReader.isStreamingSupported,\n          isRangeSupported: fullReader.isRangeSupported,\n          contentLength: fullReader.contentLength,\n        });\n      }, headersCapability.reject);\n\n      return headersCapability.promise;\n    });\n\n    messageHandler.on(\"GetRangeReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetRangeReader - no `IPDFStream` instance available.\"\n      );\n      const rangeReader = this._networkStream.getRangeReader(\n        data.begin,\n        data.end\n      );\n\n      // When streaming is enabled, it's possible that the data requested here\n      // has already been fetched via the `_fullRequestReader` implementation.\n      // However, given that the PDF data is loaded asynchronously on the\n      // main-thread and then sent via `postMessage` to the worker-thread,\n      // it may not have been available during parsing (hence the attempt to\n      // use range requests here).\n      //\n      // To avoid wasting time and resources here, we'll thus *not* dispatch\n      // range requests if the data was already loaded but has not been sent to\n      // the worker-thread yet (which will happen via the `_fullRequestReader`).\n      if (!rangeReader) {\n        sink.close();\n        return;\n      }\n\n      sink.onPull = () => {\n        rangeReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              value instanceof ArrayBuffer,\n              \"GetRangeReader - expected an ArrayBuffer.\"\n            );\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        rangeReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"GetDoc\", ({ pdfInfo }) => {\n      this._numPages = pdfInfo.numPages;\n      this._htmlForXfa = pdfInfo.htmlForXfa;\n      delete pdfInfo.htmlForXfa;\n      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n    });\n\n    messageHandler.on(\"DocException\", function (ex) {\n      let reason;\n      switch (ex.name) {\n        case \"PasswordException\":\n          reason = new PasswordException(ex.message, ex.code);\n          break;\n        case \"InvalidPDFException\":\n          reason = new InvalidPDFException(ex.message);\n          break;\n        case \"MissingPDFException\":\n          reason = new MissingPDFException(ex.message);\n          break;\n        case \"UnexpectedResponseException\":\n          reason = new UnexpectedResponseException(ex.message, ex.status);\n          break;\n        case \"UnknownErrorException\":\n          reason = new UnknownErrorException(ex.message, ex.details);\n          break;\n        default:\n          unreachable(\"DocException - expected a valid Error.\");\n      }\n      loadingTask._capability.reject(reason);\n    });\n\n    messageHandler.on(\"PasswordRequest\", exception => {\n      this._passwordCapability = new PromiseCapability();\n\n      if (loadingTask.onPassword) {\n        const updatePassword = password => {\n          if (password instanceof Error) {\n            this._passwordCapability.reject(password);\n          } else {\n            this._passwordCapability.resolve({ password });\n          }\n        };\n        try {\n          loadingTask.onPassword(updatePassword, exception.code);\n        } catch (ex) {\n          this._passwordCapability.reject(ex);\n        }\n      } else {\n        this._passwordCapability.reject(\n          new PasswordException(exception.message, exception.code)\n        );\n      }\n      return this._passwordCapability.promise;\n    });\n\n    messageHandler.on(\"DataLoaded\", data => {\n      // For consistency: Ensure that progress is always reported when the\n      // entire PDF file has been loaded, regardless of how it was fetched.\n      loadingTask.onProgress?.({\n        loaded: data.length,\n        total: data.length,\n      });\n\n      this.downloadInfoCapability.resolve(data);\n    });\n\n    messageHandler.on(\"StartRenderPage\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const page = this.#pageCache.get(data.pageIndex);\n      page._startRenderPage(data.transparency, data.cacheKey);\n    });\n\n    messageHandler.on(\"commonobj\", ([id, type, exportedData]) => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      if (this.commonObjs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Font\":\n          const params = this._params;\n\n          if (\"error\" in exportedData) {\n            const exportedError = exportedData.error;\n            warn(`Error during font loading: ${exportedError}`);\n            this.commonObjs.resolve(id, exportedError);\n            break;\n          }\n\n          const inspectFont =\n            params.pdfBug && globalThis.FontInspector?.enabled\n              ? (font, url) => globalThis.FontInspector.fontAdded(font, url)\n              : null;\n          const font = new FontFaceObject(exportedData, {\n            isEvalSupported: params.isEvalSupported,\n            disableFontFace: params.disableFontFace,\n            ignoreErrors: params.ignoreErrors,\n            inspectFont,\n          });\n\n          this.fontLoader\n            .bind(font)\n            .catch(reason => {\n              return messageHandler.sendWithPromise(\"FontFallback\", { id });\n            })\n            .finally(() => {\n              if (!params.fontExtraProperties && font.data) {\n                // Immediately release the `font.data` property once the font\n                // has been attached to the DOM, since it's no longer needed,\n                // rather than waiting for a `PDFDocumentProxy.cleanup` call.\n                // Since `font.data` could be very large, e.g. in some cases\n                // multiple megabytes, this will help reduce memory usage.\n                font.data = null;\n              }\n              this.commonObjs.resolve(id, font);\n            });\n          break;\n        case \"FontPath\":\n        case \"Image\":\n        case \"Pattern\":\n          this.commonObjs.resolve(id, exportedData);\n          break;\n        default:\n          throw new Error(`Got unknown common object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"obj\", ([id, pageIndex, type, imageData]) => {\n      if (this.destroyed) {\n        // Ignore any pending requests if the worker was terminated.\n        return;\n      }\n\n      const pageProxy = this.#pageCache.get(pageIndex);\n      if (pageProxy.objs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Image\":\n          pageProxy.objs.resolve(id, imageData);\n\n          // Heuristic that will allow us not to store large data.\n          if (imageData) {\n            let length;\n            if (imageData.bitmap) {\n              const { width, height } = imageData;\n              length = width * height * 4;\n            } else {\n              length = imageData.data?.length || 0;\n            }\n\n            if (length > MAX_IMAGE_SIZE_TO_CACHE) {\n              pageProxy._maybeCleanupAfterRender = true;\n            }\n          }\n          break;\n        case \"Pattern\":\n          pageProxy.objs.resolve(id, imageData);\n          break;\n        default:\n          throw new Error(`Got unknown object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"DocProgress\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n      loadingTask.onProgress?.({\n        loaded: data.loaded,\n        total: data.total,\n      });\n    });\n\n    messageHandler.on(\"FetchBuiltInCMap\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.cMapReaderFactory) {\n        return Promise.reject(\n          new Error(\n            \"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.cMapReaderFactory.fetch(data);\n    });\n\n    messageHandler.on(\"FetchStandardFontData\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.standardFontDataFactory) {\n        return Promise.reject(\n          new Error(\n            \"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.standardFontDataFactory.fetch(data);\n    });\n  }\n\n  getData() {\n    return this.messageHandler.sendWithPromise(\"GetData\", null);\n  }\n\n  saveDocument() {\n    if (this.annotationStorage.size <= 0) {\n      warn(\n        \"saveDocument called while `annotationStorage` is empty, \" +\n          \"please use the getData-method instead.\"\n      );\n    }\n    return this.messageHandler\n      .sendWithPromise(\"SaveDocument\", {\n        isPureXfa: !!this._htmlForXfa,\n        numPages: this._numPages,\n        annotationStorage: this.annotationStorage.serializable,\n        filename: this._fullReader?.filename ?? null,\n      })\n      .finally(() => {\n        this.annotationStorage.resetModified();\n      });\n  }\n\n  getPage(pageNumber) {\n    if (\n      !Number.isInteger(pageNumber) ||\n      pageNumber <= 0 ||\n      pageNumber > this._numPages\n    ) {\n      return Promise.reject(new Error(\"Invalid page request.\"));\n    }\n\n    const pageIndex = pageNumber - 1,\n      cachedPromise = this.#pagePromises.get(pageIndex);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(\"GetPage\", {\n        pageIndex,\n      })\n      .then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n        const page = new PDFPageProxy(\n          pageIndex,\n          pageInfo,\n          this,\n          this._params.pdfBug\n        );\n        this.#pageCache.set(pageIndex, page);\n        return page;\n      });\n    this.#pagePromises.set(pageIndex, promise);\n    return promise;\n  }\n\n  getPageIndex(ref) {\n    if (\n      typeof ref !== \"object\" ||\n      ref === null ||\n      !Number.isInteger(ref.num) ||\n      ref.num < 0 ||\n      !Number.isInteger(ref.gen) ||\n      ref.gen < 0\n    ) {\n      return Promise.reject(new Error(\"Invalid pageIndex request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n      num: ref.num,\n      gen: ref.gen,\n    });\n  }\n\n  getAnnotations(pageIndex, intent) {\n    return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n      pageIndex,\n      intent,\n    });\n  }\n\n  getFieldObjects() {\n    return this.#cacheSimpleMethod(\"GetFieldObjects\");\n  }\n\n  hasJSActions() {\n    return this.#cacheSimpleMethod(\"HasJSActions\");\n  }\n\n  getCalculationOrderIds() {\n    return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n  }\n\n  getDestinations() {\n    return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n  }\n\n  getDestination(id) {\n    if (typeof id !== \"string\") {\n      return Promise.reject(new Error(\"Invalid destination request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetDestination\", {\n      id,\n    });\n  }\n\n  getPageLabels() {\n    return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n  }\n\n  getPageLayout() {\n    return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n  }\n\n  getPageMode() {\n    return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n  }\n\n  getViewerPreferences() {\n    return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n  }\n\n  getOpenAction() {\n    return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n  }\n\n  getAttachments() {\n    return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n  }\n\n  getJavaScript() {\n    return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n  }\n\n  getDocJSActions() {\n    return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n  }\n\n  getPageJSActions(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n      pageIndex,\n    });\n  }\n\n  getStructTree(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n      pageIndex,\n    });\n  }\n\n  getOutline() {\n    return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n  }\n\n  getOptionalContentConfig() {\n    return this.messageHandler\n      .sendWithPromise(\"GetOptionalContentConfig\", null)\n      .then(results => {\n        return new OptionalContentConfig(results);\n      });\n  }\n\n  getPermissions() {\n    return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n  }\n\n  getMetadata() {\n    const name = \"GetMetadata\",\n      cachedPromise = this.#methodPromises.get(name);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(name, null)\n      .then(results => {\n        return {\n          info: results[0],\n          metadata: results[1] ? new Metadata(results[1]) : null,\n          contentDispositionFilename: this._fullReader?.filename ?? null,\n          contentLength: this._fullReader?.contentLength ?? null,\n        };\n      });\n    this.#methodPromises.set(name, promise);\n    return promise;\n  }\n\n  getMarkInfo() {\n    return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n  }\n\n  async startCleanup(keepLoadedFonts = false) {\n    if (this.destroyed) {\n      return; // No need to manually clean-up when destruction has started.\n    }\n    await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n    for (const page of this.#pageCache.values()) {\n      const cleanupSuccessful = page.cleanup();\n\n      if (!cleanupSuccessful) {\n        throw new Error(\n          `startCleanup: Page ${page.pageNumber} is currently rendering.`\n        );\n      }\n    }\n    this.commonObjs.clear();\n    if (!keepLoadedFonts) {\n      this.fontLoader.clear();\n    }\n    this.#methodPromises.clear();\n    this.filterFactory.destroy(/* keepHCM = */ true);\n  }\n\n  get loadingParams() {\n    const { disableAutoFetch, enableXfa } = this._params;\n    return shadow(this, \"loadingParams\", {\n      disableAutoFetch,\n      enableXfa,\n    });\n  }\n}\n\n/**\n * A PDF document and page is built of many objects. E.g. there are objects for\n * fonts, images, rendering code, etc. These objects may get processed inside of\n * a worker. This class implements some basic methods to manage these objects.\n */\nclass PDFObjects {\n  #objs = Object.create(null);\n\n  /**\n   * Ensures there is an object defined for `objId`.\n   *\n   * @param {string} objId\n   * @returns {Object}\n   */\n  #ensureObj(objId) {\n    const obj = this.#objs[objId];\n    if (obj) {\n      return obj;\n    }\n    return (this.#objs[objId] = {\n      capability: new PromiseCapability(),\n      data: null,\n    });\n  }\n\n  /**\n   * If called *without* callback, this returns the data of `objId` but the\n   * object needs to be resolved. If it isn't, this method throws.\n   *\n   * If called *with* a callback, the callback is called with the data of the\n   * object once the object is resolved. That means, if you call this method\n   * and the object is already resolved, the callback gets called right away.\n   *\n   * @param {string} objId\n   * @param {function} [callback]\n   * @returns {any}\n   */\n  get(objId, callback = null) {\n    // If there is a callback, then the get can be async and the object is\n    // not required to be resolved right now.\n    if (callback) {\n      const obj = this.#ensureObj(objId);\n      obj.capability.promise.then(() => callback(obj.data));\n      return null;\n    }\n    // If there isn't a callback, the user expects to get the resolved data\n    // directly.\n    const obj = this.#objs[objId];\n    // If there isn't an object yet or the object isn't resolved, then the\n    // data isn't ready yet!\n    if (!obj?.capability.settled) {\n      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n    }\n    return obj.data;\n  }\n\n  /**\n   * @param {string} objId\n   * @returns {boolean}\n   */\n  has(objId) {\n    const obj = this.#objs[objId];\n    return obj?.capability.settled || false;\n  }\n\n  /**\n   * Resolves the object `objId` with optional `data`.\n   *\n   * @param {string} objId\n   * @param {any} [data]\n   */\n  resolve(objId, data = null) {\n    const obj = this.#ensureObj(objId);\n    obj.data = data;\n    obj.capability.resolve();\n  }\n\n  clear() {\n    for (const objId in this.#objs) {\n      const { data } = this.#objs[objId];\n      data?.bitmap?.close(); // Release any `ImageBitmap` data.\n    }\n    this.#objs = Object.create(null);\n  }\n}\n\n/**\n * Allows controlling of the rendering tasks.\n */\nclass RenderTask {\n  #internalRenderTask = null;\n\n  constructor(internalRenderTask) {\n    this.#internalRenderTask = internalRenderTask;\n\n    /**\n     * Callback for incremental rendering -- a function that will be called\n     * each time the rendering is paused.  To continue rendering call the\n     * function that is the first argument to the callback.\n     * @type {function}\n     */\n    this.onContinue = null;\n  }\n\n  /**\n   * Promise for rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this.#internalRenderTask.capability.promise;\n  }\n\n  /**\n   * Cancels the rendering task. If the task is currently rendering it will\n   * not be cancelled until graphics pauses with a timeout. The promise that\n   * this object extends will be rejected when cancelled.\n   *\n   * @param {number} [extraDelay]\n   */\n  cancel(extraDelay = 0) {\n    this.#internalRenderTask.cancel(/* error = */ null, extraDelay);\n  }\n\n  /**\n   * Whether form fields are rendered separately from the main operatorList.\n   * @type {boolean}\n   */\n  get separateAnnots() {\n    const { separateAnnots } = this.#internalRenderTask.operatorList;\n    if (!separateAnnots) {\n      return false;\n    }\n    const { annotationCanvasMap } = this.#internalRenderTask;\n    return (\n      separateAnnots.form ||\n      (separateAnnots.canvas && annotationCanvasMap?.size > 0)\n    );\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass InternalRenderTask {\n  static #canvasInUse = new WeakSet();\n\n  constructor({\n    callback,\n    params,\n    objs,\n    commonObjs,\n    annotationCanvasMap,\n    operatorList,\n    pageIndex,\n    canvasFactory,\n    filterFactory,\n    useRequestAnimationFrame = false,\n    pdfBug = false,\n    pageColors = null,\n  }) {\n    this.callback = callback;\n    this.params = params;\n    this.objs = objs;\n    this.commonObjs = commonObjs;\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.operatorListIdx = null;\n    this.operatorList = operatorList;\n    this._pageIndex = pageIndex;\n    this.canvasFactory = canvasFactory;\n    this.filterFactory = filterFactory;\n    this._pdfBug = pdfBug;\n    this.pageColors = pageColors;\n\n    this.running = false;\n    this.graphicsReadyCallback = null;\n    this.graphicsReady = false;\n    this._useRequestAnimationFrame =\n      useRequestAnimationFrame === true && typeof window !== \"undefined\";\n    this.cancelled = false;\n    this.capability = new PromiseCapability();\n    this.task = new RenderTask(this);\n    // caching this-bound methods\n    this._cancelBound = this.cancel.bind(this);\n    this._continueBound = this._continue.bind(this);\n    this._scheduleNextBound = this._scheduleNext.bind(this);\n    this._nextBound = this._next.bind(this);\n    this._canvas = params.canvasContext.canvas;\n  }\n\n  get completed() {\n    return this.capability.promise.catch(function () {\n      // Ignoring errors, since we only want to know when rendering is\n      // no longer pending.\n    });\n  }\n\n  initializeGraphics({ transparency = false, optionalContentConfig }) {\n    if (this.cancelled) {\n      return;\n    }\n    if (this._canvas) {\n      if (InternalRenderTask.#canvasInUse.has(this._canvas)) {\n        throw new Error(\n          \"Cannot use the same canvas during multiple render() operations. \" +\n            \"Use different canvas or ensure previous operations were \" +\n            \"cancelled or completed.\"\n        );\n      }\n      InternalRenderTask.#canvasInUse.add(this._canvas);\n    }\n\n    if (this._pdfBug && globalThis.StepperManager?.enabled) {\n      this.stepper = globalThis.StepperManager.create(this._pageIndex);\n      this.stepper.init(this.operatorList);\n      this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n    }\n    const { canvasContext, viewport, transform, background } = this.params;\n\n    this.gfx = new CanvasGraphics(\n      canvasContext,\n      this.commonObjs,\n      this.objs,\n      this.canvasFactory,\n      this.filterFactory,\n      { optionalContentConfig },\n      this.annotationCanvasMap,\n      this.pageColors\n    );\n    this.gfx.beginDrawing({\n      transform,\n      viewport,\n      transparency,\n      background,\n    });\n    this.operatorListIdx = 0;\n    this.graphicsReady = true;\n    this.graphicsReadyCallback?.();\n  }\n\n  cancel(error = null, extraDelay = 0) {\n    this.running = false;\n    this.cancelled = true;\n    this.gfx?.endDrawing();\n\n    if (this._canvas) {\n      InternalRenderTask.#canvasInUse.delete(this._canvas);\n    }\n    this.callback(\n      error ||\n        new RenderingCancelledException(\n          `Rendering cancelled, page ${this._pageIndex + 1}`,\n          \"canvas\",\n          extraDelay\n        )\n    );\n  }\n\n  operatorListChanged() {\n    if (!this.graphicsReady) {\n      this.graphicsReadyCallback ||= this._continueBound;\n      return;\n    }\n    this.stepper?.updateOperatorList(this.operatorList);\n\n    if (this.running) {\n      return;\n    }\n    this._continue();\n  }\n\n  _continue() {\n    this.running = true;\n    if (this.cancelled) {\n      return;\n    }\n    if (this.task.onContinue) {\n      this.task.onContinue(this._scheduleNextBound);\n    } else {\n      this._scheduleNext();\n    }\n  }\n\n  _scheduleNext() {\n    if (this._useRequestAnimationFrame) {\n      window.requestAnimationFrame(() => {\n        this._nextBound().catch(this._cancelBound);\n      });\n    } else {\n      Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n    }\n  }\n\n  async _next() {\n    if (this.cancelled) {\n      return;\n    }\n    this.operatorListIdx = this.gfx.executeOperatorList(\n      this.operatorList,\n      this.operatorListIdx,\n      this._continueBound,\n      this.stepper\n    );\n    if (this.operatorListIdx === this.operatorList.argsArray.length) {\n      this.running = false;\n      if (this.operatorList.lastChunk) {\n        this.gfx.endDrawing(this.pageColors);\n        if (this._canvas) {\n          InternalRenderTask.#canvasInUse.delete(this._canvas);\n        }\n        this.callback();\n      }\n    }\n  }\n}\n\n/** @type {string} */\nconst version =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : null;\n/** @type {string} */\nconst build =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : null;\n\nexport {\n  build,\n  DefaultCanvasFactory,\n  DefaultCMapReaderFactory,\n  DefaultFilterFactory,\n  DefaultStandardFontDataFactory,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFDocumentLoadingTask,\n  PDFDocumentProxy,\n  PDFPageProxy,\n  PDFWorker,\n  PDFWorkerUtil,\n  RenderTask,\n  version,\n};\n", "/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap, unreachable } from \"../shared/util.js\";\nimport { AnnotationEditor } from \"./editor/editor.js\";\nimport { MurmurHash3_64 } from \"../shared/murmurhash3.js\";\n\n/**\n * Key/value storage for annotation data in forms.\n */\nclass AnnotationStorage {\n  #modified = false;\n\n  #storage = new Map();\n\n  constructor() {\n    // Callbacks to signal when the modification state is set or reset.\n    // This is used by the viewer to only bind on `beforeunload` if forms\n    // are actually edited to prevent doing so unconditionally since that\n    // can have undesirable effects.\n    this.onSetModified = null;\n    this.onResetModified = null;\n    this.onAnnotationEditor = null;\n  }\n\n  /**\n   * Get the value for a given key if it exists, or return the default value.\n   * @param {string} key\n   * @param {Object} defaultValue\n   * @returns {Object}\n   */\n  getValue(key, defaultValue) {\n    const value = this.#storage.get(key);\n    if (value === undefined) {\n      return defaultValue;\n    }\n\n    return Object.assign(defaultValue, value);\n  }\n\n  /**\n   * Get the value for a given key.\n   * @param {string} key\n   * @returns {Object}\n   */\n  getRawValue(key) {\n    return this.#storage.get(key);\n  }\n\n  /**\n   * Remove a value from the storage.\n   * @param {string} key\n   */\n  remove(key) {\n    this.#storage.delete(key);\n\n    if (this.#storage.size === 0) {\n      this.resetModified();\n    }\n\n    if (typeof this.onAnnotationEditor === \"function\") {\n      for (const value of this.#storage.values()) {\n        if (value instanceof AnnotationEditor) {\n          return;\n        }\n      }\n      this.onAnnotationEditor(null);\n    }\n  }\n\n  /**\n   * Set the value for a given key\n   * @param {string} key\n   * @param {Object} value\n   */\n  setValue(key, value) {\n    const obj = this.#storage.get(key);\n    let modified = false;\n    if (obj !== undefined) {\n      for (const [entry, val] of Object.entries(value)) {\n        if (obj[entry] !== val) {\n          modified = true;\n          obj[entry] = val;\n        }\n      }\n    } else {\n      modified = true;\n      this.#storage.set(key, value);\n    }\n    if (modified) {\n      this.#setModified();\n    }\n\n    if (\n      value instanceof AnnotationEditor &&\n      typeof this.onAnnotationEditor === \"function\"\n    ) {\n      this.onAnnotationEditor(value.constructor._type);\n    }\n  }\n\n  /**\n   * Check if the storage contains the given key.\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has(key) {\n    return this.#storage.has(key);\n  }\n\n  /**\n   * @returns {Object | null}\n   */\n  getAll() {\n    return this.#storage.size > 0 ? objectFromMap(this.#storage) : null;\n  }\n\n  /**\n   * @param {Object} obj\n   */\n  setAll(obj) {\n    for (const [key, val] of Object.entries(obj)) {\n      this.setValue(key, val);\n    }\n  }\n\n  get size() {\n    return this.#storage.size;\n  }\n\n  #setModified() {\n    if (!this.#modified) {\n      this.#modified = true;\n      if (typeof this.onSetModified === \"function\") {\n        this.onSetModified();\n      }\n    }\n  }\n\n  resetModified() {\n    if (this.#modified) {\n      this.#modified = false;\n      if (typeof this.onResetModified === \"function\") {\n        this.onResetModified();\n      }\n    }\n  }\n\n  /**\n   * @returns {PrintAnnotationStorage}\n   */\n  get print() {\n    return new PrintAnnotationStorage(this);\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    if (this.#storage.size === 0) {\n      return null;\n    }\n    const clone = new Map();\n\n    for (const [key, val] of this.#storage) {\n      const serialized =\n        val instanceof AnnotationEditor ? val.serialize() : val;\n      if (serialized) {\n        clone.set(key, serialized);\n      }\n    }\n    return clone;\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  static getHash(map) {\n    if (!map) {\n      return \"\";\n    }\n    const hash = new MurmurHash3_64();\n\n    for (const [key, val] of map) {\n      hash.update(`${key}:${JSON.stringify(val)}`);\n    }\n    return hash.hexdigest();\n  }\n}\n\n/**\n * A special `AnnotationStorage` for use during printing, where the serializable\n * data is *frozen* upon initialization, to prevent scripting from modifying its\n * contents. (Necessary since printing is triggered synchronously in browsers.)\n */\nclass PrintAnnotationStorage extends AnnotationStorage {\n  #serializable = null;\n\n  constructor(parent) {\n    super();\n    // Create a *copy* of the data, since Objects are passed by reference in JS.\n    this.#serializable = structuredClone(parent.serializable);\n  }\n\n  /**\n   * @returns {PrintAnnotationStorage}\n   */\n  // eslint-disable-next-line getter-return\n  get print() {\n    unreachable(\"Should not call PrintAnnotationStorage.print\");\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    return this.#serializable;\n  }\n}\n\nexport { AnnotationStorage, PrintAnnotationStorage };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./annotation_editor_layer.js\").AnnotationEditorLayer} AnnotationEditorLayer */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./tools.js\").AnnotationEditorUIManager} AnnotationEditorUIManager */\n\nimport { bindEvents, ColorManager } from \"./tools.js\";\nimport { FeatureTest, shadow, unreachable } from \"../../shared/util.js\";\n\n/**\n * @typedef {Object} AnnotationEditorParameters\n * @property {AnnotationEditorUIManager} uiManager - the global manager\n * @property {AnnotationEditorLayer} parent - the layer containing this editor\n * @property {string} id - editor id\n * @property {number} x - x-coordinate\n * @property {number} y - y-coordinate\n */\n\n/**\n * Base class for editors.\n */\nclass AnnotationEditor {\n  #boundFocusin = this.focusin.bind(this);\n\n  #boundFocusout = this.focusout.bind(this);\n\n  #hasBeenSelected = false;\n\n  #isEditing = false;\n\n  #isInEditMode = false;\n\n  _uiManager = null;\n\n  #zIndex = AnnotationEditor._zIndex++;\n\n  static _colorManager = new ColorManager();\n\n  static _zIndex = 1;\n\n  /**\n   * @param {AnnotationEditorParameters} parameters\n   */\n  constructor(parameters) {\n    if (this.constructor === AnnotationEditor) {\n      unreachable(\"Cannot initialize AnnotationEditor.\");\n    }\n\n    this.parent = parameters.parent;\n    this.id = parameters.id;\n    this.width = this.height = null;\n    this.pageIndex = parameters.parent.pageIndex;\n    this.name = parameters.name;\n    this.div = null;\n    this._uiManager = parameters.uiManager;\n\n    const {\n      rotation,\n      rawDims: { pageWidth, pageHeight, pageX, pageY },\n    } = this.parent.viewport;\n\n    this.rotation = rotation;\n    this.pageRotation =\n      (360 + rotation - this._uiManager.viewParameters.rotation) % 360;\n    this.pageDimensions = [pageWidth, pageHeight];\n    this.pageTranslation = [pageX, pageY];\n\n    const [width, height] = this.parentDimensions;\n    this.x = parameters.x / width;\n    this.y = parameters.y / height;\n\n    this.isAttachedToDOM = false;\n  }\n\n  static get _defaultLineColor() {\n    return shadow(\n      this,\n      \"_defaultLineColor\",\n      this._colorManager.getHexCode(\"CanvasText\")\n    );\n  }\n\n  /**\n   * Add some commands into the CommandManager (undo/redo stuff).\n   * @param {Object} params\n   */\n  addCommands(params) {\n    this._uiManager.addCommands(params);\n  }\n\n  get currentLayer() {\n    return this._uiManager.currentLayer;\n  }\n\n  /**\n   * This editor will be behind the others.\n   */\n  setInBackground() {\n    this.div.style.zIndex = 0;\n  }\n\n  /**\n   * This editor will be in the foreground.\n   */\n  setInForeground() {\n    this.div.style.zIndex = this.#zIndex;\n  }\n\n  setParent(parent) {\n    if (parent !== null) {\n      this.pageIndex = parent.pageIndex;\n      this.pageDimensions = parent.pageDimensions;\n    }\n    this.parent = parent;\n  }\n\n  /**\n   * onfocus callback.\n   */\n  focusin(event) {\n    if (!this.#hasBeenSelected) {\n      this.parent.setSelected(this);\n    } else {\n      this.#hasBeenSelected = false;\n    }\n  }\n\n  /**\n   * onblur callback.\n   * @param {FocusEvent} event\n   */\n  focusout(event) {\n    if (!this.isAttachedToDOM) {\n      return;\n    }\n\n    // In case of focusout, the relatedTarget is the element which\n    // is grabbing the focus.\n    // So if the related target is an element under the div for this\n    // editor, then the editor isn't unactive.\n    const target = event.relatedTarget;\n    if (target?.closest(`#${this.id}`)) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (!this.parent?.isMultipleSelection) {\n      this.commitOrRemove();\n    }\n  }\n\n  commitOrRemove() {\n    if (this.isEmpty()) {\n      this.remove();\n    } else {\n      this.commit();\n    }\n  }\n\n  /**\n   * Commit the data contained in this editor.\n   */\n  commit() {\n    this.addToAnnotationStorage();\n  }\n\n  addToAnnotationStorage() {\n    this._uiManager.addToAnnotationStorage(this);\n  }\n\n  /**\n   * We use drag-and-drop in order to move an editor on a page.\n   * @param {DragEvent} event\n   */\n  dragstart(event) {\n    const rect = this.parent.div.getBoundingClientRect();\n    this.startX = event.clientX - rect.x;\n    this.startY = event.clientY - rect.y;\n    event.dataTransfer.setData(\"text/plain\", this.id);\n    event.dataTransfer.effectAllowed = \"move\";\n  }\n\n  /**\n   * Set the editor position within its parent.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} tx - x-translation in screen coordinates.\n   * @param {number} ty - y-translation in screen coordinates.\n   */\n  setAt(x, y, tx, ty) {\n    const [width, height] = this.parentDimensions;\n    [tx, ty] = this.screenToPageTranslation(tx, ty);\n\n    this.x = (x + tx) / width;\n    this.y = (y + ty) / height;\n\n    this.div.style.left = `${100 * this.x}%`;\n    this.div.style.top = `${100 * this.y}%`;\n  }\n\n  /**\n   * Translate the editor position within its parent.\n   * @param {number} x - x-translation in screen coordinates.\n   * @param {number} y - y-translation in screen coordinates.\n   */\n  translate(x, y) {\n    const [width, height] = this.parentDimensions;\n    [x, y] = this.screenToPageTranslation(x, y);\n\n    this.x += x / width;\n    this.y += y / height;\n\n    this.div.style.left = `${100 * this.x}%`;\n    this.div.style.top = `${100 * this.y}%`;\n  }\n\n  /**\n   * Convert a screen translation into a page one.\n   * @param {number} x\n   * @param {number} y\n   */\n  screenToPageTranslation(x, y) {\n    switch (this.parentRotation) {\n      case 90:\n        return [y, -x];\n      case 180:\n        return [-x, -y];\n      case 270:\n        return [-y, x];\n      default:\n        return [x, y];\n    }\n  }\n\n  get parentScale() {\n    return this._uiManager.viewParameters.realScale;\n  }\n\n  get parentRotation() {\n    return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;\n  }\n\n  get parentDimensions() {\n    const { realScale } = this._uiManager.viewParameters;\n    const [pageWidth, pageHeight] = this.pageDimensions;\n    return [pageWidth * realScale, pageHeight * realScale];\n  }\n\n  /**\n   * Set the dimensions of this editor.\n   * @param {number} width\n   * @param {number} height\n   */\n  setDims(width, height) {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.div.style.width = `${(100 * width) / parentWidth}%`;\n    this.div.style.height = `${(100 * height) / parentHeight}%`;\n  }\n\n  fixDims() {\n    const { style } = this.div;\n    const { height, width } = style;\n    const widthPercent = width.endsWith(\"%\");\n    const heightPercent = height.endsWith(\"%\");\n    if (widthPercent && heightPercent) {\n      return;\n    }\n\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    if (!widthPercent) {\n      style.width = `${(100 * parseFloat(width)) / parentWidth}%`;\n    }\n    if (!heightPercent) {\n      style.height = `${(100 * parseFloat(height)) / parentHeight}%`;\n    }\n  }\n\n  /**\n   * Get the translation used to position this editor when it's created.\n   * @returns {Array<number>}\n   */\n  getInitialTranslation() {\n    return [0, 0];\n  }\n\n  /**\n   * Render this editor in a div.\n   * @returns {HTMLDivElement}\n   */\n  render() {\n    this.div = document.createElement(\"div\");\n    this.div.setAttribute(\"data-editor-rotation\", (360 - this.rotation) % 360);\n    this.div.className = this.name;\n    this.div.setAttribute(\"id\", this.id);\n    this.div.setAttribute(\"tabIndex\", 0);\n\n    this.setInForeground();\n\n    this.div.addEventListener(\"focusin\", this.#boundFocusin);\n    this.div.addEventListener(\"focusout\", this.#boundFocusout);\n\n    const [tx, ty] = this.getInitialTranslation();\n    this.translate(tx, ty);\n\n    bindEvents(this, this.div, [\"dragstart\", \"pointerdown\"]);\n\n    return this.div;\n  }\n\n  /**\n   * Onpointerdown callback.\n   * @param {PointerEvent} event\n   */\n  pointerdown(event) {\n    const { isMac } = FeatureTest.platform;\n    if (event.button !== 0 || (event.ctrlKey && isMac)) {\n      // Avoid to focus this editor because of a non-left click.\n      event.preventDefault();\n      return;\n    }\n\n    if (\n      (event.ctrlKey && !isMac) ||\n      event.shiftKey ||\n      (event.metaKey && isMac)\n    ) {\n      this.parent.toggleSelected(this);\n    } else {\n      this.parent.setSelected(this);\n    }\n\n    this.#hasBeenSelected = true;\n  }\n\n  getRect(tx, ty) {\n    const scale = this.parentScale;\n    const [pageWidth, pageHeight] = this.pageDimensions;\n    const [pageX, pageY] = this.pageTranslation;\n    const shiftX = tx / scale;\n    const shiftY = ty / scale;\n    const x = this.x * pageWidth;\n    const y = this.y * pageHeight;\n    const width = this.width * pageWidth;\n    const height = this.height * pageHeight;\n\n    switch (this.rotation) {\n      case 0:\n        return [\n          x + shiftX + pageX,\n          pageHeight - y - shiftY - height + pageY,\n          x + shiftX + width + pageX,\n          pageHeight - y - shiftY + pageY,\n        ];\n      case 90:\n        return [\n          x + shiftY + pageX,\n          pageHeight - y + shiftX + pageY,\n          x + shiftY + height + pageX,\n          pageHeight - y + shiftX + width + pageY,\n        ];\n      case 180:\n        return [\n          x - shiftX - width + pageX,\n          pageHeight - y + shiftY + pageY,\n          x - shiftX + pageX,\n          pageHeight - y + shiftY + height + pageY,\n        ];\n      case 270:\n        return [\n          x - shiftY - height + pageX,\n          pageHeight - y - shiftX - width + pageY,\n          x - shiftY + pageX,\n          pageHeight - y - shiftX + pageY,\n        ];\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n  }\n\n  getRectInCurrentCoords(rect, pageHeight) {\n    const [x1, y1, x2, y2] = rect;\n\n    const width = x2 - x1;\n    const height = y2 - y1;\n\n    switch (this.rotation) {\n      case 0:\n        return [x1, pageHeight - y2, width, height];\n      case 90:\n        return [x1, pageHeight - y1, height, width];\n      case 180:\n        return [x2, pageHeight - y1, width, height];\n      case 270:\n        return [x2, pageHeight - y2, height, width];\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n  }\n\n  /**\n   * Executed once this editor has been rendered.\n   */\n  onceAdded() {}\n\n  /**\n   * Check if the editor contains something.\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return false;\n  }\n\n  /**\n   * Enable edit mode.\n   */\n  enableEditMode() {\n    this.#isInEditMode = true;\n  }\n\n  /**\n   * Disable edit mode.\n   */\n  disableEditMode() {\n    this.#isInEditMode = false;\n  }\n\n  /**\n   * Check if the editor is edited.\n   * @returns {boolean}\n   */\n  isInEditMode() {\n    return this.#isInEditMode;\n  }\n\n  /**\n   * If it returns true, then this editor handle the keyboard\n   * events itself.\n   * @returns {boolean}\n   */\n  shouldGetKeyboardEvents() {\n    return false;\n  }\n\n  /**\n   * Check if this editor needs to be rebuilt or not.\n   * @returns {boolean}\n   */\n  needsToBeRebuilt() {\n    return this.div && !this.isAttachedToDOM;\n  }\n\n  /**\n   * Rebuild the editor in case it has been removed on undo.\n   *\n   * To implement in subclasses.\n   */\n  rebuild() {\n    this.div?.addEventListener(\"focusin\", this.#boundFocusin);\n  }\n\n  /**\n   * Serialize the editor.\n   * The result of the serialization will be used to construct a\n   * new annotation to add to the pdf document.\n   *\n   * To implement in subclasses.\n   */\n  serialize() {\n    unreachable(\"An editor must be serializable\");\n  }\n\n  /**\n   * Deserialize the editor.\n   * The result of the deserialization is a new editor.\n   *\n   * @param {Object} data\n   * @param {AnnotationEditorLayer} parent\n   * @param {AnnotationEditorUIManager} uiManager\n   * @returns {AnnotationEditor}\n   */\n  static deserialize(data, parent, uiManager) {\n    const editor = new this.prototype.constructor({\n      parent,\n      id: parent.getNextId(),\n      uiManager,\n    });\n    editor.rotation = data.rotation;\n\n    const [pageWidth, pageHeight] = editor.pageDimensions;\n    const [x, y, width, height] = editor.getRectInCurrentCoords(\n      data.rect,\n      pageHeight\n    );\n    editor.x = x / pageWidth;\n    editor.y = y / pageHeight;\n    editor.width = width / pageWidth;\n    editor.height = height / pageHeight;\n\n    return editor;\n  }\n\n  /**\n   * Remove this editor.\n   * It's used on ctrl+backspace action.\n   */\n  remove() {\n    this.div.removeEventListener(\"focusin\", this.#boundFocusin);\n    this.div.removeEventListener(\"focusout\", this.#boundFocusout);\n\n    if (!this.isEmpty()) {\n      // The editor is removed but it can be back at some point thanks to\n      // undo/redo so we must commit it before.\n      this.commit();\n    }\n    this.parent.remove(this);\n  }\n\n  /**\n   * Select this editor.\n   */\n  select() {\n    this.div?.classList.add(\"selectedEditor\");\n  }\n\n  /**\n   * Unselect this editor.\n   */\n  unselect() {\n    this.div?.classList.remove(\"selectedEditor\");\n  }\n\n  /**\n   * Update some parameters which have been changed through the UI.\n   * @param {number} type\n   * @param {*} value\n   */\n  updateParams(type, value) {}\n\n  /**\n   * When the user disables the editing mode some editors can change some of\n   * their properties.\n   */\n  disableEditing() {}\n\n  /**\n   * When the user enables the editing mode some editors can change some of\n   * their properties.\n   */\n  enableEditing() {}\n\n  /**\n   * Get some properties to update in the UI.\n   * @returns {Object}\n   */\n  get propertiesToUpdate() {\n    return {};\n  }\n\n  /**\n   * Get the div which really contains the displayed content.\n   */\n  get contentDiv() {\n    return this.div;\n  }\n\n  /**\n   * If true then the editor is currently edited.\n   * @type {boolean}\n   */\n  get isEditing() {\n    return this.#isEditing;\n  }\n\n  /**\n   * When set to true, it means that this editor is currently edited.\n   * @param {boolean} value\n   */\n  set isEditing(value) {\n    this.#isEditing = value;\n    if (value) {\n      this.parent.setSelected(this);\n      this.parent.setActiveEditor(this);\n    } else {\n      this.parent.setActiveEditor(null);\n    }\n  }\n}\n\nexport { AnnotationEditor };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./editor.js\").AnnotationEditor} AnnotationEditor */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./annotation_editor_layer.js\").AnnotationEditorLayer} AnnotationEditorLayer */\n\nimport {\n  AnnotationEditorPrefix,\n  AnnotationEditorType,\n  FeatureTest,\n  shadow,\n  Util,\n  warn,\n} from \"../../shared/util.js\";\nimport { getColorValues, getRGB, PixelsPerInch } from \"../display_utils.js\";\n\nfunction bindEvents(obj, element, names) {\n  for (const name of names) {\n    element.addEventListener(name, obj[name].bind(obj));\n  }\n}\n\n/**\n * Convert a number between 0 and 100 into an hex number between 0 and 255.\n * @param {number} opacity\n * @return {string}\n */\nfunction opacityToHex(opacity) {\n  return Math.round(Math.min(255, Math.max(1, 255 * opacity)))\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\n/**\n * Class to create some unique ids for the different editors.\n */\nclass IdManager {\n  #id = 0;\n\n  /**\n   * Get a unique id.\n   * @returns {string}\n   */\n  getId() {\n    return `${AnnotationEditorPrefix}${this.#id++}`;\n  }\n}\n\n/**\n * Class to handle undo/redo.\n * Commands are just saved in a buffer.\n * If we hit some memory issues we could likely use a circular buffer.\n * It has to be used as a singleton.\n */\nclass CommandManager {\n  #commands = [];\n\n  #locked = false;\n\n  #maxSize;\n\n  #position = -1;\n\n  constructor(maxSize = 128) {\n    this.#maxSize = maxSize;\n  }\n\n  /**\n   * @typedef {Object} addOptions\n   * @property {function} cmd\n   * @property {function} undo\n   * @property {boolean} mustExec\n   * @property {number} type\n   * @property {boolean} overwriteIfSameType\n   * @property {boolean} keepUndo\n   */\n\n  /**\n   * Add a new couple of commands to be used in case of redo/undo.\n   * @param {addOptions} options\n   */\n  add({\n    cmd,\n    undo,\n    mustExec,\n    type = NaN,\n    overwriteIfSameType = false,\n    keepUndo = false,\n  }) {\n    if (mustExec) {\n      cmd();\n    }\n\n    if (this.#locked) {\n      return;\n    }\n\n    const save = { cmd, undo, type };\n    if (this.#position === -1) {\n      if (this.#commands.length > 0) {\n        // All the commands have been undone and then a new one is added\n        // hence we clear the queue.\n        this.#commands.length = 0;\n      }\n      this.#position = 0;\n      this.#commands.push(save);\n      return;\n    }\n\n    if (overwriteIfSameType && this.#commands[this.#position].type === type) {\n      // For example when we change a color we don't want to\n      // be able to undo all the steps, hence we only want to\n      // keep the last undoable action in this sequence of actions.\n      if (keepUndo) {\n        save.undo = this.#commands[this.#position].undo;\n      }\n      this.#commands[this.#position] = save;\n      return;\n    }\n\n    const next = this.#position + 1;\n    if (next === this.#maxSize) {\n      this.#commands.splice(0, 1);\n    } else {\n      this.#position = next;\n      if (next < this.#commands.length) {\n        this.#commands.splice(next);\n      }\n    }\n\n    this.#commands.push(save);\n  }\n\n  /**\n   * Undo the last command.\n   */\n  undo() {\n    if (this.#position === -1) {\n      // Nothing to undo.\n      return;\n    }\n\n    // Avoid to insert something during the undo execution.\n    this.#locked = true;\n    this.#commands[this.#position].undo();\n    this.#locked = false;\n\n    this.#position -= 1;\n  }\n\n  /**\n   * Redo the last command.\n   */\n  redo() {\n    if (this.#position < this.#commands.length - 1) {\n      this.#position += 1;\n\n      // Avoid to insert something during the redo execution.\n      this.#locked = true;\n      this.#commands[this.#position].cmd();\n      this.#locked = false;\n    }\n  }\n\n  /**\n   * Check if there is something to undo.\n   * @returns {boolean}\n   */\n  hasSomethingToUndo() {\n    return this.#position !== -1;\n  }\n\n  /**\n   * Check if there is something to redo.\n   * @returns {boolean}\n   */\n  hasSomethingToRedo() {\n    return this.#position < this.#commands.length - 1;\n  }\n\n  destroy() {\n    this.#commands = null;\n  }\n}\n\n/**\n * Class to handle the different keyboards shortcuts we can have on mac or\n * non-mac OSes.\n */\nclass KeyboardManager {\n  /**\n   * Create a new keyboard manager class.\n   * @param {Array<Array>} callbacks - an array containing an array of shortcuts\n   * and a callback to call.\n   * A shortcut is a string like `ctrl+c` or `mac+ctrl+c` for mac OS.\n   */\n  constructor(callbacks) {\n    this.buffer = [];\n    this.callbacks = new Map();\n    this.allKeys = new Set();\n\n    const { isMac } = FeatureTest.platform;\n    for (const [keys, callback] of callbacks) {\n      for (const key of keys) {\n        const isMacKey = key.startsWith(\"mac+\");\n        if (isMac && isMacKey) {\n          this.callbacks.set(key.slice(4), callback);\n          this.allKeys.add(key.split(\"+\").at(-1));\n        } else if (!isMac && !isMacKey) {\n          this.callbacks.set(key, callback);\n          this.allKeys.add(key.split(\"+\").at(-1));\n        }\n      }\n    }\n  }\n\n  /**\n   * Serialize an event into a string in order to match a\n   * potential key for a callback.\n   * @param {KeyboardEvent} event\n   * @returns {string}\n   */\n  #serialize(event) {\n    if (event.altKey) {\n      this.buffer.push(\"alt\");\n    }\n    if (event.ctrlKey) {\n      this.buffer.push(\"ctrl\");\n    }\n    if (event.metaKey) {\n      this.buffer.push(\"meta\");\n    }\n    if (event.shiftKey) {\n      this.buffer.push(\"shift\");\n    }\n    this.buffer.push(event.key);\n    const str = this.buffer.join(\"+\");\n    this.buffer.length = 0;\n\n    return str;\n  }\n\n  /**\n   * Execute a callback, if any, for a given keyboard event.\n   * The self is used as `this` in the callback.\n   * @param {Object} self.\n   * @param {KeyboardEvent} event\n   * @returns\n   */\n  exec(self, event) {\n    if (!this.allKeys.has(event.key)) {\n      return;\n    }\n    const callback = this.callbacks.get(this.#serialize(event));\n    if (!callback) {\n      return;\n    }\n    callback.bind(self)();\n    event.stopPropagation();\n    event.preventDefault();\n  }\n}\n\nclass ColorManager {\n  static _colorsMapping = new Map([\n    [\"CanvasText\", [0, 0, 0]],\n    [\"Canvas\", [255, 255, 255]],\n  ]);\n\n  get _colors() {\n    if (\n      typeof PDFJSDev !== \"undefined\" &&\n      PDFJSDev.test(\"LIB\") &&\n      typeof document === \"undefined\"\n    ) {\n      return shadow(this, \"_colors\", ColorManager._colorsMapping);\n    }\n\n    const colors = new Map([\n      [\"CanvasText\", null],\n      [\"Canvas\", null],\n    ]);\n    getColorValues(colors);\n    return shadow(this, \"_colors\", colors);\n  }\n\n  /**\n   * In High Contrast Mode, the color on the screen is not always the\n   * real color used in the pdf.\n   * For example in some cases white can appear to be black but when saving\n   * we want to have white.\n   * @param {string} color\n   * @returns {Array<number>}\n   */\n  convert(color) {\n    const rgb = getRGB(color);\n    if (!window.matchMedia(\"(forced-colors: active)\").matches) {\n      return rgb;\n    }\n\n    for (const [name, RGB] of this._colors) {\n      if (RGB.every((x, i) => x === rgb[i])) {\n        return ColorManager._colorsMapping.get(name);\n      }\n    }\n    return rgb;\n  }\n\n  /**\n   * An input element must have its color value as a hex string\n   * and not as color name.\n   * So this function converts a name into an hex string.\n   * @param {string} name\n   * @returns {string}\n   */\n  getHexCode(name) {\n    const rgb = this._colors.get(name);\n    if (!rgb) {\n      return name;\n    }\n    return Util.makeHexColor(...rgb);\n  }\n}\n\n/**\n * A pdf has several pages and each of them when it will rendered\n * will have an AnnotationEditorLayer which will contain the some\n * new Annotations associated to an editor in order to modify them.\n *\n * This class is used to manage all the different layers, editors and\n * some action like copy/paste, undo/redo, ...\n */\nclass AnnotationEditorUIManager {\n  #activeEditor = null;\n\n  #allEditors = new Map();\n\n  #allLayers = new Map();\n\n  #annotationStorage = null;\n\n  #commandManager = new CommandManager();\n\n  #currentPageIndex = 0;\n\n  #editorTypes = null;\n\n  #editorsToRescale = new Set();\n\n  #eventBus = null;\n\n  #idManager = new IdManager();\n\n  #isEnabled = false;\n\n  #mode = AnnotationEditorType.NONE;\n\n  #selectedEditors = new Set();\n\n  #boundCopy = this.copy.bind(this);\n\n  #boundCut = this.cut.bind(this);\n\n  #boundPaste = this.paste.bind(this);\n\n  #boundKeydown = this.keydown.bind(this);\n\n  #boundOnEditingAction = this.onEditingAction.bind(this);\n\n  #boundOnPageChanging = this.onPageChanging.bind(this);\n\n  #boundOnScaleChanging = this.onScaleChanging.bind(this);\n\n  #boundOnRotationChanging = this.onRotationChanging.bind(this);\n\n  #previousStates = {\n    isEditing: false,\n    isEmpty: true,\n    hasSomethingToUndo: false,\n    hasSomethingToRedo: false,\n    hasSelectedEditor: false,\n  };\n\n  #container = null;\n\n  static _keyboardManager = new KeyboardManager([\n    [[\"ctrl+a\", \"mac+meta+a\"], AnnotationEditorUIManager.prototype.selectAll],\n    [[\"ctrl+z\", \"mac+meta+z\"], AnnotationEditorUIManager.prototype.undo],\n    [\n      [\"ctrl+y\", \"ctrl+shift+Z\", \"mac+meta+shift+Z\"],\n      AnnotationEditorUIManager.prototype.redo,\n    ],\n    [\n      [\n        \"Backspace\",\n        \"alt+Backspace\",\n        \"ctrl+Backspace\",\n        \"shift+Backspace\",\n        \"mac+Backspace\",\n        \"mac+alt+Backspace\",\n        \"mac+ctrl+Backspace\",\n        \"Delete\",\n        \"ctrl+Delete\",\n        \"shift+Delete\",\n      ],\n      AnnotationEditorUIManager.prototype.delete,\n    ],\n    [[\"Escape\", \"mac+Escape\"], AnnotationEditorUIManager.prototype.unselectAll],\n  ]);\n\n  constructor(container, eventBus, annotationStorage) {\n    this.#container = container;\n    this.#eventBus = eventBus;\n    this.#eventBus._on(\"editingaction\", this.#boundOnEditingAction);\n    this.#eventBus._on(\"pagechanging\", this.#boundOnPageChanging);\n    this.#eventBus._on(\"scalechanging\", this.#boundOnScaleChanging);\n    this.#eventBus._on(\"rotationchanging\", this.#boundOnRotationChanging);\n    this.#annotationStorage = annotationStorage;\n    this.viewParameters = {\n      realScale: PixelsPerInch.PDF_TO_CSS_UNITS,\n      rotation: 0,\n    };\n  }\n\n  destroy() {\n    this.#removeKeyboardManager();\n    this.#eventBus._off(\"editingaction\", this.#boundOnEditingAction);\n    this.#eventBus._off(\"pagechanging\", this.#boundOnPageChanging);\n    this.#eventBus._off(\"scalechanging\", this.#boundOnScaleChanging);\n    this.#eventBus._off(\"rotationchanging\", this.#boundOnRotationChanging);\n    for (const layer of this.#allLayers.values()) {\n      layer.destroy();\n    }\n    this.#allLayers.clear();\n    this.#allEditors.clear();\n    this.#editorsToRescale.clear();\n    this.#activeEditor = null;\n    this.#selectedEditors.clear();\n    this.#commandManager.destroy();\n  }\n\n  onPageChanging({ pageNumber }) {\n    this.#currentPageIndex = pageNumber - 1;\n  }\n\n  focusMainContainer() {\n    this.#container.focus();\n  }\n\n  addShouldRescale(editor) {\n    this.#editorsToRescale.add(editor);\n  }\n\n  removeShouldRescale(editor) {\n    this.#editorsToRescale.delete(editor);\n  }\n\n  onScaleChanging({ scale }) {\n    this.commitOrRemove();\n    this.viewParameters.realScale = scale * PixelsPerInch.PDF_TO_CSS_UNITS;\n    for (const editor of this.#editorsToRescale) {\n      editor.onScaleChanging();\n    }\n  }\n\n  onRotationChanging({ pagesRotation }) {\n    this.commitOrRemove();\n    this.viewParameters.rotation = pagesRotation;\n  }\n\n  /**\n   * Add an editor in the annotation storage.\n   * @param {AnnotationEditor} editor\n   */\n  addToAnnotationStorage(editor) {\n    if (\n      !editor.isEmpty() &&\n      this.#annotationStorage &&\n      !this.#annotationStorage.has(editor.id)\n    ) {\n      this.#annotationStorage.setValue(editor.id, editor);\n    }\n  }\n\n  #addKeyboardManager() {\n    // The keyboard events are caught at the container level in order to be able\n    // to execute some callbacks even if the current page doesn't have focus.\n    this.#container.addEventListener(\"keydown\", this.#boundKeydown);\n  }\n\n  #removeKeyboardManager() {\n    this.#container.removeEventListener(\"keydown\", this.#boundKeydown);\n  }\n\n  #addCopyPasteListeners() {\n    document.addEventListener(\"copy\", this.#boundCopy);\n    document.addEventListener(\"cut\", this.#boundCut);\n    document.addEventListener(\"paste\", this.#boundPaste);\n  }\n\n  #removeCopyPasteListeners() {\n    document.removeEventListener(\"copy\", this.#boundCopy);\n    document.removeEventListener(\"cut\", this.#boundCut);\n    document.removeEventListener(\"paste\", this.#boundPaste);\n  }\n\n  /**\n   * Copy callback.\n   * @param {ClipboardEvent} event\n   */\n  copy(event) {\n    event.preventDefault();\n\n    if (this.#activeEditor) {\n      // An editor is being edited so just commit it.\n      this.#activeEditor.commitOrRemove();\n    }\n\n    if (!this.hasSelection) {\n      return;\n    }\n\n    const editors = [];\n    for (const editor of this.#selectedEditors) {\n      if (!editor.isEmpty()) {\n        editors.push(editor.serialize());\n      }\n    }\n    if (editors.length === 0) {\n      return;\n    }\n\n    event.clipboardData.setData(\"application/pdfjs\", JSON.stringify(editors));\n  }\n\n  /**\n   * Cut callback.\n   * @param {ClipboardEvent} event\n   */\n  cut(event) {\n    this.copy(event);\n    this.delete();\n  }\n\n  /**\n   * Paste callback.\n   * @param {ClipboardEvent} event\n   */\n  paste(event) {\n    event.preventDefault();\n\n    let data = event.clipboardData.getData(\"application/pdfjs\");\n    if (!data) {\n      return;\n    }\n\n    try {\n      data = JSON.parse(data);\n    } catch (ex) {\n      warn(`paste: \"${ex.message}\".`);\n      return;\n    }\n\n    if (!Array.isArray(data)) {\n      return;\n    }\n\n    this.unselectAll();\n    const layer = this.#allLayers.get(this.#currentPageIndex);\n\n    try {\n      const newEditors = [];\n      for (const editor of data) {\n        const deserializedEditor = layer.deserialize(editor);\n        if (!deserializedEditor) {\n          return;\n        }\n        newEditors.push(deserializedEditor);\n      }\n\n      const cmd = () => {\n        for (const editor of newEditors) {\n          this.#addEditorToLayer(editor);\n        }\n        this.#selectEditors(newEditors);\n      };\n      const undo = () => {\n        for (const editor of newEditors) {\n          editor.remove();\n        }\n      };\n      this.addCommands({ cmd, undo, mustExec: true });\n    } catch (ex) {\n      warn(`paste: \"${ex.message}\".`);\n    }\n  }\n\n  /**\n   * Keydown callback.\n   * @param {KeyboardEvent} event\n   */\n  keydown(event) {\n    if (!this.getActive()?.shouldGetKeyboardEvents()) {\n      AnnotationEditorUIManager._keyboardManager.exec(this, event);\n    }\n  }\n\n  /**\n   * Execute an action for a given name.\n   * For example, the user can click on the \"Undo\" entry in the context menu\n   * and it'll trigger the undo action.\n   * @param {Object} details\n   */\n  onEditingAction(details) {\n    if ([\"undo\", \"redo\", \"delete\", \"selectAll\"].includes(details.name)) {\n      this[details.name]();\n    }\n  }\n\n  /**\n   * Update the different possible states of this manager, e.g. is there\n   * something to undo, redo, ...\n   * @param {Object} details\n   */\n  #dispatchUpdateStates(details) {\n    const hasChanged = Object.entries(details).some(\n      ([key, value]) => this.#previousStates[key] !== value\n    );\n\n    if (hasChanged) {\n      this.#eventBus.dispatch(\"annotationeditorstateschanged\", {\n        source: this,\n        details: Object.assign(this.#previousStates, details),\n      });\n    }\n  }\n\n  #dispatchUpdateUI(details) {\n    this.#eventBus.dispatch(\"annotationeditorparamschanged\", {\n      source: this,\n      details,\n    });\n  }\n\n  /**\n   * Set the editing state.\n   * It can be useful to temporarily disable it when the user is editing a\n   * FreeText annotation.\n   * @param {boolean} isEditing\n   */\n  setEditingState(isEditing) {\n    if (isEditing) {\n      this.#addKeyboardManager();\n      this.#addCopyPasteListeners();\n      this.#dispatchUpdateStates({\n        isEditing: this.#mode !== AnnotationEditorType.NONE,\n        isEmpty: this.#isEmpty(),\n        hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n        hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n        hasSelectedEditor: false,\n      });\n    } else {\n      this.#removeKeyboardManager();\n      this.#removeCopyPasteListeners();\n      this.#dispatchUpdateStates({\n        isEditing: false,\n      });\n    }\n  }\n\n  registerEditorTypes(types) {\n    if (this.#editorTypes) {\n      return;\n    }\n    this.#editorTypes = types;\n    for (const editorType of this.#editorTypes) {\n      this.#dispatchUpdateUI(editorType.defaultPropertiesToUpdate);\n    }\n  }\n\n  /**\n   * Get an id.\n   * @returns {string}\n   */\n  getId() {\n    return this.#idManager.getId();\n  }\n\n  get currentLayer() {\n    return this.#allLayers.get(this.#currentPageIndex);\n  }\n\n  get currentPageIndex() {\n    return this.#currentPageIndex;\n  }\n\n  /**\n   * Add a new layer for a page which will contains the editors.\n   * @param {AnnotationEditorLayer} layer\n   */\n  addLayer(layer) {\n    this.#allLayers.set(layer.pageIndex, layer);\n    if (this.#isEnabled) {\n      layer.enable();\n    } else {\n      layer.disable();\n    }\n  }\n\n  /**\n   * Remove a layer.\n   * @param {AnnotationEditorLayer} layer\n   */\n  removeLayer(layer) {\n    this.#allLayers.delete(layer.pageIndex);\n  }\n\n  /**\n   * Change the editor mode (None, FreeText, Ink, ...)\n   * @param {number} mode\n   */\n  updateMode(mode) {\n    this.#mode = mode;\n    if (mode === AnnotationEditorType.NONE) {\n      this.setEditingState(false);\n      this.#disableAll();\n    } else {\n      this.setEditingState(true);\n      this.#enableAll();\n      for (const layer of this.#allLayers.values()) {\n        layer.updateMode(mode);\n      }\n    }\n  }\n\n  /**\n   * Update the toolbar if it's required to reflect the tool currently used.\n   * @param {number} mode\n   * @returns {undefined}\n   */\n  updateToolbar(mode) {\n    if (mode === this.#mode) {\n      return;\n    }\n    this.#eventBus.dispatch(\"switchannotationeditormode\", {\n      source: this,\n      mode,\n    });\n  }\n\n  /**\n   * Update a parameter in the current editor or globally.\n   * @param {number} type\n   * @param {*} value\n   */\n  updateParams(type, value) {\n    if (!this.#editorTypes) {\n      return;\n    }\n\n    for (const editor of this.#selectedEditors) {\n      editor.updateParams(type, value);\n    }\n\n    for (const editorType of this.#editorTypes) {\n      editorType.updateDefaultParams(type, value);\n    }\n  }\n\n  /**\n   * Enable all the layers.\n   */\n  #enableAll() {\n    if (!this.#isEnabled) {\n      this.#isEnabled = true;\n      for (const layer of this.#allLayers.values()) {\n        layer.enable();\n      }\n    }\n  }\n\n  /**\n   * Disable all the layers.\n   */\n  #disableAll() {\n    this.unselectAll();\n    if (this.#isEnabled) {\n      this.#isEnabled = false;\n      for (const layer of this.#allLayers.values()) {\n        layer.disable();\n      }\n    }\n  }\n\n  /**\n   * Get all the editors belonging to a give page.\n   * @param {number} pageIndex\n   * @returns {Array<AnnotationEditor>}\n   */\n  getEditors(pageIndex) {\n    const editors = [];\n    for (const editor of this.#allEditors.values()) {\n      if (editor.pageIndex === pageIndex) {\n        editors.push(editor);\n      }\n    }\n    return editors;\n  }\n\n  /**\n   * Get an editor with the given id.\n   * @param {string} id\n   * @returns {AnnotationEditor}\n   */\n  getEditor(id) {\n    return this.#allEditors.get(id);\n  }\n\n  /**\n   * Add a new editor.\n   * @param {AnnotationEditor} editor\n   */\n  addEditor(editor) {\n    this.#allEditors.set(editor.id, editor);\n  }\n\n  /**\n   * Remove an editor.\n   * @param {AnnotationEditor} editor\n   */\n  removeEditor(editor) {\n    this.#allEditors.delete(editor.id);\n    this.unselect(editor);\n    this.#annotationStorage?.remove(editor.id);\n  }\n\n  /**\n   * Add an editor to the layer it belongs to or add it to the global map.\n   * @param {AnnotationEditor} editor\n   */\n  #addEditorToLayer(editor) {\n    const layer = this.#allLayers.get(editor.pageIndex);\n    if (layer) {\n      layer.addOrRebuild(editor);\n    } else {\n      this.addEditor(editor);\n    }\n  }\n\n  /**\n   * Set the given editor as the active one.\n   * @param {AnnotationEditor} editor\n   */\n  setActiveEditor(editor) {\n    if (this.#activeEditor === editor) {\n      return;\n    }\n\n    this.#activeEditor = editor;\n    if (editor) {\n      this.#dispatchUpdateUI(editor.propertiesToUpdate);\n    }\n  }\n\n  /**\n   * Add or remove an editor the current selection.\n   * @param {AnnotationEditor} editor\n   */\n  toggleSelected(editor) {\n    if (this.#selectedEditors.has(editor)) {\n      this.#selectedEditors.delete(editor);\n      editor.unselect();\n      this.#dispatchUpdateStates({\n        hasSelectedEditor: this.hasSelection,\n      });\n      return;\n    }\n    this.#selectedEditors.add(editor);\n    editor.select();\n    this.#dispatchUpdateUI(editor.propertiesToUpdate);\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: true,\n    });\n  }\n\n  /**\n   * Set the last selected editor.\n   * @param {AnnotationEditor} editor\n   */\n  setSelected(editor) {\n    for (const ed of this.#selectedEditors) {\n      if (ed !== editor) {\n        ed.unselect();\n      }\n    }\n    this.#selectedEditors.clear();\n\n    this.#selectedEditors.add(editor);\n    editor.select();\n    this.#dispatchUpdateUI(editor.propertiesToUpdate);\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: true,\n    });\n  }\n\n  /**\n   * Check if the editor is selected.\n   * @param {AnnotationEditor} editor\n   */\n  isSelected(editor) {\n    return this.#selectedEditors.has(editor);\n  }\n\n  /**\n   * Unselect an editor.\n   * @param {AnnotationEditor} editor\n   */\n  unselect(editor) {\n    editor.unselect();\n    this.#selectedEditors.delete(editor);\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: this.hasSelection,\n    });\n  }\n\n  get hasSelection() {\n    return this.#selectedEditors.size !== 0;\n  }\n\n  /**\n   * Undo the last command.\n   */\n  undo() {\n    this.#commandManager.undo();\n    this.#dispatchUpdateStates({\n      hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n      hasSomethingToRedo: true,\n      isEmpty: this.#isEmpty(),\n    });\n  }\n\n  /**\n   * Redo the last undoed command.\n   */\n  redo() {\n    this.#commandManager.redo();\n    this.#dispatchUpdateStates({\n      hasSomethingToUndo: true,\n      hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n      isEmpty: this.#isEmpty(),\n    });\n  }\n\n  /**\n   * Add a command to execute (cmd) and another one to undo it.\n   * @param {Object} params\n   */\n  addCommands(params) {\n    this.#commandManager.add(params);\n    this.#dispatchUpdateStates({\n      hasSomethingToUndo: true,\n      hasSomethingToRedo: false,\n      isEmpty: this.#isEmpty(),\n    });\n  }\n\n  #isEmpty() {\n    if (this.#allEditors.size === 0) {\n      return true;\n    }\n\n    if (this.#allEditors.size === 1) {\n      for (const editor of this.#allEditors.values()) {\n        return editor.isEmpty();\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Delete the current editor or all.\n   */\n  delete() {\n    this.commitOrRemove();\n    if (!this.hasSelection) {\n      return;\n    }\n\n    const editors = [...this.#selectedEditors];\n    const cmd = () => {\n      for (const editor of editors) {\n        editor.remove();\n      }\n    };\n    const undo = () => {\n      for (const editor of editors) {\n        this.#addEditorToLayer(editor);\n      }\n    };\n\n    this.addCommands({ cmd, undo, mustExec: true });\n  }\n\n  commitOrRemove() {\n    // An editor is being edited so just commit it.\n    this.#activeEditor?.commitOrRemove();\n  }\n\n  /**\n   * Select the editors.\n   * @param {Array<AnnotationEditor>} editors\n   */\n  #selectEditors(editors) {\n    this.#selectedEditors.clear();\n    for (const editor of editors) {\n      if (editor.isEmpty()) {\n        continue;\n      }\n      this.#selectedEditors.add(editor);\n      editor.select();\n    }\n    this.#dispatchUpdateStates({ hasSelectedEditor: true });\n  }\n\n  /**\n   * Select all the editors.\n   */\n  selectAll() {\n    for (const editor of this.#selectedEditors) {\n      editor.commit();\n    }\n    this.#selectEditors(this.#allEditors.values());\n  }\n\n  /**\n   * Unselect all the selected editors.\n   */\n  unselectAll() {\n    if (this.#activeEditor) {\n      // An editor is being edited so just commit it.\n      this.#activeEditor.commitOrRemove();\n      return;\n    }\n\n    if (this.#selectedEditors.size === 0) {\n      return;\n    }\n    for (const editor of this.#selectedEditors) {\n      editor.unselect();\n    }\n    this.#selectedEditors.clear();\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: false,\n    });\n  }\n\n  /**\n   * Is the current editor the one passed as argument?\n   * @param {AnnotationEditor} editor\n   * @returns\n   */\n  isActive(editor) {\n    return this.#activeEditor === editor;\n  }\n\n  /**\n   * Get the current active editor.\n   * @returns {AnnotationEditor|null}\n   */\n  getActive() {\n    return this.#activeEditor;\n  }\n\n  /**\n   * Get the current editor mode.\n   * @returns {number}\n   */\n  getMode() {\n    return this.#mode;\n  }\n}\n\nexport {\n  AnnotationEditorUIManager,\n  bindEvents,\n  ColorManager,\n  CommandManager,\n  KeyboardManager,\n  opacityToHex,\n};\n", "/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseFilterFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n} from \"./base_factory.js\";\nimport {\n  BaseException,\n  shadow,\n  stringToBytes,\n  Util,\n  warn,\n} from \"../shared/util.js\";\n\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\n\nconst AnnotationPrefix = \"pdfjs_internal_id_\";\n\nclass PixelsPerInch {\n  static CSS = 96.0;\n\n  static PDF = 72.0;\n\n  static PDF_TO_CSS_UNITS = this.CSS / this.PDF;\n}\n\n/**\n * FilterFactory aims to create some SVG filters we can use when drawing an\n * image (or whatever) on a canvas.\n * Filters aren't applied with ctx.putImageData because it just overwrites the\n * underlying pixels.\n * With these filters, it's possible for example to apply some transfer maps on\n * an image without the need to apply them on the pixel arrays: the renderer\n * does the magic for us.\n */\nclass DOMFilterFactory extends BaseFilterFactory {\n  #_cache;\n\n  #_defs;\n\n  #docId;\n\n  #document;\n\n  #hcmFilter;\n\n  #hcmKey;\n\n  #hcmUrl;\n\n  #id = 0;\n\n  constructor({ docId, ownerDocument = globalThis.document } = {}) {\n    super();\n    this.#docId = docId;\n    this.#document = ownerDocument;\n  }\n\n  get #cache() {\n    return (this.#_cache ||= new Map());\n  }\n\n  get #defs() {\n    if (!this.#_defs) {\n      const div = this.#document.createElement(\"div\");\n      const { style } = div;\n      style.visibility = \"hidden\";\n      style.contain = \"strict\";\n      style.width = style.height = 0;\n      style.position = \"absolute\";\n      style.top = style.left = 0;\n      style.zIndex = -1;\n\n      const svg = this.#document.createElementNS(SVG_NS, \"svg\");\n      svg.setAttribute(\"width\", 0);\n      svg.setAttribute(\"height\", 0);\n      this.#_defs = this.#document.createElementNS(SVG_NS, \"defs\");\n      div.append(svg);\n      svg.append(this.#_defs);\n      this.#document.body.append(div);\n    }\n    return this.#_defs;\n  }\n\n  #appendFeFunc(feComponentTransfer, func, table) {\n    const feFunc = this.#document.createElementNS(SVG_NS, func);\n    feFunc.setAttribute(\"type\", \"discrete\");\n    feFunc.setAttribute(\"tableValues\", table);\n    feComponentTransfer.append(feFunc);\n  }\n\n  addFilter(maps) {\n    if (!maps) {\n      return \"none\";\n    }\n\n    // When a page is zoomed the page is re-drawn but the maps are likely\n    // the same.\n    let value = this.#cache.get(maps);\n    if (value) {\n      return value;\n    }\n\n    let tableR, tableG, tableB, key;\n    if (maps.length === 1) {\n      const mapR = maps[0];\n      const buffer = new Array(256);\n      for (let i = 0; i < 256; i++) {\n        buffer[i] = mapR[i] / 255;\n      }\n      key = tableR = tableG = tableB = buffer.join(\",\");\n    } else {\n      const [mapR, mapG, mapB] = maps;\n      const bufferR = new Array(256);\n      const bufferG = new Array(256);\n      const bufferB = new Array(256);\n      for (let i = 0; i < 256; i++) {\n        bufferR[i] = mapR[i] / 255;\n        bufferG[i] = mapG[i] / 255;\n        bufferB[i] = mapB[i] / 255;\n      }\n      tableR = bufferR.join(\",\");\n      tableG = bufferG.join(\",\");\n      tableB = bufferB.join(\",\");\n      key = `${tableR}${tableG}${tableB}`;\n    }\n\n    value = this.#cache.get(key);\n    if (value) {\n      this.#cache.set(maps, value);\n      return value;\n    }\n\n    // We create a SVG filter: feComponentTransferElement\n    //  https://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement\n\n    const id = `g_${this.#docId}_transfer_map_${this.#id++}`;\n    const url = `url(#${id})`;\n    this.#cache.set(maps, url);\n    this.#cache.set(key, url);\n\n    const filter = this.#document.createElementNS(SVG_NS, \"filter\", SVG_NS);\n    filter.setAttribute(\"id\", id);\n    filter.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n    const feComponentTransfer = this.#document.createElementNS(\n      SVG_NS,\n      \"feComponentTransfer\"\n    );\n    filter.append(feComponentTransfer);\n\n    this.#appendFeFunc(feComponentTransfer, \"feFuncR\", tableR);\n    this.#appendFeFunc(feComponentTransfer, \"feFuncG\", tableG);\n    this.#appendFeFunc(feComponentTransfer, \"feFuncB\", tableB);\n\n    this.#defs.append(filter);\n\n    return url;\n  }\n\n  addHCMFilter(fgColor, bgColor) {\n    const key = `${fgColor}-${bgColor}`;\n    if (this.#hcmKey === key) {\n      return this.#hcmUrl;\n    }\n\n    this.#hcmKey = key;\n    this.#hcmUrl = \"none\";\n    this.#hcmFilter?.remove();\n\n    if (!fgColor || !bgColor) {\n      return this.#hcmUrl;\n    }\n\n    this.#defs.style.color = fgColor;\n    fgColor = getComputedStyle(this.#defs).getPropertyValue(\"color\");\n    const fgRGB = getRGB(fgColor);\n    fgColor = Util.makeHexColor(...fgRGB);\n    this.#defs.style.color = bgColor;\n    bgColor = getComputedStyle(this.#defs).getPropertyValue(\"color\");\n    const bgRGB = getRGB(bgColor);\n    bgColor = Util.makeHexColor(...bgRGB);\n    this.#defs.style.color = \"\";\n\n    if (\n      (fgColor === \"#000000\" && bgColor === \"#ffffff\") ||\n      fgColor === bgColor\n    ) {\n      return this.#hcmUrl;\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_Colors_and_Luminance\n    //\n    // Relative luminance:\n    // https://www.w3.org/TR/WCAG20/#relativeluminancedef\n    //\n    // We compute the rounded luminance of the default background color.\n    // Then for every color in the pdf, if its rounded luminance is the\n    // same as the background one then it's replaced by the new\n    // background color else by the foreground one.\n    const map = new Array(256);\n    for (let i = 0; i <= 255; i++) {\n      const x = i / 255;\n      map[i] = x <= 0.03928 ? x / 12.92 : ((x + 0.055) / 1.055) ** 2.4;\n    }\n    const table = map.join(\",\");\n\n    const id = `g_${this.#docId}_hcm_filter`;\n    const filter = (this.#hcmFilter = this.#document.createElementNS(\n      SVG_NS,\n      \"filter\",\n      SVG_NS\n    ));\n    filter.setAttribute(\"id\", id);\n    filter.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n    let feComponentTransfer = this.#document.createElementNS(\n      SVG_NS,\n      \"feComponentTransfer\"\n    );\n    filter.append(feComponentTransfer);\n\n    this.#appendFeFunc(feComponentTransfer, \"feFuncR\", table);\n    this.#appendFeFunc(feComponentTransfer, \"feFuncG\", table);\n    this.#appendFeFunc(feComponentTransfer, \"feFuncB\", table);\n\n    const feColorMatrix = this.#document.createElementNS(\n      SVG_NS,\n      \"feColorMatrix\"\n    );\n    feColorMatrix.setAttribute(\"type\", \"matrix\");\n    feColorMatrix.setAttribute(\n      \"values\",\n      \"0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0\"\n    );\n    filter.append(feColorMatrix);\n\n    feComponentTransfer = this.#document.createElementNS(\n      SVG_NS,\n      \"feComponentTransfer\"\n    );\n    filter.append(feComponentTransfer);\n\n    const getSteps = (c, n) => {\n      const start = fgRGB[c] / 255;\n      const end = bgRGB[c] / 255;\n      const arr = new Array(n + 1);\n      for (let i = 0; i <= n; i++) {\n        arr[i] = start + (i / n) * (end - start);\n      }\n      return arr.join(\",\");\n    };\n    this.#appendFeFunc(feComponentTransfer, \"feFuncR\", getSteps(0, 5));\n    this.#appendFeFunc(feComponentTransfer, \"feFuncG\", getSteps(1, 5));\n    this.#appendFeFunc(feComponentTransfer, \"feFuncB\", getSteps(2, 5));\n\n    this.#defs.append(filter);\n\n    this.#hcmUrl = `url(#${id})`;\n    return this.#hcmUrl;\n  }\n\n  destroy(keepHCM = false) {\n    if (keepHCM && this.#hcmUrl) {\n      return;\n    }\n    if (this.#_defs) {\n      this.#_defs.parentNode.parentNode.remove();\n      this.#_defs = null;\n    }\n    if (this.#_cache) {\n      this.#_cache.clear();\n      this.#_cache = null;\n    }\n    this.#id = 0;\n  }\n}\n\nclass DOMCanvasFactory extends BaseCanvasFactory {\n  constructor({ ownerDocument = globalThis.document } = {}) {\n    super();\n    this._document = ownerDocument;\n  }\n\n  /**\n   * @ignore\n   */\n  _createCanvas(width, height) {\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  }\n}\n\nasync function fetchData(url, asTypedArray = false) {\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    isValidFetchUrl(url, document.baseURI)\n  ) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return asTypedArray\n      ? new Uint8Array(await response.arrayBuffer())\n      : stringToBytes(await response.text());\n  }\n\n  // The Fetch API is not supported.\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", url, /* asTypedArray = */ true);\n\n    if (asTypedArray) {\n      request.responseType = \"arraybuffer\";\n    }\n    request.onreadystatechange = () => {\n      if (request.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (request.status === 200 || request.status === 0) {\n        let data;\n        if (asTypedArray && request.response) {\n          data = new Uint8Array(request.response);\n        } else if (!asTypedArray && request.responseText) {\n          data = stringToBytes(request.responseText);\n        }\n        if (data) {\n          resolve(data);\n          return;\n        }\n      }\n      reject(new Error(request.statusText));\n    };\n\n    request.send(null);\n  });\n}\n\nclass DOMCMapReaderFactory extends BaseCMapReaderFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url, compressionType) {\n    return fetchData(url, /* asTypedArray = */ this.isCompressed).then(data => {\n      return { cMapData: data, compressionType };\n    });\n  }\n}\n\nclass DOMStandardFontDataFactory extends BaseStandardFontDataFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url) {\n    return fetchData(url, /* asTypedArray = */ true);\n  }\n}\n\nclass DOMSVGFactory extends BaseSVGFactory {\n  /**\n   * @ignore\n   */\n  _createSVG(type) {\n    return document.createElementNS(SVG_NS, type);\n  }\n}\n\n/**\n * @typedef {Object} PageViewportParameters\n * @property {Array<number>} viewBox - The xMin, yMin, xMax and\n *   yMax coordinates.\n * @property {number} scale - The scale of the viewport.\n * @property {number} rotation - The rotation, in degrees, of the viewport.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset. The\n *   default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset. The\n *   default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * @typedef {Object} PageViewportCloneParameters\n * @property {number} [scale] - The scale, overriding the one in the cloned\n *   viewport. The default value is `this.scale`.\n * @property {number} [rotation] - The rotation, in degrees, overriding the one\n *   in the cloned viewport. The default value is `this.rotation`.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `this.offsetX`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `this.offsetY`.\n * @property {boolean} [dontFlip] - If true, the x-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n */\nclass PageViewport {\n  /**\n   * @param {PageViewportParameters}\n   */\n  constructor({\n    viewBox,\n    scale,\n    rotation,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  }) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    const centerX = (viewBox[2] + viewBox[0]) / 2;\n    const centerY = (viewBox[3] + viewBox[1]) / 2;\n    let rotateA, rotateB, rotateC, rotateD;\n    // Normalize the rotation, by clamping it to the [0, 360) range.\n    rotation %= 360;\n    if (rotation < 0) {\n      rotation += 360;\n    }\n    switch (rotation) {\n      case 180:\n        rotateA = -1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0;\n        rotateB = 1;\n        rotateC = 1;\n        rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0;\n        rotateB = -1;\n        rotateC = -1;\n        rotateD = 0;\n        break;\n      case 0:\n        rotateA = 1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = -1;\n        break;\n      default:\n        throw new Error(\n          \"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\"\n        );\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC;\n      rotateD = -rotateD;\n    }\n\n    let offsetCanvasX, offsetCanvasY;\n    let width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = (viewBox[3] - viewBox[1]) * scale;\n      height = (viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = (viewBox[2] - viewBox[0]) * scale;\n      height = (viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY,\n    ];\n\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The original, un-scaled, viewport dimensions.\n   * @type {Object}\n   */\n  get rawDims() {\n    const { viewBox } = this;\n    return shadow(this, \"rawDims\", {\n      pageWidth: viewBox[2] - viewBox[0],\n      pageHeight: viewBox[3] - viewBox[1],\n      pageX: viewBox[0],\n      pageY: viewBox[1],\n    });\n  }\n\n  /**\n   * Clones viewport, with optional additional properties.\n   * @param {PageViewportCloneParameters} [params]\n   * @returns {PageViewport} Cloned viewport.\n   */\n  clone({\n    scale = this.scale,\n    rotation = this.rotation,\n    offsetX = this.offsetX,\n    offsetY = this.offsetY,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.viewBox.slice(),\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * Converts PDF point to the viewport coordinates. For examples, useful for\n   * converting PDF location into canvas pixel coordinates.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Array} Array containing `x`- and `y`-coordinates of the\n   *   point in the viewport coordinate space.\n   * @see {@link convertToPdfPoint}\n   * @see {@link convertToViewportRectangle}\n   */\n  convertToViewportPoint(x, y) {\n    return Util.applyTransform([x, y], this.transform);\n  }\n\n  /**\n   * Converts PDF rectangle to the viewport coordinates.\n   * @param {Array} rect - The xMin, yMin, xMax and yMax coordinates.\n   * @returns {Array} Array containing corresponding coordinates of the\n   *   rectangle in the viewport coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToViewportRectangle(rect) {\n    const topLeft = Util.applyTransform([rect[0], rect[1]], this.transform);\n    const bottomRight = Util.applyTransform([rect[2], rect[3]], this.transform);\n    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n  }\n\n  /**\n   * Converts viewport coordinates to the PDF location. For examples, useful\n   * for converting canvas pixel location into PDF one.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Array} Array containing `x`- and `y`-coordinates of the\n   *   point in the PDF coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToPdfPoint(x, y) {\n    return Util.applyInverseTransform([x, y], this.transform);\n  }\n}\n\nclass RenderingCancelledException extends BaseException {\n  constructor(msg, type, extraDelay = 0) {\n    super(msg, \"RenderingCancelledException\");\n    this.type = type;\n    this.extraDelay = extraDelay;\n  }\n}\n\nfunction isDataScheme(url) {\n  const ii = url.length;\n  let i = 0;\n  while (i < ii && url[i].trim() === \"\") {\n    i++;\n  }\n  return url.substring(i, i + 5).toLowerCase() === \"data:\";\n}\n\nfunction isPdfFile(filename) {\n  return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n}\n\n/**\n * Gets the filename from a given URL.\n * @param {string} url\n * @param {boolean} [onlyStripPath]\n * @returns {string}\n */\nfunction getFilenameFromUrl(url, onlyStripPath = false) {\n  if (!onlyStripPath) {\n    [url] = url.split(/[#?]/, 1);\n  }\n  return url.substring(url.lastIndexOf(\"/\") + 1);\n}\n\n/**\n * Returns the filename or guessed filename from the url (see issue 3455).\n * @param {string} url - The original PDF location.\n * @param {string} defaultFilename - The value returned if the filename is\n *   unknown, or the protocol is unsupported.\n * @returns {string} Guessed PDF filename.\n */\nfunction getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n  if (typeof url !== \"string\") {\n    return defaultFilename;\n  }\n  if (isDataScheme(url)) {\n    warn('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n    return defaultFilename;\n  }\n  const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n  //              SCHEME        HOST        1.PATH  2.QUERY   3.REF\n  // Pattern to get last matching NAME.pdf\n  const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n  const splitURI = reURI.exec(url);\n  let suggestedFilename =\n    reFilename.exec(splitURI[1]) ||\n    reFilename.exec(splitURI[2]) ||\n    reFilename.exec(splitURI[3]);\n  if (suggestedFilename) {\n    suggestedFilename = suggestedFilename[0];\n    if (suggestedFilename.includes(\"%\")) {\n      // URL-encoded %2Fpath%2Fto%2Ffile.pdf should be file.pdf\n      try {\n        suggestedFilename = reFilename.exec(\n          decodeURIComponent(suggestedFilename)\n        )[0];\n      } catch (ex) {\n        // Possible (extremely rare) errors:\n        // URIError \"Malformed URI\", e.g. for \"%AA.pdf\"\n        // TypeError \"null has no properties\", e.g. for \"%2F.pdf\"\n      }\n    }\n  }\n  return suggestedFilename || defaultFilename;\n}\n\nclass StatTimer {\n  started = Object.create(null);\n\n  times = [];\n\n  time(name) {\n    if (name in this.started) {\n      warn(`Timer is already running for ${name}`);\n    }\n    this.started[name] = Date.now();\n  }\n\n  timeEnd(name) {\n    if (!(name in this.started)) {\n      warn(`Timer has not been started for ${name}`);\n    }\n    this.times.push({\n      name,\n      start: this.started[name],\n      end: Date.now(),\n    });\n    // Remove timer from started so it can be called again.\n    delete this.started[name];\n  }\n\n  toString() {\n    // Find the longest name for padding purposes.\n    const outBuf = [];\n    let longest = 0;\n    for (const { name } of this.times) {\n      longest = Math.max(name.length, longest);\n    }\n    for (const { name, start, end } of this.times) {\n      outBuf.push(`${name.padEnd(longest)} ${end - start}ms\\n`);\n    }\n    return outBuf.join(\"\");\n  }\n}\n\nfunction isValidFetchUrl(url, baseUrl) {\n  try {\n    const { protocol } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    // The Fetch API only supports the http/https protocols, and not file/ftp.\n    return protocol === \"http:\" || protocol === \"https:\";\n  } catch (ex) {\n    return false; // `new URL()` will throw on incorrect data.\n  }\n}\n\n/**\n * @param {string} src\n * @param {boolean} [removeScriptElement]\n * @returns {Promise<void>}\n */\nfunction loadScript(src, removeScriptElement = false) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = function (evt) {\n      if (removeScriptElement) {\n        script.remove();\n      }\n      resolve(evt);\n    };\n    script.onerror = function () {\n      reject(new Error(`Cannot load script at: ${script.src}`));\n    };\n    (document.head || document.documentElement).append(script);\n  });\n}\n\n// Deprecated API function -- display regardless of the `verbosity` setting.\nfunction deprecated(details) {\n  console.log(\"Deprecated API usage: \" + details);\n}\n\nlet pdfDateStringRegex;\n\nclass PDFDateString {\n  /**\n   * Convert a PDF date string to a JavaScript `Date` object.\n   *\n   * The PDF date string format is described in section 7.9.4 of the official\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\n   * edition) Adobe describes the same format including a trailing apostrophe.\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\n   *\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\n   * parts of the date string).\n   *\n   * @param {string} input\n   * @returns {Date|null}\n   */\n  static toDateObject(input) {\n    if (!input || typeof input !== \"string\") {\n      return null;\n    }\n\n    // Lazily initialize the regular expression.\n    pdfDateStringRegex ||= new RegExp(\n      \"^D:\" + // Prefix (required)\n        \"(\\\\d{4})\" + // Year (required)\n        \"(\\\\d{2})?\" + // Month (optional)\n        \"(\\\\d{2})?\" + // Day (optional)\n        \"(\\\\d{2})?\" + // Hour (optional)\n        \"(\\\\d{2})?\" + // Minute (optional)\n        \"(\\\\d{2})?\" + // Second (optional)\n        \"([Z|+|-])?\" + // Universal time relation (optional)\n        \"(\\\\d{2})?\" + // Offset hour (optional)\n        \"'?\" + // Splitting apostrophe (optional)\n        \"(\\\\d{2})?\" + // Offset minute (optional)\n        \"'?\" // Trailing apostrophe (optional)\n    );\n\n    // Optional fields that don't satisfy the requirements from the regular\n    // expression (such as incorrect digit counts or numbers that are out of\n    // range) will fall back the defaults from the specification.\n    const matches = pdfDateStringRegex.exec(input);\n    if (!matches) {\n      return null;\n    }\n\n    // JavaScript's `Date` object expects the month to be between 0 and 11\n    // instead of 1 and 12, so we have to correct for that.\n    const year = parseInt(matches[1], 10);\n    let month = parseInt(matches[2], 10);\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\n    let day = parseInt(matches[3], 10);\n    day = day >= 1 && day <= 31 ? day : 1;\n    let hour = parseInt(matches[4], 10);\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\n    let minute = parseInt(matches[5], 10);\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\n    let second = parseInt(matches[6], 10);\n    second = second >= 0 && second <= 59 ? second : 0;\n    const universalTimeRelation = matches[7] || \"Z\";\n    let offsetHour = parseInt(matches[8], 10);\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n    let offsetMinute = parseInt(matches[9], 10) || 0;\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n    // Universal time relation 'Z' means that the local time is equal to the\n    // universal time, whereas the relations '+'/'-' indicate that the local\n    // time is later respectively earlier than the universal time. Every date\n    // is normalized to universal time.\n    if (universalTimeRelation === \"-\") {\n      hour += offsetHour;\n      minute += offsetMinute;\n    } else if (universalTimeRelation === \"+\") {\n      hour -= offsetHour;\n      minute -= offsetMinute;\n    }\n\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\n  }\n}\n\n/**\n * NOTE: This is (mostly) intended to support printing of XFA forms.\n */\nfunction getXfaPageViewport(xfaPage, { scale = 1, rotation = 0 }) {\n  const { width, height } = xfaPage.attributes.style;\n  const viewBox = [0, 0, parseInt(width), parseInt(height)];\n\n  return new PageViewport({\n    viewBox,\n    scale,\n    rotation,\n  });\n}\n\nfunction getRGB(color) {\n  if (color.startsWith(\"#\")) {\n    const colorRGB = parseInt(color.slice(1), 16);\n    return [\n      (colorRGB & 0xff0000) >> 16,\n      (colorRGB & 0x00ff00) >> 8,\n      colorRGB & 0x0000ff,\n    ];\n  }\n\n  if (color.startsWith(\"rgb(\")) {\n    // getComputedStyle(...).color returns a `rgb(R, G, B)` color.\n    return color\n      .slice(/* \"rgb(\".length */ 4, -1) // Strip out \"rgb(\" and \")\".\n      .split(\",\")\n      .map(x => parseInt(x));\n  }\n\n  if (color.startsWith(\"rgba(\")) {\n    return color\n      .slice(/* \"rgba(\".length */ 5, -1) // Strip out \"rgba(\" and \")\".\n      .split(\",\")\n      .map(x => parseInt(x))\n      .slice(0, 3);\n  }\n\n  warn(`Not a valid color format: \"${color}\"`);\n  return [0, 0, 0];\n}\n\nfunction getColorValues(colors) {\n  const span = document.createElement(\"span\");\n  span.style.visibility = \"hidden\";\n  document.body.append(span);\n  for (const name of colors.keys()) {\n    span.style.color = name;\n    const computedColor = window.getComputedStyle(span).color;\n    colors.set(name, getRGB(computedColor));\n  }\n  span.remove();\n}\n\nfunction getCurrentTransform(ctx) {\n  const { a, b, c, d, e, f } = ctx.getTransform();\n  return [a, b, c, d, e, f];\n}\n\nfunction getCurrentTransformInverse(ctx) {\n  const { a, b, c, d, e, f } = ctx.getTransform().invertSelf();\n  return [a, b, c, d, e, f];\n}\n\n/**\n * @param {HTMLDivElement} div\n * @param {PageViewport} viewport\n * @param {boolean} mustFlip\n * @param {boolean} mustRotate\n */\nfunction setLayerDimensions(\n  div,\n  viewport,\n  mustFlip = false,\n  mustRotate = true\n) {\n  if (viewport instanceof PageViewport) {\n    const { pageWidth, pageHeight } = viewport.rawDims;\n    const { style } = div;\n\n    // TODO: Investigate if it could be interesting to use the css round\n    // function (https://developer.mozilla.org/en-US/docs/Web/CSS/round):\n    // const widthStr =\n    //   `round(down, var(--scale-factor) * ${pageWidth}px, 1px)`;\n    // const heightStr =\n    //   `round(down, var(--scale-factor) * ${pageHeight}px, 1px)`;\n    const widthStr = `calc(var(--scale-factor) * ${pageWidth}px)`;\n    const heightStr = `calc(var(--scale-factor) * ${pageHeight}px)`;\n\n    if (!mustFlip || viewport.rotation % 180 === 0) {\n      style.width = widthStr;\n      style.height = heightStr;\n    } else {\n      style.width = heightStr;\n      style.height = widthStr;\n    }\n  }\n\n  if (mustRotate) {\n    div.setAttribute(\"data-main-rotation\", viewport.rotation);\n  }\n}\n\nexport {\n  AnnotationPrefix,\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMFilterFactory,\n  DOMStandardFontDataFactory,\n  DOMSVGFactory,\n  getColorValues,\n  getCurrentTransform,\n  getCurrentTransformInverse,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getRGB,\n  getXfaPageViewport,\n  isDataScheme,\n  isPdfFile,\n  isValidFetchUrl,\n  loadScript,\n  PageViewport,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  setLayerDimensions,\n  StatTimer,\n};\n", "/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CMapCompressionType, unreachable } from \"../shared/util.js\";\n\nclass BaseFilterFactory {\n  constructor() {\n    if (this.constructor === BaseFilterFactory) {\n      unreachable(\"Cannot initialize BaseFilterFactory.\");\n    }\n  }\n\n  addFilter(maps) {\n    return \"none\";\n  }\n\n  addHCMFilter(fgColor, bgColor) {\n    return \"none\";\n  }\n\n  destroy(keepHCM = false) {}\n}\n\nclass BaseCanvasFactory {\n  constructor() {\n    if (this.constructor === BaseCanvasFactory) {\n      unreachable(\"Cannot initialize BaseCanvasFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    const canvas = this._createCanvas(width, height);\n    return {\n      canvas,\n      context: canvas.getContext(\"2d\"),\n    };\n  }\n\n  reset(canvasAndContext, width, height) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    canvasAndContext.canvas.width = width;\n    canvasAndContext.canvas.height = height;\n  }\n\n  destroy(canvasAndContext) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    // Zeroing the width and height cause Firefox to release graphics\n    // resources immediately, which can greatly reduce memory consumption.\n    canvasAndContext.canvas.width = 0;\n    canvasAndContext.canvas.height = 0;\n    canvasAndContext.canvas = null;\n    canvasAndContext.context = null;\n  }\n\n  /**\n   * @ignore\n   */\n  _createCanvas(width, height) {\n    unreachable(\"Abstract method `_createCanvas` called.\");\n  }\n}\n\nclass BaseCMapReaderFactory {\n  constructor({ baseUrl = null, isCompressed = true }) {\n    if (this.constructor === BaseCMapReaderFactory) {\n      unreachable(\"Cannot initialize BaseCMapReaderFactory.\");\n    }\n    this.baseUrl = baseUrl;\n    this.isCompressed = isCompressed;\n  }\n\n  async fetch({ name }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The CMap \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.'\n      );\n    }\n    if (!name) {\n      throw new Error(\"CMap name must be specified.\");\n    }\n    const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n    const compressionType = this.isCompressed\n      ? CMapCompressionType.BINARY\n      : CMapCompressionType.NONE;\n\n    return this._fetchData(url, compressionType).catch(reason => {\n      throw new Error(\n        `Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  _fetchData(url, compressionType) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseStandardFontDataFactory {\n  constructor({ baseUrl = null }) {\n    if (this.constructor === BaseStandardFontDataFactory) {\n      unreachable(\"Cannot initialize BaseStandardFontDataFactory.\");\n    }\n    this.baseUrl = baseUrl;\n  }\n\n  async fetch({ filename }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The standard font \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"standardFontDataUrl\" API parameter is provided.'\n      );\n    }\n    if (!filename) {\n      throw new Error(\"Font filename must be specified.\");\n    }\n    const url = `${this.baseUrl}${filename}`;\n\n    return this._fetchData(url).catch(reason => {\n      throw new Error(`Unable to load font data at: ${url}`);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  _fetchData(url) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseSVGFactory {\n  constructor() {\n    if (this.constructor === BaseSVGFactory) {\n      unreachable(\"Cannot initialize BaseSVGFactory.\");\n    }\n  }\n\n  create(width, height, skipDimensions = false) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid SVG dimensions\");\n    }\n    const svg = this._createSVG(\"svg:svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n\n    if (!skipDimensions) {\n      svg.setAttribute(\"width\", `${width}px`);\n      svg.setAttribute(\"height\", `${height}px`);\n    }\n\n    svg.setAttribute(\"preserveAspectRatio\", \"none\");\n    svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n    return svg;\n  }\n\n  createElement(type) {\n    if (typeof type !== \"string\") {\n      throw new Error(\"Invalid SVG element type\");\n    }\n    return this._createSVG(type);\n  }\n\n  /**\n   * @ignore\n   */\n  _createSVG(type) {\n    unreachable(\"Abstract method `_createSVG` called.\");\n  }\n}\n\nexport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseFilterFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n};\n", "/* Copyright 2014 Opera Software ASA\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n * Based on https://code.google.com/p/smhasher/wiki/MurmurHash3.\n * Hashes roughly 100 KB per millisecond on i7 3.4 GHz.\n */\n\nimport { isArrayBuffer } from \"./util.js\";\n\nconst SEED = 0xc3d2e1f0;\n// Workaround for missing math precision in JS.\nconst MASK_HIGH = 0xffff0000;\nconst MASK_LOW = 0xffff;\n\nclass MurmurHash3_64 {\n  constructor(seed) {\n    this.h1 = seed ? seed & 0xffffffff : SEED;\n    this.h2 = seed ? seed & 0xffffffff : SEED;\n  }\n\n  update(input) {\n    let data, length;\n    if (typeof input === \"string\") {\n      data = new Uint8Array(input.length * 2);\n      length = 0;\n      for (let i = 0, ii = input.length; i < ii; i++) {\n        const code = input.charCodeAt(i);\n        if (code <= 0xff) {\n          data[length++] = code;\n        } else {\n          data[length++] = code >>> 8;\n          data[length++] = code & 0xff;\n        }\n      }\n    } else if (isArrayBuffer(input)) {\n      data = input.slice();\n      length = data.byteLength;\n    } else {\n      throw new Error(\n        \"Wrong data format in MurmurHash3_64_update. \" +\n          \"Input must be a string or array.\"\n      );\n    }\n\n    const blockCounts = length >> 2;\n    const tailLength = length - blockCounts * 4;\n    // We don't care about endianness here.\n    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n    let k1 = 0,\n      k2 = 0;\n    let h1 = this.h1,\n      h2 = this.h2;\n    const C1 = 0xcc9e2d51,\n      C2 = 0x1b873593;\n    const C1_LOW = C1 & MASK_LOW,\n      C2_LOW = C2 & MASK_LOW;\n\n    for (let i = 0; i < blockCounts; i++) {\n      if (i & 1) {\n        k1 = dataUint32[i];\n        k1 = ((k1 * C1) & MASK_HIGH) | ((k1 * C1_LOW) & MASK_LOW);\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((k1 * C2) & MASK_HIGH) | ((k1 * C2_LOW) & MASK_LOW);\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1 = h1 * 5 + 0xe6546b64;\n      } else {\n        k2 = dataUint32[i];\n        k2 = ((k2 * C1) & MASK_HIGH) | ((k2 * C1_LOW) & MASK_LOW);\n        k2 = (k2 << 15) | (k2 >>> 17);\n        k2 = ((k2 * C2) & MASK_HIGH) | ((k2 * C2_LOW) & MASK_LOW);\n        h2 ^= k2;\n        h2 = (h2 << 13) | (h2 >>> 19);\n        h2 = h2 * 5 + 0xe6546b64;\n      }\n    }\n\n    k1 = 0;\n\n    switch (tailLength) {\n      case 3:\n        k1 ^= data[blockCounts * 4 + 2] << 16;\n      /* falls through */\n      case 2:\n        k1 ^= data[blockCounts * 4 + 1] << 8;\n      /* falls through */\n      case 1:\n        k1 ^= data[blockCounts * 4];\n        /* falls through */\n\n        k1 = ((k1 * C1) & MASK_HIGH) | ((k1 * C1_LOW) & MASK_LOW);\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((k1 * C2) & MASK_HIGH) | ((k1 * C2_LOW) & MASK_LOW);\n        if (blockCounts & 1) {\n          h1 ^= k1;\n        } else {\n          h2 ^= k1;\n        }\n    }\n\n    this.h1 = h1;\n    this.h2 = h2;\n  }\n\n  hexdigest() {\n    let h1 = this.h1,\n      h2 = this.h2;\n\n    h1 ^= h2 >>> 1;\n    h1 = ((h1 * 0xed558ccd) & MASK_HIGH) | ((h1 * 0x8ccd) & MASK_LOW);\n    h2 =\n      ((h2 * 0xff51afd7) & MASK_HIGH) |\n      (((((h2 << 16) | (h1 >>> 16)) * 0xafd7ed55) & MASK_HIGH) >>> 16);\n    h1 ^= h2 >>> 1;\n    h1 = ((h1 * 0x1a85ec53) & MASK_HIGH) | ((h1 * 0xec53) & MASK_LOW);\n    h2 =\n      ((h2 * 0xc4ceb9fe) & MASK_HIGH) |\n      (((((h2 << 16) | (h1 >>> 16)) * 0xb9fe1a85) & MASK_HIGH) >>> 16);\n    h1 ^= h2 >>> 1;\n\n    return (\n      (h1 >>> 0).toString(16).padStart(8, \"0\") +\n      (h2 >>> 0).toString(16).padStart(8, \"0\")\n    );\n  }\n}\n\nexport { MurmurHash3_64 };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  bytesToString,\n  FeatureTest,\n  shadow,\n  string32,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\n\nclass FontLoader {\n  #systemFonts = new Set();\n\n  constructor({\n    ownerDocument = globalThis.document,\n    styleElement = null, // For testing only.\n  }) {\n    this._document = ownerDocument;\n\n    this.nativeFontFaces = new Set();\n    this.styleElement =\n      typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")\n        ? styleElement\n        : null;\n\n    if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"MOZCENTRAL\")) {\n      this.loadingRequests = [];\n      this.loadTestFontId = 0;\n    }\n  }\n\n  addNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.add(nativeFontFace);\n    this._document.fonts.add(nativeFontFace);\n  }\n\n  removeNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.delete(nativeFontFace);\n    this._document.fonts.delete(nativeFontFace);\n  }\n\n  insertRule(rule) {\n    if (!this.styleElement) {\n      this.styleElement = this._document.createElement(\"style\");\n      this._document.documentElement\n        .getElementsByTagName(\"head\")[0]\n        .append(this.styleElement);\n    }\n    const styleSheet = this.styleElement.sheet;\n    styleSheet.insertRule(rule, styleSheet.cssRules.length);\n  }\n\n  clear() {\n    for (const nativeFontFace of this.nativeFontFaces) {\n      this._document.fonts.delete(nativeFontFace);\n    }\n    this.nativeFontFaces.clear();\n    this.#systemFonts.clear();\n\n    if (this.styleElement) {\n      // Note: ChildNode.remove doesn't throw if the parentNode is undefined.\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n\n  async loadSystemFont(info) {\n    if (!info || this.#systemFonts.has(info.loadedName)) {\n      return;\n    }\n    assert(\n      !this.disableFontFace,\n      \"loadSystemFont shouldn't be called when `disableFontFace` is set.\"\n    );\n\n    if (this.isFontLoadingAPISupported) {\n      const { loadedName, src, style } = info;\n      const fontFace = new FontFace(loadedName, src, style);\n      this.addNativeFontFace(fontFace);\n      try {\n        await fontFace.load();\n        this.#systemFonts.add(loadedName);\n      } catch {\n        warn(\n          `Cannot load system font: ${info.baseFontName}, installing it could help to improve PDF rendering.`\n        );\n\n        this.removeNativeFontFace(fontFace);\n      }\n      return;\n    }\n\n    unreachable(\n      \"Not implemented: loadSystemFont without the Font Loading API.\"\n    );\n  }\n\n  async bind(font) {\n    // Add the font to the DOM only once; skip if the font is already loaded.\n    if (font.attached || (font.missingFile && !font.systemFontInfo)) {\n      return;\n    }\n    font.attached = true;\n\n    if (font.systemFontInfo) {\n      await this.loadSystemFont(font.systemFontInfo);\n      return;\n    }\n\n    if (this.isFontLoadingAPISupported) {\n      const nativeFontFace = font.createNativeFontFace();\n      if (nativeFontFace) {\n        this.addNativeFontFace(nativeFontFace);\n        try {\n          await nativeFontFace.loaded;\n        } catch (ex) {\n          warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n\n          // When font loading failed, fall back to the built-in font renderer.\n          font.disableFontFace = true;\n          throw ex;\n        }\n      }\n      return; // The font was, asynchronously, loaded.\n    }\n\n    // !this.isFontLoadingAPISupported\n    const rule = font.createFontFaceRule();\n    if (rule) {\n      this.insertRule(rule);\n\n      if (this.isSyncFontLoadingSupported) {\n        return; // The font was, synchronously, loaded.\n      }\n      if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n        throw new Error(\"Not implemented: async font loading\");\n      }\n      await new Promise(resolve => {\n        const request = this._queueLoadingCallback(resolve);\n        this._prepareFontLoadEvent(font, request);\n      });\n      // The font was, asynchronously, loaded.\n    }\n  }\n\n  get isFontLoadingAPISupported() {\n    const hasFonts = !!this._document?.fonts;\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      return shadow(\n        this,\n        \"isFontLoadingAPISupported\",\n        hasFonts && !this.styleElement\n      );\n    }\n    return shadow(this, \"isFontLoadingAPISupported\", hasFonts);\n  }\n\n  get isSyncFontLoadingSupported() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      return shadow(this, \"isSyncFontLoadingSupported\", true);\n    }\n\n    let supported = false;\n    if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"CHROME\")) {\n      if (isNodeJS) {\n        // Node.js - we can pretend that sync font loading is supported.\n        supported = true;\n      } else if (\n        typeof navigator !== \"undefined\" &&\n        // User agent string sniffing is bad, but there is no reliable way to\n        // tell if the font is fully loaded and ready to be used with canvas.\n        /Mozilla\\/5.0.*?rv:\\d+.*? Gecko/.test(navigator.userAgent)\n      ) {\n        // Firefox, from version 14, supports synchronous font loading.\n        supported = true;\n      }\n    }\n    return shadow(this, \"isSyncFontLoadingSupported\", supported);\n  }\n\n  _queueLoadingCallback(callback) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: _queueLoadingCallback\");\n    }\n\n    function completeRequest() {\n      assert(!request.done, \"completeRequest() cannot be called twice.\");\n      request.done = true;\n\n      // Sending all completed requests in order of how they were queued.\n      while (loadingRequests.length > 0 && loadingRequests[0].done) {\n        const otherRequest = loadingRequests.shift();\n        setTimeout(otherRequest.callback, 0);\n      }\n    }\n\n    const { loadingRequests } = this;\n    const request = {\n      done: false,\n      complete: completeRequest,\n      callback,\n    };\n    loadingRequests.push(request);\n    return request;\n  }\n\n  get _loadTestFont() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: _loadTestFont\");\n    }\n\n    // This is a CFF font with 1 glyph for '.' that fills its entire width\n    // and height.\n    const testFont = atob(\n      \"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" +\n        \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" +\n        \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" +\n        \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" +\n        \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" +\n        \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" +\n        \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" +\n        \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" +\n        \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" +\n        \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" +\n        \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" +\n        \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" +\n        \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" +\n        \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" +\n        \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" +\n        \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" +\n        \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\"\n    );\n    return shadow(this, \"_loadTestFont\", testFont);\n  }\n\n  _prepareFontLoadEvent(font, request) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: _prepareFontLoadEvent\");\n    }\n\n    /** Hack begin */\n    // There's currently no event when a font has finished downloading so the\n    // following code is a dirty hack to 'guess' when a font is ready.\n    // It's assumed fonts are loaded in order, so add a known test font after\n    // the desired fonts and then test for the loading of that test font.\n\n    function int32(data, offset) {\n      return (\n        (data.charCodeAt(offset) << 24) |\n        (data.charCodeAt(offset + 1) << 16) |\n        (data.charCodeAt(offset + 2) << 8) |\n        (data.charCodeAt(offset + 3) & 0xff)\n      );\n    }\n    function spliceString(s, offset, remove, insert) {\n      const chunk1 = s.substring(0, offset);\n      const chunk2 = s.substring(offset + remove);\n      return chunk1 + insert + chunk2;\n    }\n    let i, ii;\n\n    // The temporary canvas is used to determine if fonts are loaded.\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext(\"2d\");\n\n    let called = 0;\n    function isFontReady(name, callback) {\n      // With setTimeout clamping this gives the font ~100ms to load.\n      if (++called > 30) {\n        warn(\"Load test font never loaded.\");\n        callback();\n        return;\n      }\n      ctx.font = \"30px \" + name;\n      ctx.fillText(\".\", 0, 20);\n      const imageData = ctx.getImageData(0, 0, 1, 1);\n      if (imageData.data[3] > 0) {\n        callback();\n        return;\n      }\n      setTimeout(isFontReady.bind(null, name, callback));\n    }\n\n    const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n    // Chromium seems to cache fonts based on a hash of the actual font data,\n    // so the font must be modified for each load test else it will appear to\n    // be loaded already.\n    // TODO: This could maybe be made faster by avoiding the btoa of the full\n    // font by splitting it in chunks before hand and padding the font id.\n    let data = this._loadTestFont;\n    const COMMENT_OFFSET = 976; // has to be on 4 byte boundary (for checksum)\n    data = spliceString(\n      data,\n      COMMENT_OFFSET,\n      loadTestFontId.length,\n      loadTestFontId\n    );\n    // CFF checksum is important for IE, adjusting it\n    const CFF_CHECKSUM_OFFSET = 16;\n    const XXXX_VALUE = 0x58585858; // the \"comment\" filled with 'X'\n    let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n    for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n      checksum = (checksum - XXXX_VALUE + int32(loadTestFontId, i)) | 0;\n    }\n    if (i < loadTestFontId.length) {\n      // align to 4 bytes boundary\n      checksum = (checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i)) | 0;\n    }\n    data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, string32(checksum));\n\n    const url = `url(data:font/opentype;base64,${btoa(data)});`;\n    const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n    this.insertRule(rule);\n\n    const div = this._document.createElement(\"div\");\n    div.style.visibility = \"hidden\";\n    div.style.width = div.style.height = \"10px\";\n    div.style.position = \"absolute\";\n    div.style.top = div.style.left = \"0px\";\n\n    for (const name of [font.loadedName, loadTestFontId]) {\n      const span = this._document.createElement(\"span\");\n      span.textContent = \"Hi\";\n      span.style.fontFamily = name;\n      div.append(span);\n    }\n    this._document.body.append(div);\n\n    isFontReady(loadTestFontId, () => {\n      div.remove();\n      request.complete();\n    });\n    /** Hack end */\n  }\n}\n\nclass FontFaceObject {\n  constructor(\n    translatedData,\n    {\n      isEvalSupported = true,\n      disableFontFace = false,\n      ignoreErrors = false,\n      inspectFont = null,\n    }\n  ) {\n    this.compiledGlyphs = Object.create(null);\n    // importing translated data\n    for (const i in translatedData) {\n      this[i] = translatedData[i];\n    }\n    this.isEvalSupported = isEvalSupported !== false;\n    this.disableFontFace = disableFontFace === true;\n    this.ignoreErrors = ignoreErrors === true;\n    this._inspectFont = inspectFont;\n  }\n\n  createNativeFontFace() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    let nativeFontFace;\n    if (!this.cssFontInfo) {\n      nativeFontFace = new FontFace(this.loadedName, this.data, {});\n    } else {\n      const css = {\n        weight: this.cssFontInfo.fontWeight,\n      };\n      if (this.cssFontInfo.italicAngle) {\n        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n      }\n      nativeFontFace = new FontFace(\n        this.cssFontInfo.fontFamily,\n        this.data,\n        css\n      );\n    }\n\n    this._inspectFont?.(this);\n    return nativeFontFace;\n  }\n\n  createFontFaceRule() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    const data = bytesToString(this.data);\n    // Add the @font-face rule to the document.\n    const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n    let rule;\n    if (!this.cssFontInfo) {\n      rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n    } else {\n      let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n      if (this.cssFontInfo.italicAngle) {\n        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n      }\n      rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n    }\n\n    this._inspectFont?.(this, url);\n    return rule;\n  }\n\n  getPathGenerator(objs, character) {\n    if (this.compiledGlyphs[character] !== undefined) {\n      return this.compiledGlyphs[character];\n    }\n\n    let cmds;\n    try {\n      cmds = objs.get(this.loadedName + \"_path_\" + character);\n    } catch (ex) {\n      if (!this.ignoreErrors) {\n        throw ex;\n      }\n      warn(`getPathGenerator - ignoring character: \"${ex}\".`);\n\n      return (this.compiledGlyphs[character] = function (c, size) {\n        // No-op function, to allow rendering to continue.\n      });\n    }\n\n    // If we can, compile cmds into JS for MAXIMUM SPEED...\n    if (this.isEvalSupported && FeatureTest.isEvalSupported) {\n      const jsBuf = [];\n      for (const current of cmds) {\n        const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n        jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n      }\n      // eslint-disable-next-line no-new-func\n      return (this.compiledGlyphs[character] = new Function(\n        \"c\",\n        \"size\",\n        jsBuf.join(\"\")\n      ));\n    }\n    // ... but fall back on using Function.prototype.apply() if we're\n    // blocked from using eval() for whatever reason (like CSP policies).\n    return (this.compiledGlyphs[character] = function (c, size) {\n      for (const current of cmds) {\n        if (current.cmd === \"scale\") {\n          current.args = [size, -size];\n        }\n        // eslint-disable-next-line prefer-spread\n        c[current.cmd].apply(c, current.args);\n      }\n    });\n  }\n}\n\nexport { FontFaceObject, FontLoader };\n", "/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals process */\n\n// NW.js / Electron is a browser context, but copies some Node.js objects; see\n// http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context\n// https://www.electronjs.org/docs/api/process#processversionselectron-readonly\n// https://www.electronjs.org/docs/api/process#processtype-readonly\nconst isNodeJS =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n  typeof process === \"object\" &&\n  process + \"\" === \"[object process]\" &&\n  !process.versions.nw &&\n  !(process.versions.electron && process.type && process.type !== \"browser\");\n\nexport { isNodeJS };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FeatureTest,\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  OPS,\n  shadow,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  getCurrentTransform,\n  getCurrentTransformInverse,\n  PixelsPerInch,\n} from \"./display_utils.js\";\nimport {\n  getShadingPattern,\n  PathType,\n  TilingPattern,\n} from \"./pattern_helper.js\";\nimport { convertBlackAndWhiteToRGBA } from \"../shared/image_utils.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\n\n// <canvas> contexts store most of the state we need natively.\n// However, PDF needs a bit more state, which we store here.\n// Minimal font size that would be used during canvas fillText operations.\nconst MIN_FONT_SIZE = 16;\n// Maximum font size that would be used during canvas fillText operations.\nconst MAX_FONT_SIZE = 100;\nconst MAX_GROUP_SIZE = 4096;\n\n// Defines the time the `executeOperatorList`-method is going to be executing\n// before it stops and schedules a continue of execution.\nconst EXECUTION_TIME = 15; // ms\n// Defines the number of steps before checking the execution time.\nconst EXECUTION_STEPS = 10;\n\n// To disable Type3 compilation, set the value to `-1`.\nconst MAX_SIZE_TO_COMPILE = 1000;\n\nconst FULL_CHUNK_HEIGHT = 16;\n\n/**\n * Overrides certain methods on a 2d ctx so that when they are called they\n * will also call the same method on the destCtx. The methods that are\n * overridden are all the transformation state modifiers, path creation, and\n * save/restore. We only forward these specific methods because they are the\n * only state modifiers that we cannot copy over when we switch contexts.\n *\n * To remove mirroring call `ctx._removeMirroring()`.\n *\n * @param {Object} ctx - The 2d canvas context that will duplicate its calls on\n *   the destCtx.\n * @param {Object} destCtx - The 2d canvas context that will receive the\n *   forwarded calls.\n */\nfunction mirrorContextOperations(ctx, destCtx) {\n  if (ctx._removeMirroring) {\n    throw new Error(\"Context is already forwarding operations.\");\n  }\n  ctx.__originalSave = ctx.save;\n  ctx.__originalRestore = ctx.restore;\n  ctx.__originalRotate = ctx.rotate;\n  ctx.__originalScale = ctx.scale;\n  ctx.__originalTranslate = ctx.translate;\n  ctx.__originalTransform = ctx.transform;\n  ctx.__originalSetTransform = ctx.setTransform;\n  ctx.__originalResetTransform = ctx.resetTransform;\n  ctx.__originalClip = ctx.clip;\n  ctx.__originalMoveTo = ctx.moveTo;\n  ctx.__originalLineTo = ctx.lineTo;\n  ctx.__originalBezierCurveTo = ctx.bezierCurveTo;\n  ctx.__originalRect = ctx.rect;\n  ctx.__originalClosePath = ctx.closePath;\n  ctx.__originalBeginPath = ctx.beginPath;\n\n  ctx._removeMirroring = () => {\n    ctx.save = ctx.__originalSave;\n    ctx.restore = ctx.__originalRestore;\n    ctx.rotate = ctx.__originalRotate;\n    ctx.scale = ctx.__originalScale;\n    ctx.translate = ctx.__originalTranslate;\n    ctx.transform = ctx.__originalTransform;\n    ctx.setTransform = ctx.__originalSetTransform;\n    ctx.resetTransform = ctx.__originalResetTransform;\n\n    ctx.clip = ctx.__originalClip;\n    ctx.moveTo = ctx.__originalMoveTo;\n    ctx.lineTo = ctx.__originalLineTo;\n    ctx.bezierCurveTo = ctx.__originalBezierCurveTo;\n    ctx.rect = ctx.__originalRect;\n    ctx.closePath = ctx.__originalClosePath;\n    ctx.beginPath = ctx.__originalBeginPath;\n    delete ctx._removeMirroring;\n  };\n\n  ctx.save = function ctxSave() {\n    destCtx.save();\n    this.__originalSave();\n  };\n\n  ctx.restore = function ctxRestore() {\n    destCtx.restore();\n    this.__originalRestore();\n  };\n\n  ctx.translate = function ctxTranslate(x, y) {\n    destCtx.translate(x, y);\n    this.__originalTranslate(x, y);\n  };\n\n  ctx.scale = function ctxScale(x, y) {\n    destCtx.scale(x, y);\n    this.__originalScale(x, y);\n  };\n\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n    destCtx.transform(a, b, c, d, e, f);\n    this.__originalTransform(a, b, c, d, e, f);\n  };\n\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n    destCtx.setTransform(a, b, c, d, e, f);\n    this.__originalSetTransform(a, b, c, d, e, f);\n  };\n\n  ctx.resetTransform = function ctxResetTransform() {\n    destCtx.resetTransform();\n    this.__originalResetTransform();\n  };\n\n  ctx.rotate = function ctxRotate(angle) {\n    destCtx.rotate(angle);\n    this.__originalRotate(angle);\n  };\n\n  ctx.clip = function ctxRotate(rule) {\n    destCtx.clip(rule);\n    this.__originalClip(rule);\n  };\n\n  ctx.moveTo = function (x, y) {\n    destCtx.moveTo(x, y);\n    this.__originalMoveTo(x, y);\n  };\n\n  ctx.lineTo = function (x, y) {\n    destCtx.lineTo(x, y);\n    this.__originalLineTo(x, y);\n  };\n\n  ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n    destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n  };\n\n  ctx.rect = function (x, y, width, height) {\n    destCtx.rect(x, y, width, height);\n    this.__originalRect(x, y, width, height);\n  };\n\n  ctx.closePath = function () {\n    destCtx.closePath();\n    this.__originalClosePath();\n  };\n\n  ctx.beginPath = function () {\n    destCtx.beginPath();\n    this.__originalBeginPath();\n  };\n}\n\nclass CachedCanvases {\n  constructor(canvasFactory) {\n    this.canvasFactory = canvasFactory;\n    this.cache = Object.create(null);\n  }\n\n  getCanvas(id, width, height) {\n    let canvasEntry;\n    if (this.cache[id] !== undefined) {\n      canvasEntry = this.cache[id];\n      this.canvasFactory.reset(canvasEntry, width, height);\n    } else {\n      canvasEntry = this.canvasFactory.create(width, height);\n      this.cache[id] = canvasEntry;\n    }\n    return canvasEntry;\n  }\n\n  delete(id) {\n    delete this.cache[id];\n  }\n\n  clear() {\n    for (const id in this.cache) {\n      const canvasEntry = this.cache[id];\n      this.canvasFactory.destroy(canvasEntry);\n      delete this.cache[id];\n    }\n  }\n}\n\nfunction drawImageAtIntegerCoords(\n  ctx,\n  srcImg,\n  srcX,\n  srcY,\n  srcW,\n  srcH,\n  destX,\n  destY,\n  destW,\n  destH\n) {\n  const [a, b, c, d, tx, ty] = getCurrentTransform(ctx);\n  if (b === 0 && c === 0) {\n    // top-left corner is at (X, Y) and\n    // bottom-right one is at (X + width, Y + height).\n\n    // If leftX is 4.321 then it's rounded to 4.\n    // If width is 10.432 then it's rounded to 11 because\n    // rightX = leftX + width = 14.753 which is rounded to 15\n    // so after rounding the total width is 11 (15 - 4).\n    // It's why we can't just floor/ceil uniformly, it just depends\n    // on the values we've.\n\n    const tlX = destX * a + tx;\n    const rTlX = Math.round(tlX);\n    const tlY = destY * d + ty;\n    const rTlY = Math.round(tlY);\n    const brX = (destX + destW) * a + tx;\n\n    // Some pdf contains images with 1x1 images so in case of 0-width after\n    // scaling we must fallback on 1 to be sure there is something.\n    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n    const brY = (destY + destH) * d + ty;\n    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n\n    // We must apply a transformation in order to apply it on the image itself.\n    // For example if a == 1 && d == -1, it means that the image itself is\n    // mirrored w.r.t. the x-axis.\n    ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);\n    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);\n    ctx.setTransform(a, b, c, d, tx, ty);\n\n    return [rWidth, rHeight];\n  }\n\n  if (a === 0 && d === 0) {\n    // This path is taken in issue9462.pdf (page 3).\n    const tlX = destY * c + tx;\n    const rTlX = Math.round(tlX);\n    const tlY = destX * b + ty;\n    const rTlY = Math.round(tlY);\n    const brX = (destY + destH) * c + tx;\n    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n    const brY = (destX + destW) * b + ty;\n    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n\n    ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, rTlX, rTlY);\n    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);\n    ctx.setTransform(a, b, c, d, tx, ty);\n\n    return [rHeight, rWidth];\n  }\n\n  // Not a scale matrix so let the render handle the case without rounding.\n  ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);\n\n  const scaleX = Math.hypot(a, b);\n  const scaleY = Math.hypot(c, d);\n  return [scaleX * destW, scaleY * destH];\n}\n\nfunction compileType3Glyph(imgData) {\n  const { width, height } = imgData;\n  if (width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {\n    return null;\n  }\n\n  const POINT_TO_PROCESS_LIMIT = 1000;\n  const POINT_TYPES = new Uint8Array([\n    0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0,\n  ]);\n\n  const width1 = width + 1;\n  let points = new Uint8Array(width1 * (height + 1));\n  let i, j, j0;\n\n  // decodes bit-packed mask data\n  const lineSize = (width + 7) & ~7;\n  let data = new Uint8Array(lineSize * height),\n    pos = 0;\n  for (const elem of imgData.data) {\n    let mask = 128;\n    while (mask > 0) {\n      data[pos++] = elem & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n\n  // finding interesting points: every point is located between mask pixels,\n  // so there will be points of the (width + 1)x(height + 1) grid. Every point\n  // will have flags assigned based on neighboring mask pixels:\n  //   4 | 8\n  //   --P--\n  //   2 | 1\n  // We are interested only in points with the flags:\n  //   - outside corners: 1, 2, 4, 8;\n  //   - inside corners: 7, 11, 13, 14;\n  //   - and, intersections: 5, 10.\n  let count = 0;\n  pos = 0;\n  if (data[pos] !== 0) {\n    points[0] = 1;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j] = data[pos] ? 2 : 1;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j] = 2;\n    ++count;\n  }\n  for (i = 1; i < height; i++) {\n    pos = i * lineSize;\n    j0 = i * width1;\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0] = data[pos] ? 1 : 8;\n      ++count;\n    }\n    // 'sum' is the position of the current pixel configuration in the 'TYPES'\n    // array (in order 8-1-2-4, so we can use '>>2' to shift the column).\n    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n    for (j = 1; j < width; j++) {\n      sum =\n        (sum >> 2) +\n        (data[pos + 1] ? 4 : 0) +\n        (data[pos - lineSize + 1] ? 8 : 0);\n      if (POINT_TYPES[sum]) {\n        points[j0 + j] = POINT_TYPES[sum];\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0 + j] = data[pos] ? 2 : 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n  }\n\n  pos = lineSize * (height - 1);\n  j0 = i * width1;\n  if (data[pos] !== 0) {\n    points[j0] = 8;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j0 + j] = data[pos] ? 4 : 8;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j0 + j] = 4;\n    ++count;\n  }\n  if (count > POINT_TO_PROCESS_LIMIT) {\n    return null;\n  }\n\n  // building outlines\n  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n  const path = new Path2D();\n\n  for (i = 0; count && i <= height; i++) {\n    let p = i * width1;\n    const end = p + width;\n    while (p < end && !points[p]) {\n      p++;\n    }\n    if (p === end) {\n      continue;\n    }\n    path.moveTo(p % width1, i);\n\n    const p0 = p;\n    let type = points[p];\n    do {\n      const step = steps[type];\n      do {\n        p += step;\n      } while (!points[p]);\n\n      const pp = points[p];\n      if (pp !== 5 && pp !== 10) {\n        // set new direction\n        type = pp;\n        // delete mark\n        points[p] = 0;\n      } else {\n        // type is 5 or 10, ie, a crossing\n        // set new direction\n        type = pp & ((0x33 * type) >> 4);\n        // set new type for \"future hit\"\n        points[p] &= (type >> 2) | (type << 2);\n      }\n      path.lineTo(p % width1, (p / width1) | 0);\n\n      if (!points[p]) {\n        --count;\n      }\n    } while (p0 !== p);\n    --i;\n  }\n\n  // Immediately release the, potentially large, `Uint8Array`s after parsing.\n  data = null;\n  points = null;\n\n  const drawOutline = function (c) {\n    c.save();\n    // the path shall be painted in [0..1]x[0..1] space\n    c.scale(1 / width, -1 / height);\n    c.translate(0, -height);\n    c.fill(path);\n    c.beginPath();\n    c.restore();\n  };\n\n  return drawOutline;\n}\n\nclass CanvasExtraState {\n  constructor(width, height) {\n    // Are soft masks and alpha values shapes or opacities?\n    this.alphaIsShape = false;\n    this.fontSize = 0;\n    this.fontSizeScale = 1;\n    this.textMatrix = IDENTITY_MATRIX;\n    this.textMatrixScale = 1;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    // Current point (in user coordinates)\n    this.x = 0;\n    this.y = 0;\n    // Start of text line (in text coordinates)\n    this.lineX = 0;\n    this.lineY = 0;\n    // Character and word spacing\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textRise = 0;\n    // Default fore and background colors\n    this.fillColor = \"#000000\";\n    this.strokeColor = \"#000000\";\n    this.patternFill = false;\n    // Note: fill alpha applies to all non-stroking operations\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.activeSMask = null;\n    this.transferMaps = \"none\";\n\n    this.startNewPathAndClipBox([0, 0, width, height]);\n  }\n\n  clone() {\n    const clone = Object.create(this);\n    clone.clipBox = this.clipBox.slice();\n    return clone;\n  }\n\n  setCurrentPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  updatePathMinMax(transform, x, y) {\n    [x, y] = Util.applyTransform([x, y], transform);\n    this.minX = Math.min(this.minX, x);\n    this.minY = Math.min(this.minY, y);\n    this.maxX = Math.max(this.maxX, x);\n    this.maxY = Math.max(this.maxY, y);\n  }\n\n  updateRectMinMax(transform, rect) {\n    const p1 = Util.applyTransform(rect, transform);\n    const p2 = Util.applyTransform(rect.slice(2), transform);\n    this.minX = Math.min(this.minX, p1[0], p2[0]);\n    this.minY = Math.min(this.minY, p1[1], p2[1]);\n    this.maxX = Math.max(this.maxX, p1[0], p2[0]);\n    this.maxY = Math.max(this.maxY, p1[1], p2[1]);\n  }\n\n  updateScalingPathMinMax(transform, minMax) {\n    Util.scaleMinMax(transform, minMax);\n    this.minX = Math.min(this.minX, minMax[0]);\n    this.maxX = Math.max(this.maxX, minMax[1]);\n    this.minY = Math.min(this.minY, minMax[2]);\n    this.maxY = Math.max(this.maxY, minMax[3]);\n  }\n\n  updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {\n    const box = Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);\n    if (minMax) {\n      minMax[0] = Math.min(minMax[0], box[0], box[2]);\n      minMax[1] = Math.max(minMax[1], box[0], box[2]);\n      minMax[2] = Math.min(minMax[2], box[1], box[3]);\n      minMax[3] = Math.max(minMax[3], box[1], box[3]);\n      return;\n    }\n    this.updateRectMinMax(transform, box);\n  }\n\n  getPathBoundingBox(pathType = PathType.FILL, transform = null) {\n    const box = [this.minX, this.minY, this.maxX, this.maxY];\n    if (pathType === PathType.STROKE) {\n      if (!transform) {\n        unreachable(\"Stroke bounding box must include transform.\");\n      }\n      // Stroked paths can be outside of the path bounding box by 1/2 the line\n      // width.\n      const scale = Util.singularValueDecompose2dScale(transform);\n      const xStrokePad = (scale[0] * this.lineWidth) / 2;\n      const yStrokePad = (scale[1] * this.lineWidth) / 2;\n      box[0] -= xStrokePad;\n      box[1] -= yStrokePad;\n      box[2] += xStrokePad;\n      box[3] += yStrokePad;\n    }\n    return box;\n  }\n\n  updateClipFromPath() {\n    const intersect = Util.intersect(this.clipBox, this.getPathBoundingBox());\n    this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);\n  }\n\n  isEmptyClip() {\n    return this.minX === Infinity;\n  }\n\n  startNewPathAndClipBox(box) {\n    this.clipBox = box;\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = 0;\n    this.maxY = 0;\n  }\n\n  getClippedPathBoundingBox(pathType = PathType.FILL, transform = null) {\n    return Util.intersect(\n      this.clipBox,\n      this.getPathBoundingBox(pathType, transform)\n    );\n  }\n}\n\nfunction putBinaryImageData(ctx, imgData) {\n  if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n    ctx.putImageData(imgData, 0, 0);\n    return;\n  }\n\n  // Put the image data to the canvas in chunks, rather than putting the\n  // whole image at once.  This saves JS memory, because the ImageData object\n  // is smaller. It also possibly saves C++ memory within the implementation\n  // of putImageData(). (E.g. in Firefox we make two short-lived copies of\n  // the data passed to putImageData()). |n| shouldn't be too small, however,\n  // because too many putImageData() calls will slow things down.\n  //\n  // Note: as written, if the last chunk is partial, the putImageData() call\n  // will (conceptually) put pixels past the bounds of the canvas.  But\n  // that's ok; any such pixels are ignored.\n\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0,\n    destPos;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n  let i, j, thisChunkHeight, elemsInThisChunk;\n\n  // There are multiple forms in which the pixel data can be passed, and\n  // imgData.kind tells us which one this is.\n  if (imgData.kind === ImageKind.GRAYSCALE_1BPP) {\n    // Grayscale, 1 bit per pixel (i.e. black-and-white).\n    const srcLength = src.byteLength;\n    const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n    const dest32DataLength = dest32.length;\n    const fullSrcDiff = (width + 7) >> 3;\n    const white = 0xffffffff;\n    const black = FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n\n    for (i = 0; i < totalChunks; i++) {\n      thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n      destPos = 0;\n      for (j = 0; j < thisChunkHeight; j++) {\n        const srcDiff = srcLength - srcPos;\n        let k = 0;\n        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n        const kEndUnrolled = kEnd & ~7;\n        let mask = 0;\n        let srcByte = 0;\n        for (; k < kEndUnrolled; k += 8) {\n          srcByte = src[srcPos++];\n          dest32[destPos++] = srcByte & 128 ? white : black;\n          dest32[destPos++] = srcByte & 64 ? white : black;\n          dest32[destPos++] = srcByte & 32 ? white : black;\n          dest32[destPos++] = srcByte & 16 ? white : black;\n          dest32[destPos++] = srcByte & 8 ? white : black;\n          dest32[destPos++] = srcByte & 4 ? white : black;\n          dest32[destPos++] = srcByte & 2 ? white : black;\n          dest32[destPos++] = srcByte & 1 ? white : black;\n        }\n        for (; k < kEnd; k++) {\n          if (mask === 0) {\n            srcByte = src[srcPos++];\n            mask = 128;\n          }\n\n          dest32[destPos++] = srcByte & mask ? white : black;\n          mask >>= 1;\n        }\n      }\n      // We ran out of input. Make all remaining pixels transparent.\n      while (destPos < dest32DataLength) {\n        dest32[destPos++] = 0;\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else if (imgData.kind === ImageKind.RGBA_32BPP) {\n    // RGBA, 32-bits per pixel.\n    j = 0;\n    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n    for (i = 0; i < fullChunks; i++) {\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n      srcPos += elemsInThisChunk;\n\n      ctx.putImageData(chunkImgData, 0, j);\n      j += FULL_CHUNK_HEIGHT;\n    }\n    if (i < totalChunks) {\n      elemsInThisChunk = width * partialChunkHeight * 4;\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n      ctx.putImageData(chunkImgData, 0, j);\n    }\n  } else if (imgData.kind === ImageKind.RGB_24BPP) {\n    // RGB, 24-bits per pixel.\n    thisChunkHeight = FULL_CHUNK_HEIGHT;\n    elemsInThisChunk = width * thisChunkHeight;\n    for (i = 0; i < totalChunks; i++) {\n      if (i >= fullChunks) {\n        thisChunkHeight = partialChunkHeight;\n        elemsInThisChunk = width * thisChunkHeight;\n      }\n\n      destPos = 0;\n      for (j = elemsInThisChunk; j--; ) {\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = 255;\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else {\n    throw new Error(`bad image kind: ${imgData.kind}`);\n  }\n}\n\nfunction putBinaryImageMask(ctx, imgData) {\n  if (imgData.bitmap) {\n    // The bitmap has been created in the worker.\n    ctx.drawImage(imgData.bitmap, 0, 0);\n    return;\n  }\n\n  // Slow path: OffscreenCanvas isn't available in the worker.\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n\n  for (let i = 0; i < totalChunks; i++) {\n    const thisChunkHeight =\n      i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n\n    // Expand the mask so it can be used by the canvas.  Any required\n    // inversion has already been handled.\n\n    ({ srcPos } = convertBlackAndWhiteToRGBA({\n      src,\n      srcPos,\n      dest,\n      width,\n      height: thisChunkHeight,\n      nonBlackColor: 0,\n    }));\n\n    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n  }\n}\n\nfunction copyCtxState(sourceCtx, destCtx) {\n  const properties = [\n    \"strokeStyle\",\n    \"fillStyle\",\n    \"fillRule\",\n    \"globalAlpha\",\n    \"lineWidth\",\n    \"lineCap\",\n    \"lineJoin\",\n    \"miterLimit\",\n    \"globalCompositeOperation\",\n    \"font\",\n    \"filter\",\n  ];\n  for (const property of properties) {\n    if (sourceCtx[property] !== undefined) {\n      destCtx[property] = sourceCtx[property];\n    }\n  }\n  if (sourceCtx.setLineDash !== undefined) {\n    destCtx.setLineDash(sourceCtx.getLineDash());\n    destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n  }\n}\n\nfunction resetCtxToDefault(ctx) {\n  ctx.strokeStyle = ctx.fillStyle = \"#000000\";\n  ctx.fillRule = \"nonzero\";\n  ctx.globalAlpha = 1;\n  ctx.lineWidth = 1;\n  ctx.lineCap = \"butt\";\n  ctx.lineJoin = \"miter\";\n  ctx.miterLimit = 10;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.font = \"10px sans-serif\";\n  if (ctx.setLineDash !== undefined) {\n    ctx.setLineDash([]);\n    ctx.lineDashOffset = 0;\n  }\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    !isNodeJS\n  ) {\n    ctx.filter = \"none\";\n  }\n}\n\nfunction composeSMaskBackdrop(bytes, r0, g0, b0) {\n  const length = bytes.length;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = bytes[i];\n    if (alpha === 0) {\n      bytes[i - 3] = r0;\n      bytes[i - 2] = g0;\n      bytes[i - 1] = b0;\n    } else if (alpha < 255) {\n      const alpha_ = 255 - alpha;\n      bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;\n      bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;\n      bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;\n    }\n  }\n}\n\nfunction composeSMaskAlpha(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  const scale = 1 / 255;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n    layerData[i] = (layerData[i] * alpha * scale) | 0;\n  }\n}\n\nfunction composeSMaskLuminosity(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  for (let i = 3; i < length; i += 4) {\n    const y =\n      maskData[i - 3] * 77 + // * 0.3 / 255 * 0x10000\n      maskData[i - 2] * 152 + // * 0.59 ....\n      maskData[i - 1] * 28; // * 0.11 ....\n    layerData[i] = transferMap\n      ? (layerData[i] * transferMap[y >> 8]) >> 8\n      : (layerData[i] * y) >> 16;\n  }\n}\n\nfunction genericComposeSMask(\n  maskCtx,\n  layerCtx,\n  width,\n  height,\n  subtype,\n  backdrop,\n  transferMap,\n  layerOffsetX,\n  layerOffsetY,\n  maskOffsetX,\n  maskOffsetY\n) {\n  const hasBackdrop = !!backdrop;\n  const r0 = hasBackdrop ? backdrop[0] : 0;\n  const g0 = hasBackdrop ? backdrop[1] : 0;\n  const b0 = hasBackdrop ? backdrop[2] : 0;\n\n  let composeFn;\n  if (subtype === \"Luminosity\") {\n    composeFn = composeSMaskLuminosity;\n  } else {\n    composeFn = composeSMaskAlpha;\n  }\n\n  // processing image in chunks to save memory\n  const PIXELS_TO_PROCESS = 1048576;\n  const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n  for (let row = 0; row < height; row += chunkSize) {\n    const chunkHeight = Math.min(chunkSize, height - row);\n    const maskData = maskCtx.getImageData(\n      layerOffsetX - maskOffsetX,\n      row + (layerOffsetY - maskOffsetY),\n      width,\n      chunkHeight\n    );\n    const layerData = layerCtx.getImageData(\n      layerOffsetX,\n      row + layerOffsetY,\n      width,\n      chunkHeight\n    );\n\n    if (hasBackdrop) {\n      composeSMaskBackdrop(maskData.data, r0, g0, b0);\n    }\n    composeFn(maskData.data, layerData.data, transferMap);\n\n    layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);\n  }\n}\n\nfunction composeSMask(ctx, smask, layerCtx, layerBox) {\n  const layerOffsetX = layerBox[0];\n  const layerOffsetY = layerBox[1];\n  const layerWidth = layerBox[2] - layerOffsetX;\n  const layerHeight = layerBox[3] - layerOffsetY;\n  if (layerWidth === 0 || layerHeight === 0) {\n    return;\n  }\n  genericComposeSMask(\n    smask.context,\n    layerCtx,\n    layerWidth,\n    layerHeight,\n    smask.subtype,\n    smask.backdrop,\n    smask.transferMap,\n    layerOffsetX,\n    layerOffsetY,\n    smask.offsetX,\n    smask.offsetY\n  );\n  ctx.save();\n  ctx.globalAlpha = 1;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.drawImage(layerCtx.canvas, 0, 0);\n  ctx.restore();\n}\n\nfunction getImageSmoothingEnabled(transform, interpolate) {\n  const scale = Util.singularValueDecompose2dScale(transform);\n  // Round to a 32bit float so that `<=` check below will pass for numbers that\n  // are very close, but not exactly the same 64bit floats.\n  scale[0] = Math.fround(scale[0]);\n  scale[1] = Math.fround(scale[1]);\n  const actualScale = Math.fround(\n    (globalThis.devicePixelRatio || 1) * PixelsPerInch.PDF_TO_CSS_UNITS\n  );\n  if (interpolate !== undefined) {\n    // If the value is explicitly set use it.\n    return interpolate;\n  } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n    // Smooth when downscaling.\n    return true;\n  }\n  // Don't smooth when upscaling.\n  return false;\n}\n\nconst LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\nconst LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\nconst NORMAL_CLIP = {};\nconst EO_CLIP = {};\n\nclass CanvasGraphics {\n  constructor(\n    canvasCtx,\n    commonObjs,\n    objs,\n    canvasFactory,\n    filterFactory,\n    { optionalContentConfig, markedContentStack = null },\n    annotationCanvasMap,\n    pageColors\n  ) {\n    this.ctx = canvasCtx;\n    this.current = new CanvasExtraState(\n      this.ctx.canvas.width,\n      this.ctx.canvas.height\n    );\n    this.stateStack = [];\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n    this.res = null;\n    this.xobjs = null;\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.canvasFactory = canvasFactory;\n    this.filterFactory = filterFactory;\n    this.groupStack = [];\n    this.processingType3 = null;\n    // Patterns are painted relative to the initial page/form transform, see\n    // PDF spec 8.7.2 NOTE 1.\n    this.baseTransform = null;\n    this.baseTransformStack = [];\n    this.groupLevel = 0;\n    this.smaskStack = [];\n    this.smaskCounter = 0;\n    this.tempSMask = null;\n    this.suspendedCtx = null;\n    this.contentVisible = true;\n    this.markedContentStack = markedContentStack || [];\n    this.optionalContentConfig = optionalContentConfig;\n    this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n    this.cachedPatterns = new Map();\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.viewportScale = 1;\n    this.outputScaleX = 1;\n    this.outputScaleY = 1;\n    this.pageColors = pageColors;\n\n    this._cachedScaleForStroking = [-1, 0];\n    this._cachedGetSinglePixelWidth = null;\n    this._cachedBitmapsMap = new Map();\n  }\n\n  getObject(data, fallback = null) {\n    if (typeof data === \"string\") {\n      return data.startsWith(\"g_\")\n        ? this.commonObjs.get(data)\n        : this.objs.get(data);\n    }\n    return fallback;\n  }\n\n  beginDrawing({\n    transform,\n    viewport,\n    transparency = false,\n    background = null,\n  }) {\n    // For pdfs that use blend modes we have to clear the canvas else certain\n    // blend modes can look wrong since we'd be blending with a white\n    // backdrop. The problem with a transparent backdrop though is we then\n    // don't get sub pixel anti aliasing on text, creating temporary\n    // transparent canvas when we have blend modes.\n    const width = this.ctx.canvas.width;\n    const height = this.ctx.canvas.height;\n\n    const savedFillStyle = this.ctx.fillStyle;\n    this.ctx.fillStyle = background || \"#ffffff\";\n    this.ctx.fillRect(0, 0, width, height);\n    this.ctx.fillStyle = savedFillStyle;\n\n    if (transparency) {\n      const transparentCanvas = this.cachedCanvases.getCanvas(\n        \"transparent\",\n        width,\n        height\n      );\n      this.compositeCtx = this.ctx;\n      this.transparentCanvas = transparentCanvas.canvas;\n      this.ctx = transparentCanvas.context;\n      this.ctx.save();\n      // The transform can be applied before rendering, transferring it to\n      // the new canvas.\n      this.ctx.transform(...getCurrentTransform(this.compositeCtx));\n    }\n\n    this.ctx.save();\n    resetCtxToDefault(this.ctx);\n    if (transform) {\n      this.ctx.transform(...transform);\n      this.outputScaleX = transform[0];\n      this.outputScaleY = transform[0];\n    }\n    this.ctx.transform(...viewport.transform);\n    this.viewportScale = viewport.scale;\n\n    this.baseTransform = getCurrentTransform(this.ctx);\n  }\n\n  executeOperatorList(\n    operatorList,\n    executionStartIdx,\n    continueCallback,\n    stepper\n  ) {\n    const argsArray = operatorList.argsArray;\n    const fnArray = operatorList.fnArray;\n    let i = executionStartIdx || 0;\n    const argsArrayLen = argsArray.length;\n\n    // Sometimes the OperatorList to execute is empty.\n    if (argsArrayLen === i) {\n      return i;\n    }\n\n    const chunkOperations =\n      argsArrayLen - i > EXECUTION_STEPS &&\n      typeof continueCallback === \"function\";\n    const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n    let steps = 0;\n\n    const commonObjs = this.commonObjs;\n    const objs = this.objs;\n    let fnId;\n\n    while (true) {\n      if (stepper !== undefined && i === stepper.nextBreakPoint) {\n        stepper.breakIt(i, continueCallback);\n        return i;\n      }\n\n      fnId = fnArray[i];\n\n      if (fnId !== OPS.dependency) {\n        // eslint-disable-next-line prefer-spread\n        this[fnId].apply(this, argsArray[i]);\n      } else {\n        for (const depObjId of argsArray[i]) {\n          const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n          // If the promise isn't resolved yet, add the continueCallback\n          // to the promise and bail out.\n          if (!objsPool.has(depObjId)) {\n            objsPool.get(depObjId, continueCallback);\n            return i;\n          }\n        }\n      }\n\n      i++;\n\n      // If the entire operatorList was executed, stop as were done.\n      if (i === argsArrayLen) {\n        return i;\n      }\n\n      // If the execution took longer then a certain amount of time and\n      // `continueCallback` is specified, interrupt the execution.\n      if (chunkOperations && ++steps > EXECUTION_STEPS) {\n        if (Date.now() > endTime) {\n          continueCallback();\n          return i;\n        }\n        steps = 0;\n      }\n\n      // If the operatorList isn't executed completely yet OR the execution\n      // time was short enough, do another execution round.\n    }\n  }\n\n  #restoreInitialState() {\n    // Finishing all opened operations such as SMask group painting.\n    while (this.stateStack.length || this.inSMaskMode) {\n      this.restore();\n    }\n\n    this.ctx.restore();\n\n    if (this.transparentCanvas) {\n      this.ctx = this.compositeCtx;\n      this.ctx.save();\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Avoid apply transform twice\n      this.ctx.drawImage(this.transparentCanvas, 0, 0);\n      this.ctx.restore();\n      this.transparentCanvas = null;\n    }\n  }\n\n  endDrawing() {\n    this.#restoreInitialState();\n\n    this.cachedCanvases.clear();\n    this.cachedPatterns.clear();\n\n    for (const cache of this._cachedBitmapsMap.values()) {\n      for (const canvas of cache.values()) {\n        if (\n          typeof HTMLCanvasElement !== \"undefined\" &&\n          canvas instanceof HTMLCanvasElement\n        ) {\n          canvas.width = canvas.height = 0;\n        }\n      }\n      cache.clear();\n    }\n    this._cachedBitmapsMap.clear();\n    this.#drawFilter();\n  }\n\n  #drawFilter() {\n    if (this.pageColors) {\n      const hcmFilterId = this.filterFactory.addHCMFilter(\n        this.pageColors.foreground,\n        this.pageColors.background\n      );\n      if (hcmFilterId !== \"none\") {\n        const savedFilter = this.ctx.filter;\n        this.ctx.filter = hcmFilterId;\n        this.ctx.drawImage(this.ctx.canvas, 0, 0);\n        this.ctx.filter = savedFilter;\n      }\n    }\n  }\n\n  _scaleImage(img, inverseTransform) {\n    // Vertical or horizontal scaling shall not be more than 2 to not lose the\n    // pixels during drawImage operation, painting on the temporary canvas(es)\n    // that are twice smaller in size.\n    const width = img.width;\n    const height = img.height;\n    let widthScale = Math.max(\n      Math.hypot(inverseTransform[0], inverseTransform[1]),\n      1\n    );\n    let heightScale = Math.max(\n      Math.hypot(inverseTransform[2], inverseTransform[3]),\n      1\n    );\n\n    let paintWidth = width,\n      paintHeight = height;\n    let tmpCanvasId = \"prescale1\";\n    let tmpCanvas, tmpCtx;\n    while (\n      (widthScale > 2 && paintWidth > 1) ||\n      (heightScale > 2 && paintHeight > 1)\n    ) {\n      let newWidth = paintWidth,\n        newHeight = paintHeight;\n      if (widthScale > 2 && paintWidth > 1) {\n        // See bug 1820511 (Windows specific bug).\n        // TODO: once the above bug is fixed we could revert to:\n        // newWidth = Math.ceil(paintWidth / 2);\n        newWidth =\n          paintWidth >= 16384\n            ? Math.floor(paintWidth / 2) - 1 || 1\n            : Math.ceil(paintWidth / 2);\n        widthScale /= paintWidth / newWidth;\n      }\n      if (heightScale > 2 && paintHeight > 1) {\n        // TODO: see the comment above.\n        newHeight =\n          paintHeight >= 16384\n            ? Math.floor(paintHeight / 2) - 1 || 1\n            : Math.ceil(paintHeight) / 2;\n        heightScale /= paintHeight / newHeight;\n      }\n      tmpCanvas = this.cachedCanvases.getCanvas(\n        tmpCanvasId,\n        newWidth,\n        newHeight\n      );\n      tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, newWidth, newHeight);\n      tmpCtx.drawImage(\n        img,\n        0,\n        0,\n        paintWidth,\n        paintHeight,\n        0,\n        0,\n        newWidth,\n        newHeight\n      );\n      img = tmpCanvas.canvas;\n      paintWidth = newWidth;\n      paintHeight = newHeight;\n      tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n    }\n    return {\n      img,\n      paintWidth,\n      paintHeight,\n    };\n  }\n\n  _createMaskCanvas(img) {\n    const ctx = this.ctx;\n    const { width, height } = img;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    const currentTransform = getCurrentTransform(ctx);\n\n    let cache, cacheKey, scaled, maskCanvas;\n    if ((img.bitmap || img.data) && img.count > 1) {\n      const mainKey = img.bitmap || img.data.buffer;\n      // We're reusing the same image several times, so we can cache it.\n      // In case we've a pattern fill we just keep the scaled version of\n      // the image.\n      // Only the scaling part matters, the translation part is just used\n      // to compute offsets (but not when filling patterns see #15573).\n      // TODO: handle the case of a pattern fill if it's possible.\n      cacheKey = JSON.stringify(\n        isPatternFill\n          ? currentTransform\n          : [currentTransform.slice(0, 4), fillColor]\n      );\n\n      cache = this._cachedBitmapsMap.get(mainKey);\n      if (!cache) {\n        cache = new Map();\n        this._cachedBitmapsMap.set(mainKey, cache);\n      }\n      const cachedImage = cache.get(cacheKey);\n      if (cachedImage && !isPatternFill) {\n        const offsetX = Math.round(\n          Math.min(currentTransform[0], currentTransform[2]) +\n            currentTransform[4]\n        );\n        const offsetY = Math.round(\n          Math.min(currentTransform[1], currentTransform[3]) +\n            currentTransform[5]\n        );\n        return {\n          canvas: cachedImage,\n          offsetX,\n          offsetY,\n        };\n      }\n      scaled = cachedImage;\n    }\n\n    if (!scaled) {\n      maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n      putBinaryImageMask(maskCanvas.context, img);\n    }\n\n    // Create the mask canvas at the size it will be drawn at and also set\n    // its transform to match the current transform so if there are any\n    // patterns applied they will be applied relative to the correct\n    // transform.\n\n    let maskToCanvas = Util.transform(currentTransform, [\n      1 / width,\n      0,\n      0,\n      -1 / height,\n      0,\n      0,\n    ]);\n    maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n    const cord1 = Util.applyTransform([0, 0], maskToCanvas);\n    const cord2 = Util.applyTransform([width, height], maskToCanvas);\n    const rect = Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n    const drawnWidth = Math.round(rect[2] - rect[0]) || 1;\n    const drawnHeight = Math.round(rect[3] - rect[1]) || 1;\n    const fillCanvas = this.cachedCanvases.getCanvas(\n      \"fillCanvas\",\n      drawnWidth,\n      drawnHeight\n    );\n    const fillCtx = fillCanvas.context;\n\n    // The offset will be the top-left cordinate mask.\n    // If objToCanvas is [a,b,c,d,e,f] then:\n    //   - offsetX = min(a, c) + e\n    //   - offsetY = min(b, d) + f\n    const offsetX = Math.min(cord1[0], cord2[0]);\n    const offsetY = Math.min(cord1[1], cord2[1]);\n    fillCtx.translate(-offsetX, -offsetY);\n    fillCtx.transform(...maskToCanvas);\n\n    if (!scaled) {\n      // Pre-scale if needed to improve image smoothing.\n      scaled = this._scaleImage(\n        maskCanvas.canvas,\n        getCurrentTransformInverse(fillCtx)\n      );\n      scaled = scaled.img;\n      if (cache && isPatternFill) {\n        cache.set(cacheKey, scaled);\n      }\n    }\n\n    fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      getCurrentTransform(fillCtx),\n      img.interpolate\n    );\n\n    drawImageAtIntegerCoords(\n      fillCtx,\n      scaled,\n      0,\n      0,\n      scaled.width,\n      scaled.height,\n      0,\n      0,\n      width,\n      height\n    );\n    fillCtx.globalCompositeOperation = \"source-in\";\n\n    const inverse = Util.transform(getCurrentTransformInverse(fillCtx), [\n      1,\n      0,\n      0,\n      1,\n      -offsetX,\n      -offsetY,\n    ]);\n    fillCtx.fillStyle = isPatternFill\n      ? fillColor.getPattern(ctx, this, inverse, PathType.FILL)\n      : fillColor;\n\n    fillCtx.fillRect(0, 0, width, height);\n\n    if (cache && !isPatternFill) {\n      // The fill canvas is put in the cache associated to the mask image\n      // so we must remove from the cached canvas: it mustn't be used again.\n      this.cachedCanvases.delete(\"fillCanvas\");\n      cache.set(cacheKey, fillCanvas.canvas);\n    }\n\n    // Round the offsets to avoid drawing fractional pixels.\n    return {\n      canvas: fillCanvas.canvas,\n      offsetX: Math.round(offsetX),\n      offsetY: Math.round(offsetY),\n    };\n  }\n\n  // Graphics state\n  setLineWidth(width) {\n    if (width !== this.current.lineWidth) {\n      this._cachedScaleForStroking[0] = -1;\n    }\n    this.current.lineWidth = width;\n    this.ctx.lineWidth = width;\n  }\n\n  setLineCap(style) {\n    this.ctx.lineCap = LINE_CAP_STYLES[style];\n  }\n\n  setLineJoin(style) {\n    this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n  }\n\n  setMiterLimit(limit) {\n    this.ctx.miterLimit = limit;\n  }\n\n  setDash(dashArray, dashPhase) {\n    const ctx = this.ctx;\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash(dashArray);\n      ctx.lineDashOffset = dashPhase;\n    }\n  }\n\n  setRenderingIntent(intent) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setFlatness(flatness) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setGState(states) {\n    for (const [key, value] of states) {\n      switch (key) {\n        case \"LW\":\n          this.setLineWidth(value);\n          break;\n        case \"LC\":\n          this.setLineCap(value);\n          break;\n        case \"LJ\":\n          this.setLineJoin(value);\n          break;\n        case \"ML\":\n          this.setMiterLimit(value);\n          break;\n        case \"D\":\n          this.setDash(value[0], value[1]);\n          break;\n        case \"RI\":\n          this.setRenderingIntent(value);\n          break;\n        case \"FL\":\n          this.setFlatness(value);\n          break;\n        case \"Font\":\n          this.setFont(value[0], value[1]);\n          break;\n        case \"CA\":\n          this.current.strokeAlpha = value;\n          break;\n        case \"ca\":\n          this.current.fillAlpha = value;\n          this.ctx.globalAlpha = value;\n          break;\n        case \"BM\":\n          this.ctx.globalCompositeOperation = value;\n          break;\n        case \"SMask\":\n          this.current.activeSMask = value ? this.tempSMask : null;\n          this.tempSMask = null;\n          this.checkSMaskState();\n          break;\n        case \"TR\":\n          this.ctx.filter = this.current.transferMaps =\n            this.filterFactory.addFilter(value);\n          break;\n      }\n    }\n  }\n\n  get inSMaskMode() {\n    return !!this.suspendedCtx;\n  }\n\n  checkSMaskState() {\n    const inSMaskMode = this.inSMaskMode;\n    if (this.current.activeSMask && !inSMaskMode) {\n      this.beginSMaskMode();\n    } else if (!this.current.activeSMask && inSMaskMode) {\n      this.endSMaskMode();\n    }\n    // Else, the state is okay and nothing needs to be done.\n  }\n\n  /**\n   * Soft mask mode takes the current main drawing canvas and replaces it with\n   * a temporary canvas. Any drawing operations that happen on the temporary\n   * canvas need to be composed with the main canvas that was suspended (see\n   * `compose()`). The temporary canvas also duplicates many of its operations\n   * on the suspended canvas to keep them in sync, so that when the soft mask\n   * mode ends any clipping paths or transformations will still be active and in\n   * the right order on the canvas' graphics state stack.\n   */\n  beginSMaskMode() {\n    if (this.inSMaskMode) {\n      throw new Error(\"beginSMaskMode called while already in smask mode\");\n    }\n    const drawnWidth = this.ctx.canvas.width;\n    const drawnHeight = this.ctx.canvas.height;\n    const cacheId = \"smaskGroupAt\" + this.groupLevel;\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight\n    );\n    this.suspendedCtx = this.ctx;\n    this.ctx = scratchCanvas.context;\n    const ctx = this.ctx;\n    ctx.setTransform(...getCurrentTransform(this.suspendedCtx));\n    copyCtxState(this.suspendedCtx, ctx);\n    mirrorContextOperations(ctx, this.suspendedCtx);\n\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n  }\n\n  endSMaskMode() {\n    if (!this.inSMaskMode) {\n      throw new Error(\"endSMaskMode called while not in smask mode\");\n    }\n    // The soft mask is done, now restore the suspended canvas as the main\n    // drawing canvas.\n    this.ctx._removeMirroring();\n    copyCtxState(this.ctx, this.suspendedCtx);\n    this.ctx = this.suspendedCtx;\n\n    this.suspendedCtx = null;\n  }\n\n  compose(dirtyBox) {\n    if (!this.current.activeSMask) {\n      return;\n    }\n\n    if (!dirtyBox) {\n      dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];\n    } else {\n      dirtyBox[0] = Math.floor(dirtyBox[0]);\n      dirtyBox[1] = Math.floor(dirtyBox[1]);\n      dirtyBox[2] = Math.ceil(dirtyBox[2]);\n      dirtyBox[3] = Math.ceil(dirtyBox[3]);\n    }\n    const smask = this.current.activeSMask;\n    const suspendedCtx = this.suspendedCtx;\n\n    composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);\n    // Whatever was drawn has been moved to the suspended canvas, now clear it\n    // out of the current canvas.\n    this.ctx.save();\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.restore();\n  }\n\n  save() {\n    if (this.inSMaskMode) {\n      // SMask mode may be turned on/off causing us to lose graphics state.\n      // Copy the temporary canvas state to the main(suspended) canvas to keep\n      // it in sync.\n      copyCtxState(this.ctx, this.suspendedCtx);\n      // Don't bother calling save on the temporary canvas since state is not\n      // saved there.\n      this.suspendedCtx.save();\n    } else {\n      this.ctx.save();\n    }\n    const old = this.current;\n    this.stateStack.push(old);\n    this.current = old.clone();\n  }\n\n  restore() {\n    if (this.stateStack.length === 0 && this.inSMaskMode) {\n      this.endSMaskMode();\n    }\n    if (this.stateStack.length !== 0) {\n      this.current = this.stateStack.pop();\n      if (this.inSMaskMode) {\n        // Graphics state is stored on the main(suspended) canvas. Restore its\n        // state then copy it over to the temporary canvas.\n        this.suspendedCtx.restore();\n        copyCtxState(this.suspendedCtx, this.ctx);\n      } else {\n        this.ctx.restore();\n      }\n      this.checkSMaskState();\n\n      // Ensure that the clipping path is reset (fixes issue6413.pdf).\n      this.pendingClip = null;\n\n      this._cachedScaleForStroking[0] = -1;\n      this._cachedGetSinglePixelWidth = null;\n    }\n  }\n\n  transform(a, b, c, d, e, f) {\n    this.ctx.transform(a, b, c, d, e, f);\n\n    this._cachedScaleForStroking[0] = -1;\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  // Path\n  constructPath(ops, args, minMax) {\n    const ctx = this.ctx;\n    const current = this.current;\n    let x = current.x,\n      y = current.y;\n    let startX, startY;\n    const currentTransform = getCurrentTransform(ctx);\n\n    // Most of the time the current transform is a scaling matrix\n    // so we don't need to transform points before computing min/max:\n    // we can compute min/max first and then smartly \"apply\" the\n    // transform (see Util.scaleMinMax).\n    // For rectangle, moveTo and lineTo, min/max are computed in the\n    // worker (see evaluator.js).\n    const isScalingMatrix =\n      (currentTransform[0] === 0 && currentTransform[3] === 0) ||\n      (currentTransform[1] === 0 && currentTransform[2] === 0);\n    const minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;\n\n    for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n      switch (ops[i] | 0) {\n        case OPS.rectangle:\n          x = args[j++];\n          y = args[j++];\n          const width = args[j++];\n          const height = args[j++];\n\n          const xw = x + width;\n          const yh = y + height;\n          ctx.moveTo(x, y);\n          if (width === 0 || height === 0) {\n            ctx.lineTo(xw, yh);\n          } else {\n            ctx.lineTo(xw, y);\n            ctx.lineTo(xw, yh);\n            ctx.lineTo(x, yh);\n          }\n          if (!isScalingMatrix) {\n            current.updateRectMinMax(currentTransform, [x, y, xw, yh]);\n          }\n          ctx.closePath();\n          break;\n        case OPS.moveTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.moveTo(x, y);\n          if (!isScalingMatrix) {\n            current.updatePathMinMax(currentTransform, x, y);\n          }\n          break;\n        case OPS.lineTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.lineTo(x, y);\n          if (!isScalingMatrix) {\n            current.updatePathMinMax(currentTransform, x, y);\n          }\n          break;\n        case OPS.curveTo:\n          startX = x;\n          startY = y;\n          x = args[j + 4];\n          y = args[j + 5];\n          ctx.bezierCurveTo(\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y\n          );\n          current.updateCurvePathMinMax(\n            currentTransform,\n            startX,\n            startY,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y,\n            minMaxForBezier\n          );\n          j += 6;\n          break;\n        case OPS.curveTo2:\n          startX = x;\n          startY = y;\n          ctx.bezierCurveTo(\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3]\n          );\n          current.updateCurvePathMinMax(\n            currentTransform,\n            startX,\n            startY,\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            minMaxForBezier\n          );\n          x = args[j + 2];\n          y = args[j + 3];\n          j += 4;\n          break;\n        case OPS.curveTo3:\n          startX = x;\n          startY = y;\n          x = args[j + 2];\n          y = args[j + 3];\n          ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n          current.updateCurvePathMinMax(\n            currentTransform,\n            startX,\n            startY,\n            args[j],\n            args[j + 1],\n            x,\n            y,\n            x,\n            y,\n            minMaxForBezier\n          );\n          j += 4;\n          break;\n        case OPS.closePath:\n          ctx.closePath();\n          break;\n      }\n    }\n\n    if (isScalingMatrix) {\n      current.updateScalingPathMinMax(currentTransform, minMaxForBezier);\n    }\n\n    current.setCurrentPoint(x, y);\n  }\n\n  closePath() {\n    this.ctx.closePath();\n  }\n\n  stroke(consumePath = true) {\n    const ctx = this.ctx;\n    const strokeColor = this.current.strokeColor;\n    // For stroke we want to temporarily change the global alpha to the\n    // stroking alpha.\n    ctx.globalAlpha = this.current.strokeAlpha;\n    if (this.contentVisible) {\n      if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n        ctx.save();\n        ctx.strokeStyle = strokeColor.getPattern(\n          ctx,\n          this,\n          getCurrentTransformInverse(ctx),\n          PathType.STROKE\n        );\n        this.rescaleAndStroke(/* saveRestore */ false);\n        ctx.restore();\n      } else {\n        this.rescaleAndStroke(/* saveRestore */ true);\n      }\n    }\n    if (consumePath) {\n      this.consumePath(this.current.getClippedPathBoundingBox());\n    }\n    // Restore the global alpha to the fill alpha\n    ctx.globalAlpha = this.current.fillAlpha;\n  }\n\n  closeStroke() {\n    this.closePath();\n    this.stroke();\n  }\n\n  fill(consumePath = true) {\n    const ctx = this.ctx;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    let needRestore = false;\n\n    if (isPatternFill) {\n      ctx.save();\n      ctx.fillStyle = fillColor.getPattern(\n        ctx,\n        this,\n        getCurrentTransformInverse(ctx),\n        PathType.FILL\n      );\n      needRestore = true;\n    }\n\n    const intersect = this.current.getClippedPathBoundingBox();\n    if (this.contentVisible && intersect !== null) {\n      if (this.pendingEOFill) {\n        ctx.fill(\"evenodd\");\n        this.pendingEOFill = false;\n      } else {\n        ctx.fill();\n      }\n    }\n\n    if (needRestore) {\n      ctx.restore();\n    }\n    if (consumePath) {\n      this.consumePath(intersect);\n    }\n  }\n\n  eoFill() {\n    this.pendingEOFill = true;\n    this.fill();\n  }\n\n  fillStroke() {\n    this.fill(false);\n    this.stroke(false);\n\n    this.consumePath();\n  }\n\n  eoFillStroke() {\n    this.pendingEOFill = true;\n    this.fillStroke();\n  }\n\n  closeFillStroke() {\n    this.closePath();\n    this.fillStroke();\n  }\n\n  closeEOFillStroke() {\n    this.pendingEOFill = true;\n    this.closePath();\n    this.fillStroke();\n  }\n\n  endPath() {\n    this.consumePath();\n  }\n\n  // Clipping\n  clip() {\n    this.pendingClip = NORMAL_CLIP;\n  }\n\n  eoClip() {\n    this.pendingClip = EO_CLIP;\n  }\n\n  // Text\n  beginText() {\n    this.current.textMatrix = IDENTITY_MATRIX;\n    this.current.textMatrixScale = 1;\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  endText() {\n    const paths = this.pendingTextPaths;\n    const ctx = this.ctx;\n    if (paths === undefined) {\n      ctx.beginPath();\n      return;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    for (const path of paths) {\n      ctx.setTransform(...path.transform);\n      ctx.translate(path.x, path.y);\n      path.addToPath(ctx, path.fontSize);\n    }\n    ctx.restore();\n    ctx.clip();\n    ctx.beginPath();\n    delete this.pendingTextPaths;\n  }\n\n  setCharSpacing(spacing) {\n    this.current.charSpacing = spacing;\n  }\n\n  setWordSpacing(spacing) {\n    this.current.wordSpacing = spacing;\n  }\n\n  setHScale(scale) {\n    this.current.textHScale = scale / 100;\n  }\n\n  setLeading(leading) {\n    this.current.leading = -leading;\n  }\n\n  setFont(fontRefName, size) {\n    const fontObj = this.commonObjs.get(fontRefName);\n    const current = this.current;\n\n    if (!fontObj) {\n      throw new Error(`Can't find font for ${fontRefName}`);\n    }\n    current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n    // A valid matrix needs all main diagonal elements to be non-zero\n    // This also ensures we bypass FF bugzilla bug #719844.\n    if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n      warn(\"Invalid font matrix for font \" + fontRefName);\n    }\n\n    // The spec for Tf (setFont) says that 'size' specifies the font 'scale',\n    // and in some docs this can be negative (inverted x-y axes).\n    if (size < 0) {\n      size = -size;\n      current.fontDirection = -1;\n    } else {\n      current.fontDirection = 1;\n    }\n\n    this.current.font = fontObj;\n    this.current.fontSize = size;\n\n    if (fontObj.isType3Font) {\n      return; // we don't need ctx.font for Type3 fonts\n    }\n\n    const name = fontObj.loadedName || \"sans-serif\";\n    const typeface =\n      fontObj.systemFontInfo?.css || `\"${name}\", ${fontObj.fallbackName}`;\n\n    let bold = \"normal\";\n    if (fontObj.black) {\n      bold = \"900\";\n    } else if (fontObj.bold) {\n      bold = \"bold\";\n    }\n    const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n    // Some font backends cannot handle fonts below certain size.\n    // Keeping the font at minimal size and using the fontSizeScale to change\n    // the current transformation matrix before the fillText/strokeText.\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=726227\n    let browserFontSize = size;\n    if (size < MIN_FONT_SIZE) {\n      browserFontSize = MIN_FONT_SIZE;\n    } else if (size > MAX_FONT_SIZE) {\n      browserFontSize = MAX_FONT_SIZE;\n    }\n    this.current.fontSizeScale = size / browserFontSize;\n\n    this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n  }\n\n  setTextRenderingMode(mode) {\n    this.current.textRenderingMode = mode;\n  }\n\n  setTextRise(rise) {\n    this.current.textRise = rise;\n  }\n\n  moveText(x, y) {\n    this.current.x = this.current.lineX += x;\n    this.current.y = this.current.lineY += y;\n  }\n\n  setLeadingMoveText(x, y) {\n    this.setLeading(-y);\n    this.moveText(x, y);\n  }\n\n  setTextMatrix(a, b, c, d, e, f) {\n    this.current.textMatrix = [a, b, c, d, e, f];\n    this.current.textMatrixScale = Math.hypot(a, b);\n\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  nextLine() {\n    this.moveText(0, this.current.leading);\n  }\n\n  paintChar(character, x, y, patternTransform) {\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const textRenderingMode = current.textRenderingMode;\n    const fontSize = current.fontSize / current.fontSizeScale;\n    const fillStrokeMode =\n      textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n    const isAddToPathSet = !!(\n      textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG\n    );\n    const patternFill = current.patternFill && !font.missingFile;\n\n    let addToPath;\n    if (font.disableFontFace || isAddToPathSet || patternFill) {\n      addToPath = font.getPathGenerator(this.commonObjs, character);\n    }\n\n    if (font.disableFontFace || patternFill) {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.beginPath();\n      addToPath(ctx, fontSize);\n      if (patternTransform) {\n        ctx.setTransform(...patternTransform);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fill();\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.stroke();\n      }\n      ctx.restore();\n    } else {\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fillText(character, x, y);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.strokeText(character, x, y);\n      }\n    }\n\n    if (isAddToPathSet) {\n      const paths = (this.pendingTextPaths ||= []);\n      paths.push({\n        transform: getCurrentTransform(ctx),\n        x,\n        y,\n        fontSize,\n        addToPath,\n      });\n    }\n  }\n\n  get isFontSubpixelAAEnabled() {\n    // Checks if anti-aliasing is enabled when scaled text is painted.\n    // On Windows GDI scaled fonts looks bad.\n    const { context: ctx } = this.cachedCanvases.getCanvas(\n      \"isFontSubpixelAAEnabled\",\n      10,\n      10\n    );\n    ctx.scale(1.5, 1);\n    ctx.fillText(\"I\", 0, 10);\n    const data = ctx.getImageData(0, 0, 10, 10).data;\n    let enabled = false;\n    for (let i = 3; i < data.length; i += 4) {\n      if (data[i] > 0 && data[i] < 255) {\n        enabled = true;\n        break;\n      }\n    }\n    return shadow(this, \"isFontSubpixelAAEnabled\", enabled);\n  }\n\n  showText(glyphs) {\n    const current = this.current;\n    const font = current.font;\n    if (font.isType3Font) {\n      return this.showType3Text(glyphs);\n    }\n\n    const fontSize = current.fontSize;\n    if (fontSize === 0) {\n      return undefined;\n    }\n\n    const ctx = this.ctx;\n    const fontSizeScale = current.fontSizeScale;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const fontDirection = current.fontDirection;\n    const textHScale = current.textHScale * fontDirection;\n    const glyphsLength = glyphs.length;\n    const vertical = font.vertical;\n    const spacingDir = vertical ? 1 : -1;\n    const defaultVMetrics = font.defaultVMetrics;\n    const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n    const simpleFillText =\n      current.textRenderingMode === TextRenderingMode.FILL &&\n      !font.disableFontFace &&\n      !current.patternFill;\n\n    ctx.save();\n    ctx.transform(...current.textMatrix);\n    ctx.translate(current.x, current.y + current.textRise);\n\n    if (fontDirection > 0) {\n      ctx.scale(textHScale, -1);\n    } else {\n      ctx.scale(textHScale, 1);\n    }\n\n    let patternTransform;\n    if (current.patternFill) {\n      ctx.save();\n      const pattern = current.fillColor.getPattern(\n        ctx,\n        this,\n        getCurrentTransformInverse(ctx),\n        PathType.FILL\n      );\n      patternTransform = getCurrentTransform(ctx);\n      ctx.restore();\n      ctx.fillStyle = pattern;\n    }\n\n    let lineWidth = current.lineWidth;\n    const scale = current.textMatrixScale;\n    if (scale === 0 || lineWidth === 0) {\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        lineWidth = this.getSinglePixelWidth();\n      }\n    } else {\n      lineWidth /= scale;\n    }\n\n    if (fontSizeScale !== 1.0) {\n      ctx.scale(fontSizeScale, fontSizeScale);\n      lineWidth /= fontSizeScale;\n    }\n\n    ctx.lineWidth = lineWidth;\n\n    if (font.isInvalidPDFjsFont) {\n      const chars = [];\n      let width = 0;\n      for (const glyph of glyphs) {\n        chars.push(glyph.unicode);\n        width += glyph.width;\n      }\n      ctx.fillText(chars.join(\"\"), 0, 0);\n      current.x += width * widthAdvanceScale * textHScale;\n      ctx.restore();\n      this.compose();\n\n      return undefined;\n    }\n\n    let x = 0,\n      i;\n    for (i = 0; i < glyphsLength; ++i) {\n      const glyph = glyphs[i];\n      if (typeof glyph === \"number\") {\n        x += (spacingDir * glyph * fontSize) / 1000;\n        continue;\n      }\n\n      let restoreNeeded = false;\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const character = glyph.fontChar;\n      const accent = glyph.accent;\n      let scaledX, scaledY;\n      let width = glyph.width;\n      if (vertical) {\n        const vmetric = glyph.vmetric || defaultVMetrics;\n        const vx =\n          -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n        const vy = vmetric[2] * widthAdvanceScale;\n\n        width = vmetric ? -vmetric[0] : width;\n        scaledX = vx / fontSizeScale;\n        scaledY = (x + vy) / fontSizeScale;\n      } else {\n        scaledX = x / fontSizeScale;\n        scaledY = 0;\n      }\n\n      if (font.remeasure && width > 0) {\n        // Some standard fonts may not have the exact width: rescale per\n        // character if measured width is greater than expected glyph width\n        // and subpixel-aa is enabled, otherwise just center the glyph.\n        const measuredWidth =\n          ((ctx.measureText(character).width * 1000) / fontSize) *\n          fontSizeScale;\n        if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n          const characterScaleX = width / measuredWidth;\n          restoreNeeded = true;\n          ctx.save();\n          ctx.scale(characterScaleX, 1);\n          scaledX /= characterScaleX;\n        } else if (width !== measuredWidth) {\n          scaledX +=\n            (((width - measuredWidth) / 2000) * fontSize) / fontSizeScale;\n        }\n      }\n\n      // Only attempt to draw the glyph if it is actually in the embedded font\n      // file or if there isn't a font file so the fallback font is shown.\n      if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n        if (simpleFillText && !accent) {\n          // common case\n          ctx.fillText(character, scaledX, scaledY);\n        } else {\n          this.paintChar(character, scaledX, scaledY, patternTransform);\n          if (accent) {\n            const scaledAccentX =\n              scaledX + (fontSize * accent.offset.x) / fontSizeScale;\n            const scaledAccentY =\n              scaledY - (fontSize * accent.offset.y) / fontSizeScale;\n            this.paintChar(\n              accent.fontChar,\n              scaledAccentX,\n              scaledAccentY,\n              patternTransform\n            );\n          }\n        }\n      }\n\n      let charWidth;\n      if (vertical) {\n        charWidth = width * widthAdvanceScale - spacing * fontDirection;\n      } else {\n        charWidth = width * widthAdvanceScale + spacing * fontDirection;\n      }\n      x += charWidth;\n\n      if (restoreNeeded) {\n        ctx.restore();\n      }\n    }\n    if (vertical) {\n      current.y -= x;\n    } else {\n      current.x += x * textHScale;\n    }\n    ctx.restore();\n    this.compose();\n\n    return undefined;\n  }\n\n  showType3Text(glyphs) {\n    // Type3 fonts - each glyph is a \"mini-PDF\"\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const fontSize = current.fontSize;\n    const fontDirection = current.fontDirection;\n    const spacingDir = font.vertical ? 1 : -1;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const textHScale = current.textHScale * fontDirection;\n    const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;\n    const glyphsLength = glyphs.length;\n    const isTextInvisible =\n      current.textRenderingMode === TextRenderingMode.INVISIBLE;\n    let i, glyph, width, spacingLength;\n\n    if (isTextInvisible || fontSize === 0) {\n      return;\n    }\n    this._cachedScaleForStroking[0] = -1;\n    this._cachedGetSinglePixelWidth = null;\n\n    ctx.save();\n    ctx.transform(...current.textMatrix);\n    ctx.translate(current.x, current.y);\n\n    ctx.scale(textHScale, fontDirection);\n\n    for (i = 0; i < glyphsLength; ++i) {\n      glyph = glyphs[i];\n      if (typeof glyph === \"number\") {\n        spacingLength = (spacingDir * glyph * fontSize) / 1000;\n        this.ctx.translate(spacingLength, 0);\n        current.x += spacingLength * textHScale;\n        continue;\n      }\n\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const operatorList = font.charProcOperatorList[glyph.operatorListId];\n      if (!operatorList) {\n        warn(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n        continue;\n      }\n      if (this.contentVisible) {\n        this.processingType3 = glyph;\n        this.save();\n        ctx.scale(fontSize, fontSize);\n        ctx.transform(...fontMatrix);\n        this.executeOperatorList(operatorList);\n        this.restore();\n      }\n\n      const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);\n      width = transformed[0] * fontSize + spacing;\n\n      ctx.translate(width, 0);\n      current.x += width * textHScale;\n    }\n    ctx.restore();\n    this.processingType3 = null;\n  }\n\n  // Type3 fonts\n  setCharWidth(xWidth, yWidth) {\n    // We can safely ignore this since the width should be the same\n    // as the width in the Widths array.\n  }\n\n  setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n    this.ctx.rect(llx, lly, urx - llx, ury - lly);\n    this.ctx.clip();\n    this.endPath();\n  }\n\n  // Color\n  getColorN_Pattern(IR) {\n    let pattern;\n    if (IR[0] === \"TilingPattern\") {\n      const color = IR[1];\n      const baseTransform = this.baseTransform || getCurrentTransform(this.ctx);\n      const canvasGraphicsFactory = {\n        createCanvasGraphics: ctx => {\n          return new CanvasGraphics(\n            ctx,\n            this.commonObjs,\n            this.objs,\n            this.canvasFactory,\n            this.filterFactory,\n            {\n              optionalContentConfig: this.optionalContentConfig,\n              markedContentStack: this.markedContentStack,\n            }\n          );\n        },\n      };\n      pattern = new TilingPattern(\n        IR,\n        color,\n        this.ctx,\n        canvasGraphicsFactory,\n        baseTransform\n      );\n    } else {\n      pattern = this._getPattern(IR[1], IR[2]);\n    }\n    return pattern;\n  }\n\n  setStrokeColorN() {\n    this.current.strokeColor = this.getColorN_Pattern(arguments);\n  }\n\n  setFillColorN() {\n    this.current.fillColor = this.getColorN_Pattern(arguments);\n    this.current.patternFill = true;\n  }\n\n  setStrokeRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.strokeStyle = color;\n    this.current.strokeColor = color;\n  }\n\n  setFillRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.fillStyle = color;\n    this.current.fillColor = color;\n    this.current.patternFill = false;\n  }\n\n  _getPattern(objId, matrix = null) {\n    let pattern;\n    if (this.cachedPatterns.has(objId)) {\n      pattern = this.cachedPatterns.get(objId);\n    } else {\n      pattern = getShadingPattern(this.getObject(objId));\n      this.cachedPatterns.set(objId, pattern);\n    }\n    if (matrix) {\n      pattern.matrix = matrix;\n    }\n    return pattern;\n  }\n\n  shadingFill(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    this.save();\n    const pattern = this._getPattern(objId);\n    ctx.fillStyle = pattern.getPattern(\n      ctx,\n      this,\n      getCurrentTransformInverse(ctx),\n      PathType.SHADING\n    );\n\n    const inv = getCurrentTransformInverse(ctx);\n    if (inv) {\n      const canvas = ctx.canvas;\n      const width = canvas.width;\n      const height = canvas.height;\n\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n    } else {\n      // HACK to draw the gradient onto an infinite rectangle.\n      // PDF gradients are drawn across the entire image while\n      // Canvas only allows gradients to be drawn in a rectangle\n      // The following bug should allow us to remove this.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=664884\n\n      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n    }\n\n    this.compose(this.current.getClippedPathBoundingBox());\n    this.restore();\n  }\n\n  // Images\n  beginInlineImage() {\n    unreachable(\"Should not call beginInlineImage\");\n  }\n\n  beginImageData() {\n    unreachable(\"Should not call beginImageData\");\n  }\n\n  paintFormXObjectBegin(matrix, bbox) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.save();\n    this.baseTransformStack.push(this.baseTransform);\n\n    if (Array.isArray(matrix) && matrix.length === 6) {\n      this.transform(...matrix);\n    }\n\n    this.baseTransform = getCurrentTransform(this.ctx);\n\n    if (bbox) {\n      const width = bbox[2] - bbox[0];\n      const height = bbox[3] - bbox[1];\n      this.ctx.rect(bbox[0], bbox[1], width, height);\n      this.current.updateRectMinMax(getCurrentTransform(this.ctx), bbox);\n      this.clip();\n      this.endPath();\n    }\n  }\n\n  paintFormXObjectEnd() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.restore();\n    this.baseTransform = this.baseTransformStack.pop();\n  }\n\n  beginGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n\n    this.save();\n    // If there's an active soft mask we don't want it enabled for the group, so\n    // clear it out. The mask and suspended canvas will be restored in endGroup.\n    if (this.inSMaskMode) {\n      this.endSMaskMode();\n      this.current.activeSMask = null;\n    }\n\n    const currentCtx = this.ctx;\n    // TODO non-isolated groups - according to Rik at adobe non-isolated\n    // group results aren't usually that different and they even have tools\n    // that ignore this setting. Notes from Rik on implementing:\n    // - When you encounter an transparency group, create a new canvas with\n    // the dimensions of the bbox\n    // - copy the content from the previous canvas to the new canvas\n    // - draw as usual\n    // - remove the backdrop alpha:\n    // alphaNew = 1 - (1 - alpha)/(1 - alphaBackdrop) with 'alpha' the alpha\n    // value of your transparency group and 'alphaBackdrop' the alpha of the\n    // backdrop\n    // - remove background color:\n    // colorNew = color - alphaNew *colorBackdrop /(1 - alphaNew)\n    if (!group.isolated) {\n      info(\"TODO: Support non-isolated groups.\");\n    }\n\n    // TODO knockout - supposedly possible with the clever use of compositing\n    // modes.\n    if (group.knockout) {\n      warn(\"Knockout groups not supported.\");\n    }\n\n    const currentTransform = getCurrentTransform(currentCtx);\n    if (group.matrix) {\n      currentCtx.transform(...group.matrix);\n    }\n    if (!group.bbox) {\n      throw new Error(\"Bounding box is required.\");\n    }\n\n    // Based on the current transform figure out how big the bounding box\n    // will actually be.\n    let bounds = Util.getAxialAlignedBoundingBox(\n      group.bbox,\n      getCurrentTransform(currentCtx)\n    );\n    // Clip the bounding box to the current canvas.\n    const canvasBounds = [\n      0,\n      0,\n      currentCtx.canvas.width,\n      currentCtx.canvas.height,\n    ];\n    bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n    // Use ceil in case we're between sizes so we don't create canvas that is\n    // too small and make the canvas at least 1x1 pixels.\n    const offsetX = Math.floor(bounds[0]);\n    const offsetY = Math.floor(bounds[1]);\n    let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n    let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n    let scaleX = 1,\n      scaleY = 1;\n    if (drawnWidth > MAX_GROUP_SIZE) {\n      scaleX = drawnWidth / MAX_GROUP_SIZE;\n      drawnWidth = MAX_GROUP_SIZE;\n    }\n    if (drawnHeight > MAX_GROUP_SIZE) {\n      scaleY = drawnHeight / MAX_GROUP_SIZE;\n      drawnHeight = MAX_GROUP_SIZE;\n    }\n\n    this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);\n\n    let cacheId = \"groupAt\" + this.groupLevel;\n    if (group.smask) {\n      // Using two cache entries is case if masks are used one after another.\n      cacheId += \"_smask_\" + (this.smaskCounter++ % 2);\n    }\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight\n    );\n    const groupCtx = scratchCanvas.context;\n\n    // Since we created a new canvas that is just the size of the bounding box\n    // we have to translate the group ctx.\n    groupCtx.scale(1 / scaleX, 1 / scaleY);\n    groupCtx.translate(-offsetX, -offsetY);\n    groupCtx.transform(...currentTransform);\n\n    if (group.smask) {\n      // Saving state and cached mask to be used in setGState.\n      this.smaskStack.push({\n        canvas: scratchCanvas.canvas,\n        context: groupCtx,\n        offsetX,\n        offsetY,\n        scaleX,\n        scaleY,\n        subtype: group.smask.subtype,\n        backdrop: group.smask.backdrop,\n        transferMap: group.smask.transferMap || null,\n        startTransformInverse: null, // used during suspend operation\n      });\n    } else {\n      // Setup the current ctx so when the group is popped we draw it at the\n      // right location.\n      currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n      currentCtx.translate(offsetX, offsetY);\n      currentCtx.scale(scaleX, scaleY);\n      currentCtx.save();\n    }\n    // The transparency group inherits all off the current graphics state\n    // except the blend mode, soft mask, and alpha constants.\n    copyCtxState(currentCtx, groupCtx);\n    this.ctx = groupCtx;\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n    this.groupStack.push(currentCtx);\n    this.groupLevel++;\n  }\n\n  endGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.groupLevel--;\n    const groupCtx = this.ctx;\n    const ctx = this.groupStack.pop();\n    this.ctx = ctx;\n    // Turn off image smoothing to avoid sub pixel interpolation which can\n    // look kind of blurry for some pdfs.\n    this.ctx.imageSmoothingEnabled = false;\n\n    if (group.smask) {\n      this.tempSMask = this.smaskStack.pop();\n      this.restore();\n    } else {\n      this.ctx.restore();\n      const currentMtx = getCurrentTransform(this.ctx);\n      this.restore();\n      this.ctx.save();\n      this.ctx.setTransform(...currentMtx);\n      const dirtyBox = Util.getAxialAlignedBoundingBox(\n        [0, 0, groupCtx.canvas.width, groupCtx.canvas.height],\n        currentMtx\n      );\n      this.ctx.drawImage(groupCtx.canvas, 0, 0);\n      this.ctx.restore();\n      this.compose(dirtyBox);\n    }\n  }\n\n  beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {\n    // The annotations are drawn just after the page content.\n    // The page content drawing can potentially have set a transform,\n    // a clipping path, whatever...\n    // So in order to have something clean, we restore the initial state.\n    this.#restoreInitialState();\n    resetCtxToDefault(this.ctx);\n\n    this.ctx.save();\n    this.save();\n\n    if (this.baseTransform) {\n      this.ctx.setTransform(...this.baseTransform);\n    }\n\n    if (Array.isArray(rect) && rect.length === 4) {\n      const width = rect[2] - rect[0];\n      const height = rect[3] - rect[1];\n\n      if (hasOwnCanvas && this.annotationCanvasMap) {\n        transform = transform.slice();\n        transform[4] -= rect[0];\n        transform[5] -= rect[1];\n\n        rect = rect.slice();\n        rect[0] = rect[1] = 0;\n        rect[2] = width;\n        rect[3] = height;\n\n        const [scaleX, scaleY] = Util.singularValueDecompose2dScale(\n          getCurrentTransform(this.ctx)\n        );\n        const { viewportScale } = this;\n        const canvasWidth = Math.ceil(\n          width * this.outputScaleX * viewportScale\n        );\n        const canvasHeight = Math.ceil(\n          height * this.outputScaleY * viewportScale\n        );\n\n        this.annotationCanvas = this.canvasFactory.create(\n          canvasWidth,\n          canvasHeight\n        );\n        const { canvas, context } = this.annotationCanvas;\n        this.annotationCanvasMap.set(id, canvas);\n        this.annotationCanvas.savedCtx = this.ctx;\n        this.ctx = context;\n        this.ctx.save();\n        this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);\n\n        resetCtxToDefault(this.ctx);\n      } else {\n        resetCtxToDefault(this.ctx);\n\n        this.ctx.rect(rect[0], rect[1], width, height);\n        this.ctx.clip();\n        this.endPath();\n      }\n    }\n\n    this.current = new CanvasExtraState(\n      this.ctx.canvas.width,\n      this.ctx.canvas.height\n    );\n\n    this.transform(...transform);\n    this.transform(...matrix);\n  }\n\n  endAnnotation() {\n    if (this.annotationCanvas) {\n      this.ctx.restore();\n      this.#drawFilter();\n\n      this.ctx = this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas;\n    }\n  }\n\n  paintImageMaskXObject(img) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const count = img.count;\n    img = this.getObject(img.data, img);\n    img.count = count;\n\n    const ctx = this.ctx;\n    const glyph = this.processingType3;\n\n    if (glyph) {\n      if (glyph.compiled === undefined) {\n        glyph.compiled = compileType3Glyph(img);\n      }\n\n      if (glyph.compiled) {\n        glyph.compiled(ctx);\n        return;\n      }\n    }\n    const mask = this._createMaskCanvas(img);\n    const maskCanvas = mask.canvas;\n\n    ctx.save();\n    // The mask is drawn with the transform applied. Reset the current\n    // transform to draw to the identity.\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n    ctx.restore();\n    this.compose();\n  }\n\n  paintImageMaskXObjectRepeat(\n    img,\n    scaleX,\n    skewX = 0,\n    skewY = 0,\n    scaleY,\n    positions\n  ) {\n    if (!this.contentVisible) {\n      return;\n    }\n\n    img = this.getObject(img.data, img);\n\n    const ctx = this.ctx;\n    ctx.save();\n    const currentTransform = getCurrentTransform(ctx);\n    ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n    const mask = this._createMaskCanvas(img);\n\n    ctx.setTransform(\n      1,\n      0,\n      0,\n      1,\n      mask.offsetX - currentTransform[4],\n      mask.offsetY - currentTransform[5]\n    );\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      const trans = Util.transform(currentTransform, [\n        scaleX,\n        skewX,\n        skewY,\n        scaleY,\n        positions[i],\n        positions[i + 1],\n      ]);\n\n      const [x, y] = Util.applyTransform([0, 0], trans);\n      ctx.drawImage(mask.canvas, x, y);\n    }\n    ctx.restore();\n    this.compose();\n  }\n\n  paintImageMaskXObjectGroup(images) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n\n    for (const image of images) {\n      const { data, width, height, transform } = image;\n\n      const maskCanvas = this.cachedCanvases.getCanvas(\n        \"maskCanvas\",\n        width,\n        height\n      );\n      const maskCtx = maskCanvas.context;\n      maskCtx.save();\n\n      const img = this.getObject(data, image);\n      putBinaryImageMask(maskCtx, img);\n\n      maskCtx.globalCompositeOperation = \"source-in\";\n\n      maskCtx.fillStyle = isPatternFill\n        ? fillColor.getPattern(\n            maskCtx,\n            this,\n            getCurrentTransformInverse(ctx),\n            PathType.FILL\n          )\n        : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n\n      maskCtx.restore();\n\n      ctx.save();\n      ctx.transform(...transform);\n      ctx.scale(1, -1);\n      drawImageAtIntegerCoords(\n        ctx,\n        maskCanvas.canvas,\n        0,\n        0,\n        width,\n        height,\n        0,\n        -1,\n        1,\n        1\n      );\n      ctx.restore();\n    }\n    this.compose();\n  }\n\n  paintImageXObject(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = this.getObject(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    this.paintInlineImageXObject(imgData);\n  }\n\n  paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = this.getObject(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    const width = imgData.width;\n    const height = imgData.height;\n    const map = [];\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      map.push({\n        transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n        x: 0,\n        y: 0,\n        w: width,\n        h: height,\n      });\n    }\n    this.paintInlineImageXObjectGroup(imgData, map);\n  }\n\n  applyTransferMapsToCanvas(ctx) {\n    if (this.current.transferMaps !== \"none\") {\n      ctx.filter = this.current.transferMaps;\n      ctx.drawImage(ctx.canvas, 0, 0);\n      ctx.filter = \"none\";\n    }\n    return ctx.canvas;\n  }\n\n  applyTransferMapsToBitmap(imgData) {\n    if (this.current.transferMaps === \"none\") {\n      return imgData.bitmap;\n    }\n    const { bitmap, width, height } = imgData;\n    const tmpCanvas = this.cachedCanvases.getCanvas(\n      \"inlineImage\",\n      width,\n      height\n    );\n    const tmpCtx = tmpCanvas.context;\n    tmpCtx.filter = this.current.transferMaps;\n    tmpCtx.drawImage(bitmap, 0, 0);\n    tmpCtx.filter = \"none\";\n\n    return tmpCanvas.canvas;\n  }\n\n  paintInlineImageXObject(imgData) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const width = imgData.width;\n    const height = imgData.height;\n    const ctx = this.ctx;\n\n    this.save();\n\n    if (\n      (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n      !isNodeJS\n    ) {\n      // The filter, if any, will be applied in applyTransferMapsToBitmap.\n      // It must be applied to the image before rescaling else some artifacts\n      // could appear.\n      // The final restore will reset it to its value.\n      ctx.filter = \"none\";\n    }\n\n    // scale the image to the unit square\n    ctx.scale(1 / width, -1 / height);\n\n    let imgToPaint;\n    if (imgData.bitmap) {\n      imgToPaint = this.applyTransferMapsToBitmap(imgData);\n    } else if (\n      (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement) ||\n      !imgData.data\n    ) {\n      // typeof check is needed due to node.js support, see issue #8489\n      imgToPaint = imgData;\n    } else {\n      const tmpCanvas = this.cachedCanvases.getCanvas(\n        \"inlineImage\",\n        width,\n        height\n      );\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData);\n      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n    }\n\n    const scaled = this._scaleImage(\n      imgToPaint,\n      getCurrentTransformInverse(ctx)\n    );\n    ctx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      getCurrentTransform(ctx),\n      imgData.interpolate\n    );\n\n    drawImageAtIntegerCoords(\n      ctx,\n      scaled.img,\n      0,\n      0,\n      scaled.paintWidth,\n      scaled.paintHeight,\n      0,\n      -height,\n      width,\n      height\n    );\n    this.compose();\n    this.restore();\n  }\n\n  paintInlineImageXObjectGroup(imgData, map) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    let imgToPaint;\n    if (imgData.bitmap) {\n      imgToPaint = imgData.bitmap;\n    } else {\n      const w = imgData.width;\n      const h = imgData.height;\n\n      const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData);\n      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n    }\n\n    for (const entry of map) {\n      ctx.save();\n      ctx.transform(...entry.transform);\n      ctx.scale(1, -1);\n      drawImageAtIntegerCoords(\n        ctx,\n        imgToPaint,\n        entry.x,\n        entry.y,\n        entry.w,\n        entry.h,\n        0,\n        -1,\n        1,\n        1\n      );\n      ctx.restore();\n    }\n    this.compose();\n  }\n\n  paintSolidColorImageMask() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.ctx.fillRect(0, 0, 1, 1);\n    this.compose();\n  }\n\n  // Marked content\n\n  markPoint(tag) {\n    // TODO Marked content.\n  }\n\n  markPointProps(tag, properties) {\n    // TODO Marked content.\n  }\n\n  beginMarkedContent(tag) {\n    this.markedContentStack.push({\n      visible: true,\n    });\n  }\n\n  beginMarkedContentProps(tag, properties) {\n    if (tag === \"OC\") {\n      this.markedContentStack.push({\n        visible: this.optionalContentConfig.isVisible(properties),\n      });\n    } else {\n      this.markedContentStack.push({\n        visible: true,\n      });\n    }\n    this.contentVisible = this.isContentVisible();\n  }\n\n  endMarkedContent() {\n    this.markedContentStack.pop();\n    this.contentVisible = this.isContentVisible();\n  }\n\n  // Compatibility\n\n  beginCompat() {\n    // TODO ignore undefined operators (should we do that anyway?)\n  }\n\n  endCompat() {\n    // TODO stop ignoring undefined operators\n  }\n\n  // Helper functions\n\n  consumePath(clipBox) {\n    const isEmpty = this.current.isEmptyClip();\n    if (this.pendingClip) {\n      this.current.updateClipFromPath();\n    }\n    if (!this.pendingClip) {\n      this.compose(clipBox);\n    }\n    const ctx = this.ctx;\n    if (this.pendingClip) {\n      if (!isEmpty) {\n        if (this.pendingClip === EO_CLIP) {\n          ctx.clip(\"evenodd\");\n        } else {\n          ctx.clip();\n        }\n      }\n      this.pendingClip = null;\n    }\n    this.current.startNewPathAndClipBox(this.current.clipBox);\n    ctx.beginPath();\n  }\n\n  getSinglePixelWidth() {\n    if (!this._cachedGetSinglePixelWidth) {\n      const m = getCurrentTransform(this.ctx);\n      if (m[1] === 0 && m[2] === 0) {\n        // Fast path\n        this._cachedGetSinglePixelWidth =\n          1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));\n      } else {\n        const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n        const normX = Math.hypot(m[0], m[2]);\n        const normY = Math.hypot(m[1], m[3]);\n        this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;\n      }\n    }\n    return this._cachedGetSinglePixelWidth;\n  }\n\n  getScaleForStroking() {\n    // A pixel has thicknessX = thicknessY = 1;\n    // A transformed pixel is a parallelogram and the thicknesses\n    // corresponds to the heights.\n    // The goal of this function is to rescale before setting the\n    // lineWidth in order to have both thicknesses greater or equal\n    // to 1 after transform.\n    if (this._cachedScaleForStroking[0] === -1) {\n      const { lineWidth } = this.current;\n      const { a, b, c, d } = this.ctx.getTransform();\n      let scaleX, scaleY;\n\n      if (b === 0 && c === 0) {\n        // Fast path\n        const normX = Math.abs(a);\n        const normY = Math.abs(d);\n        if (normX === normY) {\n          if (lineWidth === 0) {\n            scaleX = scaleY = 1 / normX;\n          } else {\n            const scaledLineWidth = normX * lineWidth;\n            scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;\n          }\n        } else if (lineWidth === 0) {\n          scaleX = 1 / normX;\n          scaleY = 1 / normY;\n        } else {\n          const scaledXLineWidth = normX * lineWidth;\n          const scaledYLineWidth = normY * lineWidth;\n          scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;\n          scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;\n        }\n      } else {\n        // A pixel (base (x, y)) is transformed by M into a parallelogram:\n        //  - its area is |det(M)|;\n        //  - heightY (orthogonal to Mx) has a length: |det(M)| / norm(Mx);\n        //  - heightX (orthogonal to My) has a length: |det(M)| / norm(My).\n        // heightX and heightY are the thicknesses of the transformed pixel\n        // and they must be both greater or equal to 1.\n        const absDet = Math.abs(a * d - b * c);\n        const normX = Math.hypot(a, b);\n        const normY = Math.hypot(c, d);\n        if (lineWidth === 0) {\n          scaleX = normY / absDet;\n          scaleY = normX / absDet;\n        } else {\n          const baseArea = lineWidth * absDet;\n          scaleX = normY > baseArea ? normY / baseArea : 1;\n          scaleY = normX > baseArea ? normX / baseArea : 1;\n        }\n      }\n      this._cachedScaleForStroking[0] = scaleX;\n      this._cachedScaleForStroking[1] = scaleY;\n    }\n    return this._cachedScaleForStroking;\n  }\n\n  // Rescale before stroking in order to have a final lineWidth\n  // with both thicknesses greater or equal to 1.\n  rescaleAndStroke(saveRestore) {\n    const { ctx } = this;\n    const { lineWidth } = this.current;\n    const [scaleX, scaleY] = this.getScaleForStroking();\n\n    ctx.lineWidth = lineWidth || 1;\n\n    if (scaleX === 1 && scaleY === 1) {\n      ctx.stroke();\n      return;\n    }\n\n    const dashes = ctx.getLineDash();\n    if (saveRestore) {\n      ctx.save();\n    }\n\n    ctx.scale(scaleX, scaleY);\n\n    // How the dashed line is rendered depends on the current transform...\n    // so we added a rescale to handle too thin lines and consequently\n    // the way the line is dashed will be modified.\n    // If scaleX === scaleY, the dashed lines will be rendered correctly\n    // else we'll have some bugs (but only with too thin lines).\n    // Here we take the max... why not taking the min... or something else.\n    // Anyway, as said it's buggy when scaleX !== scaleY.\n    if (dashes.length > 0) {\n      const scale = Math.max(scaleX, scaleY);\n      ctx.setLineDash(dashes.map(x => x / scale));\n      ctx.lineDashOffset /= scale;\n    }\n\n    ctx.stroke();\n\n    if (saveRestore) {\n      ctx.restore();\n    }\n  }\n\n  isContentVisible() {\n    for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n      if (!this.markedContentStack[i].visible) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfor (const op in OPS) {\n  if (CanvasGraphics.prototype[op] !== undefined) {\n    CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];\n  }\n}\n\nexport { CanvasGraphics };\n", "/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormatError, info, unreachable, Util } from \"../shared/util.js\";\nimport { getCurrentTransform } from \"./display_utils.js\";\n\nconst PathType = {\n  FILL: \"Fill\",\n  STROKE: \"Stroke\",\n  SHADING: \"Shading\",\n};\n\nfunction applyBoundingBox(ctx, bbox) {\n  if (!bbox) {\n    return;\n  }\n  const width = bbox[2] - bbox[0];\n  const height = bbox[3] - bbox[1];\n  const region = new Path2D();\n  region.rect(bbox[0], bbox[1], width, height);\n  ctx.clip(region);\n}\n\nclass BaseShadingPattern {\n  constructor() {\n    if (this.constructor === BaseShadingPattern) {\n      unreachable(\"Cannot initialize BaseShadingPattern.\");\n    }\n  }\n\n  getPattern() {\n    unreachable(\"Abstract method `getPattern` called.\");\n  }\n}\n\nclass RadialAxialShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._type = IR[1];\n    this._bbox = IR[2];\n    this._colorStops = IR[3];\n    this._p0 = IR[4];\n    this._p1 = IR[5];\n    this._r0 = IR[6];\n    this._r1 = IR[7];\n    this.matrix = null;\n  }\n\n  _createGradient(ctx) {\n    let grad;\n    if (this._type === \"axial\") {\n      grad = ctx.createLinearGradient(\n        this._p0[0],\n        this._p0[1],\n        this._p1[0],\n        this._p1[1]\n      );\n    } else if (this._type === \"radial\") {\n      grad = ctx.createRadialGradient(\n        this._p0[0],\n        this._p0[1],\n        this._r0,\n        this._p1[0],\n        this._p1[1],\n        this._r1\n      );\n    }\n\n    for (const colorStop of this._colorStops) {\n      grad.addColorStop(colorStop[0], colorStop[1]);\n    }\n    return grad;\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    let pattern;\n    if (pathType === PathType.STROKE || pathType === PathType.FILL) {\n      const ownerBBox = owner.current.getClippedPathBoundingBox(\n        pathType,\n        getCurrentTransform(ctx)\n      ) || [0, 0, 0, 0];\n      // Create a canvas that is only as big as the current path. This doesn't\n      // allow us to cache the pattern, but it generally creates much smaller\n      // canvases and saves memory use. See bug 1722807 for an example.\n      const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;\n      const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;\n\n      const tmpCanvas = owner.cachedCanvases.getCanvas(\n        \"pattern\",\n        width,\n        height,\n        true\n      );\n\n      const tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      tmpCtx.beginPath();\n      tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      // Non shading fill patterns are positioned relative to the base transform\n      // (usually the page's initial transform), but we may have created a\n      // smaller canvas based on the path, so we must account for the shift.\n      tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);\n      inverse = Util.transform(inverse, [\n        1,\n        0,\n        0,\n        1,\n        ownerBBox[0],\n        ownerBBox[1],\n      ]);\n\n      tmpCtx.transform(...owner.baseTransform);\n      if (this.matrix) {\n        tmpCtx.transform(...this.matrix);\n      }\n      applyBoundingBox(tmpCtx, this._bbox);\n\n      tmpCtx.fillStyle = this._createGradient(tmpCtx);\n      tmpCtx.fill();\n\n      pattern = ctx.createPattern(tmpCanvas.canvas, \"no-repeat\");\n      const domMatrix = new DOMMatrix(inverse);\n      pattern.setTransform(domMatrix);\n    } else {\n      // Shading fills are applied relative to the current matrix which is also\n      // how canvas gradients work, so there's no need to do anything special\n      // here.\n      applyBoundingBox(ctx, this._bbox);\n      pattern = this._createGradient(ctx);\n    }\n    return pattern;\n  }\n}\n\nfunction drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n  // Very basic Gouraud-shaded triangle rasterization algorithm.\n  const coords = context.coords,\n    colors = context.colors;\n  const bytes = data.data,\n    rowSize = data.width * 4;\n  let tmp;\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  if (coords[p2 + 1] > coords[p3 + 1]) {\n    tmp = p2;\n    p2 = p3;\n    p3 = tmp;\n    tmp = c2;\n    c2 = c3;\n    c3 = tmp;\n  }\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n  const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n  const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n  if (y1 >= y3) {\n    return;\n  }\n  const c1r = colors[c1],\n    c1g = colors[c1 + 1],\n    c1b = colors[c1 + 2];\n  const c2r = colors[c2],\n    c2g = colors[c2 + 1],\n    c2b = colors[c2 + 2];\n  const c3r = colors[c3],\n    c3g = colors[c3 + 1],\n    c3b = colors[c3 + 2];\n\n  const minY = Math.round(y1),\n    maxY = Math.round(y3);\n  let xa, car, cag, cab;\n  let xb, cbr, cbg, cbb;\n  for (let y = minY; y <= maxY; y++) {\n    if (y < y2) {\n      let k;\n      if (y < y1) {\n        k = 0;\n      } else {\n        k = (y1 - y) / (y1 - y2);\n      }\n      xa = x1 - (x1 - x2) * k;\n      car = c1r - (c1r - c2r) * k;\n      cag = c1g - (c1g - c2g) * k;\n      cab = c1b - (c1b - c2b) * k;\n    } else {\n      let k;\n      if (y > y3) {\n        k = 1;\n      } else if (y2 === y3) {\n        k = 0;\n      } else {\n        k = (y2 - y) / (y2 - y3);\n      }\n      xa = x2 - (x2 - x3) * k;\n      car = c2r - (c2r - c3r) * k;\n      cag = c2g - (c2g - c3g) * k;\n      cab = c2b - (c2b - c3b) * k;\n    }\n\n    let k;\n    if (y < y1) {\n      k = 0;\n    } else if (y > y3) {\n      k = 1;\n    } else {\n      k = (y1 - y) / (y1 - y3);\n    }\n    xb = x1 - (x1 - x3) * k;\n    cbr = c1r - (c1r - c3r) * k;\n    cbg = c1g - (c1g - c3g) * k;\n    cbb = c1b - (c1b - c3b) * k;\n    const x1_ = Math.round(Math.min(xa, xb));\n    const x2_ = Math.round(Math.max(xa, xb));\n    let j = rowSize * y + x1_ * 4;\n    for (let x = x1_; x <= x2_; x++) {\n      k = (xa - x) / (xa - xb);\n      if (k < 0) {\n        k = 0;\n      } else if (k > 1) {\n        k = 1;\n      }\n      bytes[j++] = (car - (car - cbr) * k) | 0;\n      bytes[j++] = (cag - (cag - cbg) * k) | 0;\n      bytes[j++] = (cab - (cab - cbb) * k) | 0;\n      bytes[j++] = 255;\n    }\n  }\n}\n\nfunction drawFigure(data, figure, context) {\n  const ps = figure.coords;\n  const cs = figure.colors;\n  let i, ii;\n  switch (figure.type) {\n    case \"lattice\":\n      const verticesPerRow = figure.verticesPerRow;\n      const rows = Math.floor(ps.length / verticesPerRow) - 1;\n      const cols = verticesPerRow - 1;\n      for (i = 0; i < rows; i++) {\n        let q = i * verticesPerRow;\n        for (let j = 0; j < cols; j++, q++) {\n          drawTriangle(\n            data,\n            context,\n            ps[q],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n          drawTriangle(\n            data,\n            context,\n            ps[q + verticesPerRow + 1],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q + verticesPerRow + 1],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n        }\n      }\n      break;\n    case \"triangles\":\n      for (i = 0, ii = ps.length; i < ii; i += 3) {\n        drawTriangle(\n          data,\n          context,\n          ps[i],\n          ps[i + 1],\n          ps[i + 2],\n          cs[i],\n          cs[i + 1],\n          cs[i + 2]\n        );\n      }\n      break;\n    default:\n      throw new Error(\"illegal figure\");\n  }\n}\n\nclass MeshShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._coords = IR[2];\n    this._colors = IR[3];\n    this._figures = IR[4];\n    this._bounds = IR[5];\n    this._bbox = IR[7];\n    this._background = IR[8];\n    this.matrix = null;\n  }\n\n  _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n    // we will increase scale on some weird factor to let antialiasing take\n    // care of \"rough\" edges\n    const EXPECTED_SCALE = 1.1;\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    const MAX_PATTERN_SIZE = 3000; // 10in @ 300dpi shall be enough\n    // We need to keep transparent border around our pattern for fill():\n    // createPattern with 'no-repeat' will bleed edges across entire area.\n    const BORDER_SIZE = 2;\n\n    const offsetX = Math.floor(this._bounds[0]);\n    const offsetY = Math.floor(this._bounds[1]);\n    const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n    const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n\n    const width = Math.min(\n      Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const height = Math.min(\n      Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const scaleX = boundsWidth / width;\n    const scaleY = boundsHeight / height;\n\n    const context = {\n      coords: this._coords,\n      colors: this._colors,\n      offsetX: -offsetX,\n      offsetY: -offsetY,\n      scaleX: 1 / scaleX,\n      scaleY: 1 / scaleY,\n    };\n\n    const paddedWidth = width + BORDER_SIZE * 2;\n    const paddedHeight = height + BORDER_SIZE * 2;\n\n    const tmpCanvas = cachedCanvases.getCanvas(\n      \"mesh\",\n      paddedWidth,\n      paddedHeight,\n      false\n    );\n    const tmpCtx = tmpCanvas.context;\n\n    const data = tmpCtx.createImageData(width, height);\n    if (backgroundColor) {\n      const bytes = data.data;\n      for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n        bytes[i] = backgroundColor[0];\n        bytes[i + 1] = backgroundColor[1];\n        bytes[i + 2] = backgroundColor[2];\n        bytes[i + 3] = 255;\n      }\n    }\n    for (const figure of this._figures) {\n      drawFigure(data, figure, context);\n    }\n    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n    const canvas = tmpCanvas.canvas;\n\n    return {\n      canvas,\n      offsetX: offsetX - BORDER_SIZE * scaleX,\n      offsetY: offsetY - BORDER_SIZE * scaleY,\n      scaleX,\n      scaleY,\n    };\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    applyBoundingBox(ctx, this._bbox);\n    let scale;\n    if (pathType === PathType.SHADING) {\n      scale = Util.singularValueDecompose2dScale(getCurrentTransform(ctx));\n    } else {\n      // Obtain scale from matrix and current transformation matrix.\n      scale = Util.singularValueDecompose2dScale(owner.baseTransform);\n      if (this.matrix) {\n        const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n        scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n      }\n    }\n\n    // Rasterizing on the main thread since sending/queue large canvases\n    // might cause OOM.\n    const temporaryPatternCanvas = this._createMeshCanvas(\n      scale,\n      pathType === PathType.SHADING ? null : this._background,\n      owner.cachedCanvases\n    );\n\n    if (pathType !== PathType.SHADING) {\n      ctx.setTransform(...owner.baseTransform);\n      if (this.matrix) {\n        ctx.transform(...this.matrix);\n      }\n    }\n\n    ctx.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n\n    return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n  }\n}\n\nclass DummyShadingPattern extends BaseShadingPattern {\n  getPattern() {\n    return \"hotpink\";\n  }\n}\n\nfunction getShadingPattern(IR) {\n  switch (IR[0]) {\n    case \"RadialAxial\":\n      return new RadialAxialShadingPattern(IR);\n    case \"Mesh\":\n      return new MeshShadingPattern(IR);\n    case \"Dummy\":\n      return new DummyShadingPattern();\n  }\n  throw new Error(`Unknown IR type: ${IR[0]}`);\n}\n\nconst PaintType = {\n  COLORED: 1,\n  UNCOLORED: 2,\n};\n\nclass TilingPattern {\n  // 10in @ 300dpi shall be enough.\n  static MAX_PATTERN_SIZE = 3000;\n\n  constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n    this.operatorList = IR[2];\n    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n    this.bbox = IR[4];\n    this.xstep = IR[5];\n    this.ystep = IR[6];\n    this.paintType = IR[7];\n    this.tilingType = IR[8];\n    this.color = color;\n    this.ctx = ctx;\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\n    this.baseTransform = baseTransform;\n  }\n\n  createPatternCanvas(owner) {\n    const operatorList = this.operatorList;\n    const bbox = this.bbox;\n    const xstep = this.xstep;\n    const ystep = this.ystep;\n    const paintType = this.paintType;\n    const tilingType = this.tilingType;\n    const color = this.color;\n    const canvasGraphicsFactory = this.canvasGraphicsFactory;\n\n    info(\"TilingType: \" + tilingType);\n\n    // A tiling pattern as defined by PDF spec 8.7.2 is a cell whose size is\n    // described by bbox, and may repeat regularly by shifting the cell by\n    // xstep and ystep.\n    // Because the HTML5 canvas API does not support pattern repetition with\n    // gaps in between, we use the xstep/ystep instead of the bbox's size.\n    //\n    // This has the following consequences (similarly for ystep):\n    //\n    // - If xstep is the same as bbox, then there is no observable difference.\n    //\n    // - If xstep is larger than bbox, then the pattern canvas is partially\n    //   empty: the area bounded by bbox is painted, the outside area is void.\n    //\n    // - If xstep is smaller than bbox, then the pixels between xstep and the\n    //   bbox boundary will be missing. This is INCORRECT behavior.\n    //   \"Figures on adjacent tiles should not overlap\" (PDF spec 8.7.3.1),\n    //   but overlapping cells without common pixels are still valid.\n    //   TODO: Fix the implementation, to allow this scenario to be painted\n    //   correctly.\n\n    const x0 = bbox[0],\n      y0 = bbox[1],\n      x1 = bbox[2],\n      y1 = bbox[3];\n\n    // Obtain scale from matrix and current transformation matrix.\n    const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n    const curMatrixScale = Util.singularValueDecompose2dScale(\n      this.baseTransform\n    );\n    const combinedScale = [\n      matrixScale[0] * curMatrixScale[0],\n      matrixScale[1] * curMatrixScale[1],\n    ];\n\n    // Use width and height values that are as close as possible to the end\n    // result when the pattern is used. Too low value makes the pattern look\n    // blurry. Too large value makes it look too crispy.\n    const dimx = this.getSizeAndScale(\n      xstep,\n      this.ctx.canvas.width,\n      combinedScale[0]\n    );\n    const dimy = this.getSizeAndScale(\n      ystep,\n      this.ctx.canvas.height,\n      combinedScale[1]\n    );\n\n    const tmpCanvas = owner.cachedCanvases.getCanvas(\n      \"pattern\",\n      dimx.size,\n      dimy.size,\n      true\n    );\n    const tmpCtx = tmpCanvas.context;\n    const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n    graphics.groupLevel = owner.groupLevel;\n\n    this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n\n    let adjustedX0 = x0;\n    let adjustedY0 = y0;\n    let adjustedX1 = x1;\n    let adjustedY1 = y1;\n    // Some bounding boxes have negative x0/y0 coordinates which will cause the\n    // some of the drawing to be off of the canvas. To avoid this shift the\n    // bounding box over.\n    if (x0 < 0) {\n      adjustedX0 = 0;\n      adjustedX1 += Math.abs(x0);\n    }\n    if (y0 < 0) {\n      adjustedY0 = 0;\n      adjustedY1 += Math.abs(y0);\n    }\n    tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n\n    // To match CanvasGraphics beginDrawing we must save the context here or\n    // else we end up with unbalanced save/restores.\n    tmpCtx.save();\n\n    this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n\n    graphics.baseTransform = getCurrentTransform(graphics.ctx);\n\n    graphics.executeOperatorList(operatorList);\n\n    graphics.endDrawing();\n\n    return {\n      canvas: tmpCanvas.canvas,\n      scaleX: dimx.scale,\n      scaleY: dimy.scale,\n      offsetX: adjustedX0,\n      offsetY: adjustedY0,\n    };\n  }\n\n  getSizeAndScale(step, realOutputSize, scale) {\n    // xstep / ystep may be negative -- normalize.\n    step = Math.abs(step);\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    // Use the destination canvas's size if it is bigger than the hard-coded\n    // limit of MAX_PATTERN_SIZE to avoid clipping patterns that cover the\n    // whole canvas.\n    const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n    let size = Math.ceil(step * scale);\n    if (size >= maxSize) {\n      size = maxSize;\n    } else {\n      scale = size / step;\n    }\n    return { scale, size };\n  }\n\n  clipBbox(graphics, x0, y0, x1, y1) {\n    const bboxWidth = x1 - x0;\n    const bboxHeight = y1 - y0;\n    graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n    graphics.current.updateRectMinMax(getCurrentTransform(graphics.ctx), [\n      x0,\n      y0,\n      x1,\n      y1,\n    ]);\n    graphics.clip();\n    graphics.endPath();\n  }\n\n  setFillAndStrokeStyleToContext(graphics, paintType, color) {\n    const context = graphics.ctx,\n      current = graphics.current;\n    switch (paintType) {\n      case PaintType.COLORED:\n        const ctx = this.ctx;\n        context.fillStyle = ctx.fillStyle;\n        context.strokeStyle = ctx.strokeStyle;\n        current.fillColor = ctx.fillStyle;\n        current.strokeColor = ctx.strokeStyle;\n        break;\n      case PaintType.UNCOLORED:\n        const cssColor = Util.makeHexColor(color[0], color[1], color[2]);\n        context.fillStyle = cssColor;\n        context.strokeStyle = cssColor;\n        // Set color needed by image masks (fixes issues 3226 and 8741).\n        current.fillColor = cssColor;\n        current.strokeColor = cssColor;\n        break;\n      default:\n        throw new FormatError(`Unsupported paint type: ${paintType}`);\n    }\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    // PDF spec 8.7.2 NOTE 1: pattern's matrix is relative to initial matrix.\n    let matrix = inverse;\n    if (pathType !== PathType.SHADING) {\n      matrix = Util.transform(matrix, owner.baseTransform);\n      if (this.matrix) {\n        matrix = Util.transform(matrix, this.matrix);\n      }\n    }\n\n    const temporaryPatternCanvas = this.createPatternCanvas(owner);\n\n    let domMatrix = new DOMMatrix(matrix);\n    // Rescale and so that the ctx.createPattern call generates a pattern with\n    // the desired size.\n    domMatrix = domMatrix.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    domMatrix = domMatrix.scale(\n      1 / temporaryPatternCanvas.scaleX,\n      1 / temporaryPatternCanvas.scaleY\n    );\n\n    const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n    pattern.setTransform(domMatrix);\n\n    return pattern;\n  }\n}\n\nexport { getShadingPattern, PathType, TilingPattern };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FeatureTest, ImageKind } from \"./util.js\";\n\nfunction convertToRGBA(params) {\n  switch (params.kind) {\n    case ImageKind.GRAYSCALE_1BPP:\n      return convertBlackAndWhiteToRGBA(params);\n    case ImageKind.RGB_24BPP:\n      return convertRGBToRGBA(params);\n  }\n\n  return null;\n}\n\nfunction convertBlackAndWhiteToRGBA({\n  src,\n  srcPos = 0,\n  dest,\n  width,\n  height,\n  nonBlackColor = 0xffffffff,\n  inverseDecode = false,\n}) {\n  const black = FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n  const [zeroMapping, oneMapping] = inverseDecode\n    ? [nonBlackColor, black]\n    : [black, nonBlackColor];\n  const widthInSource = width >> 3;\n  const widthRemainder = width & 7;\n  const srcLength = src.length;\n  dest = new Uint32Array(dest.buffer);\n  let destPos = 0;\n\n  for (let i = 0; i < height; i++) {\n    for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {\n      const elem = srcPos < srcLength ? src[srcPos] : 255;\n      dest[destPos++] = elem & 0b10000000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1000000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b100000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b10000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b100 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b10 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1 ? oneMapping : zeroMapping;\n    }\n    if (widthRemainder === 0) {\n      continue;\n    }\n    const elem = srcPos < srcLength ? src[srcPos++] : 255;\n    for (let j = 0; j < widthRemainder; j++) {\n      dest[destPos++] = elem & (1 << (7 - j)) ? oneMapping : zeroMapping;\n    }\n  }\n  return { srcPos, destPos };\n}\n\nfunction convertRGBToRGBA({\n  src,\n  srcPos = 0,\n  dest,\n  destPos = 0,\n  width,\n  height,\n}) {\n  let i = 0;\n  const len32 = src.length >> 2;\n  const src32 = new Uint32Array(src.buffer, srcPos, len32);\n\n  if (FeatureTest.isLittleEndian) {\n    // It's a way faster to do the shuffle manually instead of working\n    // component by component with some Uint8 arrays.\n    for (; i < len32 - 2; i += 3, destPos += 4) {\n      const s1 = src32[i]; // R2B1G1R1\n      const s2 = src32[i + 1]; // G3R3B2G2\n      const s3 = src32[i + 2]; // B4G4R4B3\n\n      dest[destPos] = s1 | 0xff000000;\n      dest[destPos + 1] = (s1 >>> 24) | (s2 << 8) | 0xff000000;\n      dest[destPos + 2] = (s2 >>> 16) | (s3 << 16) | 0xff000000;\n      dest[destPos + 3] = (s3 >>> 8) | 0xff000000;\n    }\n\n    for (let j = i * 4, jj = src.length; j < jj; j += 3) {\n      dest[destPos++] =\n        src[j] | (src[j + 1] << 8) | (src[j + 2] << 16) | 0xff000000;\n    }\n  } else {\n    for (; i < len32 - 2; i += 3, destPos += 4) {\n      const s1 = src32[i]; // R1G1B1R2\n      const s2 = src32[i + 1]; // G2B2R3G3\n      const s3 = src32[i + 2]; // B3R4G4B4\n\n      dest[destPos] = s1 | 0xff;\n      dest[destPos + 1] = (s1 << 24) | (s2 >>> 8) | 0xff;\n      dest[destPos + 2] = (s2 << 16) | (s3 >>> 16) | 0xff;\n      dest[destPos + 3] = (s3 << 8) | 0xff;\n    }\n\n    for (let j = i * 4, jj = src.length; j < jj; j += 3) {\n      dest[destPos++] =\n        (src[j] << 24) | (src[j + 1] << 16) | (src[j + 2] << 8) | 0xff;\n    }\n  }\n\n  return { srcPos, destPos };\n}\n\nfunction grayToRGBA(src, dest) {\n  if (FeatureTest.isLittleEndian) {\n    for (let i = 0, ii = src.length; i < ii; i++) {\n      dest[i] = (src[i] * 0x10101) | 0xff000000;\n    }\n  } else {\n    for (let i = 0, ii = src.length; i < ii; i++) {\n      dest[i] = (src[i] * 0x1010100) | 0x000000ff;\n    }\n  }\n}\n\nexport { convertBlackAndWhiteToRGBA, convertToRGBA, grayToRGBA };\n", "/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {Object} GlobalWorkerOptionsType\n * @property {Worker | null} workerPort - Defines global port for worker\n *   process. Overrides the `workerSrc` option.\n * @property {string} workerSrc - A string containing the path and filename\n *   of the worker file.\n *\n *   NOTE: The `workerSrc` option should always be set, in order to prevent any\n *         issues when using the PDF.js library.\n */\n\n/** @type {GlobalWorkerOptionsType} */\nconst GlobalWorkerOptions = Object.create(null);\n\nGlobalWorkerOptions.workerPort = null;\nGlobalWorkerOptions.workerSrc = \"\";\n\nexport { GlobalWorkerOptions };\n", "/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  MissingPDFException,\n  PasswordException,\n  PromiseCapability,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n} from \"./util.js\";\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2,\n};\n\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8,\n};\n\nfunction wrapReason(reason) {\n  if (\n    !(\n      reason instanceof Error ||\n      (typeof reason === \"object\" && reason !== null)\n    )\n  ) {\n    unreachable(\n      'wrapReason: Expected \"reason\" to be a (possibly cloned) Error.'\n    );\n  }\n  switch (reason.name) {\n    case \"AbortException\":\n      return new AbortException(reason.message);\n    case \"MissingPDFException\":\n      return new MissingPDFException(reason.message);\n    case \"PasswordException\":\n      return new PasswordException(reason.message, reason.code);\n    case \"UnexpectedResponseException\":\n      return new UnexpectedResponseException(reason.message, reason.status);\n    case \"UnknownErrorException\":\n      return new UnknownErrorException(reason.message, reason.details);\n    default:\n      return new UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n      if (data.stream) {\n        this.#processStreamMessage(data);\n        return;\n      }\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n        return;\n      }\n      const action = this.actionHandler[data.action];\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(\n          function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        return;\n      }\n      if (data.streamId) {\n        this.#createStreamSink(data);\n        return;\n      }\n      action(data.data);\n    };\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      assert(\n        typeof handler === \"function\",\n        'MessageHandler.on: Expected \"handler\" to be a function.'\n      );\n    }\n    const ah = this.actionHandler;\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n    ah[actionName] = handler;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   */\n  send(actionName, data, transfers) {\n    this.comObj.postMessage(\n      {\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data,\n      },\n      transfers\n    );\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that the other side will callback with the response.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = new PromiseCapability();\n    this.callbackCapabilities[callbackId] = capability;\n    try {\n      this.comObj.postMessage(\n        {\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data,\n        },\n        transfers\n      );\n    } catch (ex) {\n      capability.reject(ex);\n    }\n    return capability.promise;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expect that the other side will callback to signal 'start_complete'.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\n   *                 internal queue.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\n   */\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++,\n      sourceName = this.sourceName,\n      targetName = this.targetName,\n      comObj = this.comObj;\n\n    return new ReadableStream(\n      {\n        start: controller => {\n          const startCapability = new PromiseCapability();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false,\n          };\n          comObj.postMessage(\n            {\n              sourceName,\n              targetName,\n              action: actionName,\n              streamId,\n              data,\n              desiredSize: controller.desiredSize,\n            },\n            transfers\n          );\n          // Return Promise for Async process, to signal success/failure.\n          return startCapability.promise;\n        },\n\n        pull: controller => {\n          const pullCapability = new PromiseCapability();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize,\n          });\n          // Returning Promise will not call \"pull\"\n          // again until current pull is resolved.\n          return pullCapability.promise;\n        },\n\n        cancel: reason => {\n          assert(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = new PromiseCapability();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason),\n          });\n          // Return Promise to signal success or failure.\n          return cancelCapability.promise;\n        },\n      },\n      queueingStrategy\n    );\n  }\n\n  #createStreamSink(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const self = this,\n      action = this.actionHandler[data.action];\n\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n        // Enqueue decreases the desiredSize property of sink,\n        // so when it changes from positive to negative,\n        // set ready as unresolved promise.\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = new PromiseCapability();\n          this.ready = this.sinkCapability.promise;\n        }\n        comObj.postMessage(\n          {\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk,\n          },\n          transfers\n        );\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId,\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        assert(reason instanceof Error, \"error must have a valid reason\");\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      },\n\n      sinkCapability: new PromiseCapability(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null,\n    };\n\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(\n      function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true,\n        });\n      },\n      function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      }\n    );\n  }\n\n  #processStreamMessage(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const streamController = this.streamControllers[streamId],\n      streamSink = this.streamSinks[streamId];\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          streamController.startCall.resolve();\n        } else {\n          streamController.startCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          streamController.pullCall.resolve();\n        } else {\n          streamController.pullCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL:\n        // Ignore any pull after close is called.\n        if (!streamSink) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true,\n          });\n          break;\n        }\n        // Pull increases the desiredSize property of sink, so when it changes\n        // from negative to positive, set ready property as resolved promise.\n        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n          streamSink.sinkCapability.resolve();\n        }\n        // Reset desiredSize property of sink on every pull.\n        streamSink.desiredSize = data.desiredSize;\n\n        new Promise(function (resolve) {\n          resolve(streamSink.onPull?.());\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        break;\n      case StreamKind.ENQUEUE:\n        assert(streamController, \"enqueue should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.controller.enqueue(data.chunk);\n        break;\n      case StreamKind.CLOSE:\n        assert(streamController, \"close should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.isClosed = true;\n        streamController.controller.close();\n        this.#deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.ERROR:\n        assert(streamController, \"error should have stream controller\");\n        streamController.controller.error(wrapReason(data.reason));\n        this.#deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          streamController.cancelCall.resolve();\n        } else {\n          streamController.cancelCall.reject(wrapReason(data.reason));\n        }\n        this.#deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL:\n        if (!streamSink) {\n          break;\n        }\n\n        new Promise(function (resolve) {\n          resolve(streamSink.onCancel?.(wrapReason(data.reason)));\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        streamSink.sinkCapability.reject(wrapReason(data.reason));\n        streamSink.isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  async #deleteStreamController(streamController, streamId) {\n    // Delete the `streamController` only when the start, pull, and cancel\n    // capabilities have settled, to prevent `TypeError`s.\n    await Promise.allSettled([\n      streamController.startCall?.promise,\n      streamController.pullCall?.promise,\n      streamController.cancelCall?.promise,\n    ]);\n    delete this.streamControllers[streamId];\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n}\n\nexport { MessageHandler };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\nclass Metadata {\n  #metadataMap;\n\n  #data;\n\n  constructor({ parsedData, rawData }) {\n    this.#metadataMap = parsedData;\n    this.#data = rawData;\n  }\n\n  getRaw() {\n    return this.#data;\n  }\n\n  get(name) {\n    return this.#metadataMap.get(name) ?? null;\n  }\n\n  getAll() {\n    return objectFromMap(this.#metadataMap);\n  }\n\n  has(name) {\n    return this.#metadataMap.has(name);\n  }\n}\n\nexport { Metadata };\n", "/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap, unreachable, warn } from \"../shared/util.js\";\nimport { MurmurHash3_64 } from \"../shared/murmurhash3.js\";\n\nconst INTERNAL = Symbol(\"INTERNAL\");\n\nclass OptionalContentGroup {\n  #visible = true;\n\n  constructor(name, intent) {\n    this.name = name;\n    this.intent = intent;\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get visible() {\n    return this.#visible;\n  }\n\n  /**\n   * @ignore\n   */\n  _setVisible(internal, visible) {\n    if (internal !== INTERNAL) {\n      unreachable(\"Internal method `_setVisible` called.\");\n    }\n    this.#visible = visible;\n  }\n}\n\nclass OptionalContentConfig {\n  #cachedGetHash = null;\n\n  #groups = new Map();\n\n  #initialHash = null;\n\n  #order = null;\n\n  constructor(data) {\n    this.name = null;\n    this.creator = null;\n\n    if (data === null) {\n      return;\n    }\n    this.name = data.name;\n    this.creator = data.creator;\n    this.#order = data.order;\n    for (const group of data.groups) {\n      this.#groups.set(\n        group.id,\n        new OptionalContentGroup(group.name, group.intent)\n      );\n    }\n\n    if (data.baseState === \"OFF\") {\n      for (const group of this.#groups.values()) {\n        group._setVisible(INTERNAL, false);\n      }\n    }\n\n    for (const on of data.on) {\n      this.#groups.get(on)._setVisible(INTERNAL, true);\n    }\n\n    for (const off of data.off) {\n      this.#groups.get(off)._setVisible(INTERNAL, false);\n    }\n\n    // The following code must always run *last* in the constructor.\n    this.#initialHash = this.getHash();\n  }\n\n  #evaluateVisibilityExpression(array) {\n    const length = array.length;\n    if (length < 2) {\n      return true;\n    }\n    const operator = array[0];\n    for (let i = 1; i < length; i++) {\n      const element = array[i];\n      let state;\n      if (Array.isArray(element)) {\n        state = this.#evaluateVisibilityExpression(element);\n      } else if (this.#groups.has(element)) {\n        state = this.#groups.get(element).visible;\n      } else {\n        warn(`Optional content group not found: ${element}`);\n        return true;\n      }\n      switch (operator) {\n        case \"And\":\n          if (!state) {\n            return false;\n          }\n          break;\n        case \"Or\":\n          if (state) {\n            return true;\n          }\n          break;\n        case \"Not\":\n          return !state;\n        default:\n          return true;\n      }\n    }\n    return operator === \"And\";\n  }\n\n  isVisible(group) {\n    if (this.#groups.size === 0) {\n      return true;\n    }\n    if (!group) {\n      warn(\"Optional content group not defined.\");\n      return true;\n    }\n    if (group.type === \"OCG\") {\n      if (!this.#groups.has(group.id)) {\n        warn(`Optional content group not found: ${group.id}`);\n        return true;\n      }\n      return this.#groups.get(group.id).visible;\n    } else if (group.type === \"OCMD\") {\n      // Per the spec, the expression should be preferred if available.\n      if (group.expression) {\n        return this.#evaluateVisibilityExpression(group.expression);\n      }\n      if (!group.policy || group.policy === \"AnyOn\") {\n        // Default\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this.#groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOn\") {\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this.#groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      } else if (group.policy === \"AnyOff\") {\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this.#groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOff\") {\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this.#groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      }\n      warn(`Unknown optional content policy ${group.policy}.`);\n      return true;\n    }\n    warn(`Unknown group type ${group.type}.`);\n    return true;\n  }\n\n  setVisibility(id, visible = true) {\n    if (!this.#groups.has(id)) {\n      warn(`Optional content group not found: ${id}`);\n      return;\n    }\n    this.#groups.get(id)._setVisible(INTERNAL, !!visible);\n\n    this.#cachedGetHash = null;\n  }\n\n  get hasInitialVisibility() {\n    return this.getHash() === this.#initialHash;\n  }\n\n  getOrder() {\n    if (!this.#groups.size) {\n      return null;\n    }\n    if (this.#order) {\n      return this.#order.slice();\n    }\n    return [...this.#groups.keys()];\n  }\n\n  getGroups() {\n    return this.#groups.size > 0 ? objectFromMap(this.#groups) : null;\n  }\n\n  getGroup(id) {\n    return this.#groups.get(id) || null;\n  }\n\n  getHash() {\n    if (this.#cachedGetHash !== null) {\n      return this.#cachedGetHash;\n    }\n    const hash = new MurmurHash3_64();\n\n    for (const [id, group] of this.#groups) {\n      hash.update(`${id}:${group.visible}`);\n    }\n    return (this.#cachedGetHash = hash.hexdigest());\n  }\n}\n\nexport { OptionalContentConfig };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, PromiseCapability } from \"../shared/util.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\n/** @implements {IPDFStream} */\nclass PDFDataTransportStream {\n  constructor(\n    {\n      length,\n      initialData,\n      progressiveDone = false,\n      contentDispositionFilename = null,\n      disableRange = false,\n      disableStream = false,\n    },\n    pdfDataRangeTransport\n  ) {\n    assert(\n      pdfDataRangeTransport,\n      'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.'\n    );\n\n    this._queuedChunks = [];\n    this._progressiveDone = progressiveDone;\n    this._contentDispositionFilename = contentDispositionFilename;\n\n    if (initialData?.length > 0) {\n      // Prevent any possible issues by only transferring a Uint8Array that\n      // completely \"utilizes\" its underlying ArrayBuffer.\n      const buffer =\n        initialData instanceof Uint8Array &&\n        initialData.byteLength === initialData.buffer.byteLength\n          ? initialData.buffer\n          : new Uint8Array(initialData).buffer;\n      this._queuedChunks.push(buffer);\n    }\n\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\n    this._isStreamingSupported = !disableStream;\n    this._isRangeSupported = !disableRange;\n    this._contentLength = length;\n\n    this._fullRequestReader = null;\n    this._rangeReaders = [];\n\n    this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n      this._onReceiveData({ begin, chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n      this._onProgress({ loaded, total });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n      this._onReceiveData({ chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n      this._onProgressiveDone();\n    });\n\n    this._pdfDataRangeTransport.transportReady();\n  }\n\n  _onReceiveData({ begin, chunk }) {\n    // Prevent any possible issues by only transferring a Uint8Array that\n    // completely \"utilizes\" its underlying ArrayBuffer.\n    const buffer =\n      chunk instanceof Uint8Array &&\n      chunk.byteLength === chunk.buffer.byteLength\n        ? chunk.buffer\n        : new Uint8Array(chunk).buffer;\n\n    if (begin === undefined) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader._enqueue(buffer);\n      } else {\n        this._queuedChunks.push(buffer);\n      }\n    } else {\n      const found = this._rangeReaders.some(function (rangeReader) {\n        if (rangeReader._begin !== begin) {\n          return false;\n        }\n        rangeReader._enqueue(buffer);\n        return true;\n      });\n      assert(\n        found,\n        \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\"\n      );\n    }\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  _onProgress(evt) {\n    if (evt.total === undefined) {\n      // Reporting to first range reader, if it exists.\n      this._rangeReaders[0]?.onProgress?.({ loaded: evt.loaded });\n    } else {\n      this._fullRequestReader?.onProgress?.({\n        loaded: evt.loaded,\n        total: evt.total,\n      });\n    }\n  }\n\n  _onProgressiveDone() {\n    this._fullRequestReader?.progressiveDone();\n    this._progressiveDone = true;\n  }\n\n  _removeRangeReader(reader) {\n    const i = this._rangeReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFDataTransportStream.getFullReader can only be called once.\"\n    );\n    const queuedChunks = this._queuedChunks;\n    this._queuedChunks = null;\n    return new PDFDataTransportStreamReader(\n      this,\n      queuedChunks,\n      this._progressiveDone,\n      this._contentDispositionFilename\n    );\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n    this._pdfDataRangeTransport.requestDataRange(begin, end);\n    this._rangeReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n    this._pdfDataRangeTransport.abort();\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFDataTransportStreamReader {\n  constructor(\n    stream,\n    queuedChunks,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this._stream = stream;\n    this._done = progressiveDone || false;\n    this._filename = isPdfFile(contentDispositionFilename)\n      ? contentDispositionFilename\n      : null;\n    this._queuedChunks = queuedChunks || [];\n    this._loaded = 0;\n    for (const chunk of this._queuedChunks) {\n      this._loaded += chunk.byteLength;\n    }\n    this._requests = [];\n    this._headersReady = Promise.resolve();\n    stream._fullRequestReader = this;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // Ignore new data.\n    }\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunks.push(chunk);\n    }\n    this._loaded += chunk.byteLength;\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._stream._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._stream._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._stream._contentLength;\n  }\n\n  async read() {\n    if (this._queuedChunks.length > 0) {\n      const chunk = this._queuedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  progressiveDone() {\n    if (this._done) {\n      return;\n    }\n    this._done = true;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFDataTransportStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._begin = begin;\n    this._end = end;\n    this._queuedChunk = null;\n    this._requests = [];\n    this._done = false;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // ignore new data\n    }\n    if (this._requests.length === 0) {\n      this._queuedChunk = chunk;\n    } else {\n      const requestsCapability = this._requests.shift();\n      requestsCapability.resolve({ value: chunk, done: false });\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({ value: undefined, done: true });\n      }\n      this._requests.length = 0;\n    }\n    this._done = true;\n    this._stream._removeRangeReader(this);\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._queuedChunk) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._stream._removeRangeReader(this);\n  }\n}\n\nexport { PDFDataTransportStream };\n", "/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass XfaText {\n  /**\n   * Walk an XFA tree and create an array of text nodes that is compatible\n   * with a regular PDFs TextContent. Currently, only TextItem.str is supported,\n   * all other fields and styles haven't been implemented.\n   *\n   * @param {Object} xfa - An XFA fake DOM object.\n   *\n   * @returns {TextContent}\n   */\n  static textContent(xfa) {\n    const items = [];\n    const output = {\n      items,\n      styles: Object.create(null),\n    };\n    function walk(node) {\n      if (!node) {\n        return;\n      }\n      let str = null;\n      const name = node.name;\n      if (name === \"#text\") {\n        str = node.value;\n      } else if (!XfaText.shouldBuildText(name)) {\n        return;\n      } else if (node?.attributes?.textContent) {\n        str = node.attributes.textContent;\n      } else if (node.value) {\n        str = node.value;\n      }\n      if (str !== null) {\n        items.push({\n          str,\n        });\n      }\n      if (!node.children) {\n        return;\n      }\n      for (const child of node.children) {\n        walk(child);\n      }\n    }\n    walk(xfa);\n    return output;\n  }\n\n  /**\n   * @param {string} name - DOM node name. (lower case)\n   *\n   * @returns {boolean} true if the DOM node should have a corresponding text\n   * node.\n   */\n  static shouldBuildText(name) {\n    return !(\n      name === \"textarea\" ||\n      name === \"input\" ||\n      name === \"option\" ||\n      name === \"select\"\n    );\n  }\n}\n\nexport { XfaText };\n", "/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseFilterFactory,\n  BaseStandardFontDataFactory,\n} from \"./base_factory.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_utils.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst fetchData = function (url) {\n  return new Promise((resolve, reject) => {\n    const fs = __non_webpack_require__(\"fs\");\n    fs.readFile(url, (error, data) => {\n      if (error || !data) {\n        reject(new Error(error));\n        return;\n      }\n      resolve(new Uint8Array(data));\n    });\n  });\n};\n\nclass NodeFilterFactory extends BaseFilterFactory {}\n\nclass NodeCanvasFactory extends BaseCanvasFactory {\n  /**\n   * @ignore\n   */\n  _createCanvas(width, height) {\n    const Canvas = __non_webpack_require__(\"canvas\");\n    return Canvas.createCanvas(width, height);\n  }\n}\n\nclass NodeCMapReaderFactory extends BaseCMapReaderFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url, compressionType) {\n    return fetchData(url).then(data => {\n      return { cMapData: data, compressionType };\n    });\n  }\n}\n\nclass NodeStandardFontDataFactory extends BaseStandardFontDataFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url) {\n    return fetchData(url);\n  }\n}\n\nexport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeFilterFactory,\n  NodeStandardFontDataFactory,\n};\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  AbortException,\n  assert,\n  MissingPDFException,\n  PromiseCapability,\n} from \"../shared/util.js\";\nimport {\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst fs = __non_webpack_require__(\"fs\");\nconst http = __non_webpack_require__(\"http\");\nconst https = __non_webpack_require__(\"https\");\nconst url = __non_webpack_require__(\"url\");\n\nconst fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\nfunction parseUrl(sourceUrl) {\n  const parsedUrl = url.parse(sourceUrl);\n  if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n    return parsedUrl;\n  }\n  // Prepending 'file:///' to Windows absolute path.\n  if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n    return url.parse(`file:///${sourceUrl}`);\n  }\n  // Changes protocol to 'file:' if url refers to filesystem.\n  if (!parsedUrl.host) {\n    parsedUrl.protocol = \"file:\";\n  }\n  return parsedUrl;\n}\n\nclass PDFNodeStream {\n  constructor(source) {\n    this.source = source;\n    this.url = parseUrl(source.url);\n    this.isHttp =\n      this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n    // Check if url refers to filesystem.\n    this.isFsUrl = this.url.protocol === \"file:\";\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNodeStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = this.isFsUrl\n      ? new PDFNodeStreamFsFullReader(this)\n      : new PDFNodeStreamFullReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(start, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const rangeReader = this.isFsUrl\n      ? new PDFNodeStreamFsRangeReader(this, start, end)\n      : new PDFNodeStreamRangeReader(this, start, end);\n    this._rangeRequestReaders.push(rangeReader);\n    return rangeReader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\nclass BaseFullReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    const source = stream.source;\n    this._contentLength = source.length; // optional\n    this._loaded = 0;\n    this._filename = null;\n\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._readableStream = null;\n    this._readCapability = new PromiseCapability();\n    this._headersCapability = new PromiseCapability();\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = new PromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    this.onProgress?.({\n      loaded: this._loaded,\n      total: this._contentLength,\n    });\n\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readable to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // We need to stop reading when range is supported and streaming is\n    // disabled.\n    if (!this._isStreamingSupported && this._isRangeSupported) {\n      this._error(new AbortException(\"streaming is disabled\"));\n    }\n\n    // Destroy ReadableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nclass BaseRangeReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    this._loaded = 0;\n    this._readableStream = null;\n    this._readCapability = new PromiseCapability();\n    const source = stream.source;\n    this._isStreamingSupported = !source.disableStream;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = new PromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    this.onProgress?.({ loaded: this._loaded });\n\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readableStream to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // Destroy readableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nfunction createRequestOptions(parsedUrl, headers) {\n  return {\n    protocol: parsedUrl.protocol,\n    auth: parsedUrl.auth,\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.path,\n    method: \"GET\",\n    headers,\n  };\n}\n\nclass PDFNodeStreamFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      this._headersCapability.resolve();\n      this._setReadableStream(response);\n\n      const getResponseHeader = name => {\n        // Make sure that headers name are in lower case, as mentioned\n        // here: https://nodejs.org/api/http.html#http_message_headers.\n        return this._readableStream.headers[name.toLowerCase()];\n      };\n      const { allowRangeRequests, suggestedLength } =\n        validateRangeRequestCapabilities({\n          getResponseHeader,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange,\n        });\n\n      this._isRangeSupported = allowRangeRequests;\n      // Setting right content length.\n      this._contentLength = suggestedLength || this._contentLength;\n\n      this._filename = extractFilenameFromHeader(getResponseHeader);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n      this._headersCapability.reject(reason);\n    });\n    // Note: `request.end(data)` is used to write `data` to request body\n    // and notify end of request. But one should always call `request.end()`\n    // even if there is no data to write -- (to notify the end of request).\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    this._httpHeaders = {};\n    for (const property in stream.httpHeaders) {\n      const value = stream.httpHeaders[property];\n      if (value === undefined) {\n        continue;\n      }\n      this._httpHeaders[property] = value;\n    }\n    this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        return;\n      }\n      this._setReadableStream(response);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n    });\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamFsFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    fs.lstat(path, (error, stat) => {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          error = new MissingPDFException(`Missing PDF \"${path}\".`);\n        }\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      // Setting right content length.\n      this._contentLength = stat.size;\n\n      this._setReadableStream(fs.createReadStream(path));\n      this._headersCapability.resolve();\n    });\n  }\n}\n\nclass PDFNodeStreamFsRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    this._setReadableStream(fs.createReadStream(path, { start, end: end - 1 }));\n  }\n}\n\nexport { PDFNodeStream };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  MissingPDFException,\n  UnexpectedResponseException,\n} from \"../shared/util.js\";\nimport { getFilenameFromContentDispositionHeader } from \"./content_disposition.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\nfunction validateRangeRequestCapabilities({\n  getResponseHeader,\n  isHttp,\n  rangeChunkSize,\n  disableRange,\n}) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n    assert(\n      Number.isInteger(rangeChunkSize) && rangeChunkSize > 0,\n      \"rangeChunkSize must be an integer larger than zero.\"\n    );\n  }\n  const returnValues = {\n    allowRangeRequests: false,\n    suggestedLength: undefined,\n  };\n\n  const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n  if (!Number.isInteger(length)) {\n    return returnValues;\n  }\n\n  returnValues.suggestedLength = length;\n\n  if (length <= 2 * rangeChunkSize) {\n    // The file size is smaller than the size of two chunks, so it does not\n    // make any sense to abort the request and retry with a range request.\n    return returnValues;\n  }\n\n  if (disableRange || !isHttp) {\n    return returnValues;\n  }\n  if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n    return returnValues;\n  }\n\n  const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n  if (contentEncoding !== \"identity\") {\n    return returnValues;\n  }\n\n  returnValues.allowRangeRequests = true;\n  return returnValues;\n}\n\nfunction extractFilenameFromHeader(getResponseHeader) {\n  const contentDisposition = getResponseHeader(\"Content-Disposition\");\n  if (contentDisposition) {\n    let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n    if (filename.includes(\"%\")) {\n      try {\n        filename = decodeURIComponent(filename);\n      } catch (ex) {}\n    }\n    if (isPdfFile(filename)) {\n      return filename;\n    }\n  }\n  return null;\n}\n\nfunction createResponseStatusError(status, url) {\n  if (status === 404 || (status === 0 && url.startsWith(\"file:\"))) {\n    return new MissingPDFException('Missing PDF \"' + url + '\".');\n  }\n  return new UnexpectedResponseException(\n    `Unexpected server response (${status}) while retrieving PDF \"${url}\".`,\n    status\n  );\n}\n\nfunction validateResponseStatus(status) {\n  return status === 200 || status === 206;\n}\n\nexport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n};\n", "/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringToBytes } from \"../shared/util.js\";\n\n// This getFilenameFromContentDispositionHeader function is adapted from\n// https://github.com/Rob--W/open-in-browser/blob/7e2e35a38b8b4e981b11da7b2f01df0149049e92/extension/content-disposition.js\n// with the following changes:\n// - Modified to conform to PDF.js's coding style.\n// - Move return to the end of the function to prevent Babel from dropping the\n//   function declarations.\n\n/**\n * Extract file name from the Content-Disposition HTTP response header.\n *\n * @param {string} contentDisposition\n * @returns {string} Filename, if found in the Content-Disposition header.\n */\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\n  let needsEncodingFixup = true;\n\n  // filename*=ext-value (\"ext-value\" from RFC 5987, referenced by RFC 6266).\n  let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = unescape(filename);\n    filename = rfc5987decode(filename);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // Continuations (RFC 2231 section 3, referenced by RFC 5987 section 3.1).\n  // filename*n*=part\n  // filename*n=part\n  tmp = rfc2231getparam(contentDisposition);\n  if (tmp) {\n    // RFC 2047, section\n    const filename = rfc2047decode(tmp);\n    return fixupEncoding(filename);\n  }\n\n  // filename=value (RFC 5987, section 4.1).\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // After this line there are only function declarations. We cannot put\n  // \"return\" here for readability because babel would then drop the function\n  // declarations...\n  function toParamRegExp(attributePattern, flags) {\n    return new RegExp(\n      \"(?:^|;)\\\\s*\" +\n        attributePattern +\n        \"\\\\s*=\\\\s*\" +\n        // Captures: value = token | quoted-string\n        // (RFC 2616, section 3.6 and referenced by RFC 6266 4.1)\n        \"(\" +\n        '[^\";\\\\s][^;\\\\s]*' +\n        \"|\" +\n        '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' +\n        \")\",\n      flags\n    );\n  }\n  function textdecode(encoding, value) {\n    if (encoding) {\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\n        return value;\n      }\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const buffer = stringToBytes(value);\n        value = decoder.decode(buffer);\n        needsEncodingFixup = false;\n      } catch (e) {\n        // TextDecoder constructor threw - unrecognized encoding.\n      }\n    }\n    return value;\n  }\n  function fixupEncoding(value) {\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n      // Maybe multi-byte UTF-8.\n      value = textdecode(\"utf-8\", value);\n      if (needsEncodingFixup) {\n        // Try iso-8859-1 encoding.\n        value = textdecode(\"iso-8859-1\", value);\n      }\n    }\n    return value;\n  }\n  function rfc2231getparam(contentDispositionStr) {\n    const matches = [];\n    let match;\n    // Iterate over all filename*n= and filename*n*= with n being an integer\n    // of at least zero. Any non-zero number must not start with '0'.\n    const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\n      let [, n, quot, part] = match; // eslint-disable-line prefer-const\n      n = parseInt(n, 10);\n      if (n in matches) {\n        // Ignore anything after the invalid second filename*0.\n        if (n === 0) {\n          break;\n        }\n        continue;\n      }\n      matches[n] = [quot, part];\n    }\n    const parts = [];\n    for (let n = 0; n < matches.length; ++n) {\n      if (!(n in matches)) {\n        // Numbers must be consecutive. Truncate when there is a hole.\n        break;\n      }\n      let [quot, part] = matches[n]; // eslint-disable-line prefer-const\n      part = rfc2616unquote(part);\n      if (quot) {\n        part = unescape(part);\n        if (n === 0) {\n          part = rfc5987decode(part);\n        }\n      }\n      parts.push(part);\n    }\n    return parts.join(\"\");\n  }\n  function rfc2616unquote(value) {\n    if (value.startsWith('\"')) {\n      const parts = value.slice(1).split('\\\\\"');\n      // Find the first unescaped \" and terminate there.\n      for (let i = 0; i < parts.length; ++i) {\n        const quotindex = parts[i].indexOf('\"');\n        if (quotindex !== -1) {\n          parts[i] = parts[i].slice(0, quotindex);\n          parts.length = i + 1; // Truncates and stop the iteration.\n        }\n        parts[i] = parts[i].replaceAll(/\\\\(.)/g, \"$1\");\n      }\n      value = parts.join('\"');\n    }\n    return value;\n  }\n  function rfc5987decode(extvalue) {\n    // Decodes \"ext-value\" from RFC 5987.\n    const encodingend = extvalue.indexOf(\"'\");\n    if (encodingend === -1) {\n      // Some servers send \"filename*=\" without encoding 'language' prefix,\n      // e.g. in https://github.com/Rob--W/open-in-browser/issues/26\n      // Let's accept the value like Firefox (57) (Chrome 62 rejects it).\n      return extvalue;\n    }\n    const encoding = extvalue.slice(0, encodingend);\n    const langvalue = extvalue.slice(encodingend + 1);\n    // Ignore language (RFC 5987 section 3.2.1, and RFC 6266 section 4.1 ).\n    const value = langvalue.replace(/^[^']*'/, \"\");\n    return textdecode(encoding, value);\n  }\n  function rfc2047decode(value) {\n    // RFC 2047-decode the result. Firefox tried to drop support for it, but\n    // backed out because some servers use it - https://bugzil.la/875615\n    // Firefox's condition for decoding is here: https://searchfox.org/mozilla-central/rev/4a590a5a15e35d88a3b23dd6ac3c471cf85b04a8/netwerk/mime/nsMIMEHeaderParamImpl.cpp#742-748\n\n    // We are more strict and only recognize RFC 2047-encoding if the value\n    // starts with \"=?\", since then it is likely that the full value is\n    // RFC 2047-encoded.\n\n    // Firefox also decodes words even where RFC 2047 section 5 states:\n    // \"An 'encoded-word' MUST NOT appear within a 'quoted-string'.\"\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n      return value;\n    }\n    // RFC 2047, section 2.4\n    // encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n    // charset = token (but let's restrict to characters that denote a\n    //       possibly valid encoding).\n    // encoding = q or b\n    // encoded-text = any printable ASCII character other than ? or space.\n    //        ... but Firefox permits ? and space.\n    return value.replaceAll(\n      /=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g,\n      function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          // RFC 2047 section 4.2.\n          text = text.replaceAll(\"_\", \" \");\n          text = text.replaceAll(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        } // else encoding is b or B - base64 (RFC 2047 section 4.1)\n        try {\n          text = atob(text);\n        } catch (e) {}\n        return textdecode(charset, text);\n      }\n    );\n  }\n\n  return \"\";\n}\n\nexport { getFilenameFromContentDispositionHeader };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, PromiseCapability, stringToBytes } from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./network.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst OK_RESPONSE = 200;\nconst PARTIAL_CONTENT_RESPONSE = 206;\n\nfunction getArrayBuffer(xhr) {\n  const data = xhr.response;\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  return stringToBytes(data).buffer;\n}\n\nclass NetworkManager {\n  constructor(url, args = {}) {\n    this.url = url;\n    this.isHttp = /^https?:/i.test(url);\n    this.httpHeaders = (this.isHttp && args.httpHeaders) || Object.create(null);\n    this.withCredentials = args.withCredentials || false;\n\n    this.currXhrId = 0;\n    this.pendingRequests = Object.create(null);\n  }\n\n  requestRange(begin, end, listeners) {\n    const args = {\n      begin,\n      end,\n    };\n    for (const prop in listeners) {\n      args[prop] = listeners[prop];\n    }\n    return this.request(args);\n  }\n\n  requestFull(listeners) {\n    return this.request(listeners);\n  }\n\n  request(args) {\n    const xhr = new XMLHttpRequest();\n    const xhrId = this.currXhrId++;\n    const pendingRequest = (this.pendingRequests[xhrId] = { xhr });\n\n    xhr.open(\"GET\", this.url);\n    xhr.withCredentials = this.withCredentials;\n    for (const property in this.httpHeaders) {\n      const value = this.httpHeaders[property];\n      if (value === undefined) {\n        continue;\n      }\n      xhr.setRequestHeader(property, value);\n    }\n    if (this.isHttp && \"begin\" in args && \"end\" in args) {\n      xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n    } else {\n      pendingRequest.expectedStatus = OK_RESPONSE;\n    }\n    xhr.responseType = \"arraybuffer\";\n\n    if (args.onError) {\n      xhr.onerror = function (evt) {\n        args.onError(xhr.status);\n      };\n    }\n    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n    xhr.onprogress = this.onProgress.bind(this, xhrId);\n\n    pendingRequest.onHeadersReceived = args.onHeadersReceived;\n    pendingRequest.onDone = args.onDone;\n    pendingRequest.onError = args.onError;\n    pendingRequest.onProgress = args.onProgress;\n\n    xhr.send(null);\n\n    return xhrId;\n  }\n\n  onProgress(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n    pendingRequest.onProgress?.(evt);\n  }\n\n  onStateChange(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n\n    const xhr = pendingRequest.xhr;\n    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n      pendingRequest.onHeadersReceived();\n      delete pendingRequest.onHeadersReceived;\n    }\n\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (!(xhrId in this.pendingRequests)) {\n      // The XHR request might have been aborted in onHeadersReceived()\n      // callback, in which case we should abort request.\n      return;\n    }\n\n    delete this.pendingRequests[xhrId];\n\n    // Success status == 0 can be on ftp, file and other protocols.\n    if (xhr.status === 0 && this.isHttp) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n    const xhrStatus = xhr.status || OK_RESPONSE;\n\n    // From http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2:\n    // \"A server MAY ignore the Range header\". This means it's possible to\n    // get a 200 rather than a 206 response from a range request.\n    const ok_response_on_range_request =\n      xhrStatus === OK_RESPONSE &&\n      pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n    if (\n      !ok_response_on_range_request &&\n      xhrStatus !== pendingRequest.expectedStatus\n    ) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n\n    const chunk = getArrayBuffer(xhr);\n    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n      const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n      const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n      pendingRequest.onDone({\n        begin: parseInt(matches[1], 10),\n        chunk,\n      });\n    } else if (chunk) {\n      pendingRequest.onDone({\n        begin: 0,\n        chunk,\n      });\n    } else {\n      pendingRequest.onError?.(xhr.status);\n    }\n  }\n\n  getRequestXhr(xhrId) {\n    return this.pendingRequests[xhrId].xhr;\n  }\n\n  isPendingRequest(xhrId) {\n    return xhrId in this.pendingRequests;\n  }\n\n  abortRequest(xhrId) {\n    const xhr = this.pendingRequests[xhrId].xhr;\n    delete this.pendingRequests[xhrId];\n    xhr.abort();\n  }\n}\n\n/** @implements {IPDFStream} */\nclass PDFNetworkStream {\n  constructor(source) {\n    this._source = source;\n    this._manager = new NetworkManager(source.url, {\n      httpHeaders: source.httpHeaders,\n      withCredentials: source.withCredentials,\n    });\n    this._rangeChunkSize = source.rangeChunkSize;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _onRangeRequestReaderClosed(reader) {\n    const i = this._rangeRequestReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeRequestReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNetworkStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(\n      this._manager,\n      this._source\n    );\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFNetworkStreamRangeRequestReader(\n      this._manager,\n      begin,\n      end\n    );\n    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFNetworkStreamFullRequestReader {\n  constructor(manager, source) {\n    this._manager = manager;\n\n    const args = {\n      onHeadersReceived: this._onHeadersReceived.bind(this),\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = source.url;\n    this._fullRequestId = manager.requestFull(args);\n    this._headersReceivedCapability = new PromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._contentLength = source.length; // Optional\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = false;\n    this._isRangeSupported = false;\n\n    this._cachedChunks = [];\n    this._requests = [];\n    this._done = false;\n    this._storedError = undefined;\n    this._filename = null;\n\n    this.onProgress = null;\n  }\n\n  _onHeadersReceived() {\n    const fullRequestXhrId = this._fullRequestId;\n    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n    const getResponseHeader = name => {\n      return fullRequestXhr.getResponseHeader(name);\n    };\n    const { allowRangeRequests, suggestedLength } =\n      validateRangeRequestCapabilities({\n        getResponseHeader,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange,\n      });\n\n    if (allowRangeRequests) {\n      this._isRangeSupported = true;\n    }\n    // Setting right content length.\n    this._contentLength = suggestedLength || this._contentLength;\n\n    this._filename = extractFilenameFromHeader(getResponseHeader);\n\n    if (this._isRangeSupported) {\n      // NOTE: by cancelling the full request, and then issuing range\n      // requests, there will be an issue for sites where you can only\n      // request the pdf once. However, if this is the case, then the\n      // server should not be returning that it can support range requests.\n      this._manager.abortRequest(fullRequestXhrId);\n    }\n\n    this._headersReceivedCapability.resolve();\n  }\n\n  _onDone(data) {\n    if (data) {\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({ value: data.chunk, done: false });\n      } else {\n        this._cachedChunks.push(data.chunk);\n      }\n    }\n    this._done = true;\n    if (this._cachedChunks.length > 0) {\n      return;\n    }\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    this._headersReceivedCapability.reject(this._storedError);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._cachedChunks.length = 0;\n  }\n\n  _onProgress(evt) {\n    this.onProgress?.({\n      loaded: evt.loaded,\n      total: evt.lengthComputable ? evt.total : this._contentLength,\n    });\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get headersReady() {\n    return this._headersReceivedCapability.promise;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._cachedChunks.length > 0) {\n      const chunk = this._cachedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._headersReceivedCapability.reject(reason);\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._fullRequestId)) {\n      this._manager.abortRequest(this._fullRequestId);\n    }\n    this._fullRequestReader = null;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFNetworkStreamRangeRequestReader {\n  constructor(manager, begin, end) {\n    this._manager = manager;\n\n    const args = {\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = manager.url;\n    this._requestId = manager.requestRange(begin, end, args);\n    this._requests = [];\n    this._queuedChunk = null;\n    this._done = false;\n    this._storedError = undefined;\n\n    this.onProgress = null;\n    this.onClosed = null;\n  }\n\n  _close() {\n    this.onClosed?.(this);\n  }\n\n  _onDone(data) {\n    const chunk = data.chunk;\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunk = chunk;\n    }\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._close();\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._queuedChunk = null;\n  }\n\n  _onProgress(evt) {\n    if (!this.isStreamingSupported) {\n      this.onProgress?.({ loaded: evt.loaded });\n    }\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._queuedChunk !== null) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._requestId)) {\n      this._manager.abortRequest(this._requestId);\n    }\n    this._close();\n  }\n}\n\nexport { PDFNetworkStream };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  PromiseCapability,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./fetch_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nfunction createFetchOptions(headers, withCredentials, abortController) {\n  return {\n    method: \"GET\",\n    headers,\n    signal: abortController.signal,\n    mode: \"cors\",\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    redirect: \"follow\",\n  };\n}\n\nfunction createHeaders(httpHeaders) {\n  const headers = new Headers();\n  for (const property in httpHeaders) {\n    const value = httpHeaders[property];\n    if (value === undefined) {\n      continue;\n    }\n    headers.append(property, value);\n  }\n  return headers;\n}\n\nfunction getArrayBuffer(val) {\n  if (val instanceof Uint8Array) {\n    return val.buffer;\n  }\n  if (val instanceof ArrayBuffer) {\n    return val;\n  }\n  warn(`getArrayBuffer - unexpected data format: ${val}`);\n  return new Uint8Array(val).buffer;\n}\n\n/** @implements {IPDFStream} */\nclass PDFFetchStream {\n  constructor(source) {\n    this.source = source;\n    this.isHttp = /^https?:/i.test(source.url);\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFFetchStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFFetchStreamReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFFetchStreamReader {\n  constructor(stream) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    this._filename = null;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._contentLength = source.length;\n    this._headersCapability = new PromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._abortController = new AbortController();\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._reader = response.body.getReader();\n        this._headersCapability.resolve();\n\n        const getResponseHeader = name => {\n          return response.headers.get(name);\n        };\n        const { allowRangeRequests, suggestedLength } =\n          validateRangeRequestCapabilities({\n            getResponseHeader,\n            isHttp: this._stream.isHttp,\n            rangeChunkSize: this._rangeChunkSize,\n            disableRange: this._disableRange,\n          });\n\n        this._isRangeSupported = allowRangeRequests;\n        // Setting right content length.\n        this._contentLength = suggestedLength || this._contentLength;\n\n        this._filename = extractFilenameFromHeader(getResponseHeader);\n\n        // We need to stop reading when range is supported and streaming is\n        // disabled.\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new AbortException(\"Streaming is disabled.\"));\n        }\n      })\n      .catch(this._headersCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._headersCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    this.onProgress?.({\n      loaded: this._loaded,\n      total: this._contentLength,\n    });\n\n    return { value: getArrayBuffer(value), done: false };\n  }\n\n  cancel(reason) {\n    this._reader?.cancel(reason);\n    this._abortController.abort();\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFFetchStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._readCapability = new PromiseCapability();\n    this._isStreamingSupported = !source.disableStream;\n\n    this._abortController = new AbortController();\n    this._headers = createHeaders(this._stream.httpHeaders);\n    this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._readCapability.resolve();\n        this._reader = response.body.getReader();\n      })\n      .catch(this._readCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    this.onProgress?.({ loaded: this._loaded });\n\n    return { value: getArrayBuffer(value), done: false };\n  }\n\n  cancel(reason) {\n    this._reader?.cancel(reason);\n    this._abortController.abort();\n  }\n}\n\nexport { PDFFetchStream };\n", "/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n/** @typedef {import(\"./api\").TextContent} TextContent */\n\nimport {\n  AbortException,\n  FeatureTest,\n  PromiseCapability,\n  Util,\n} from \"../shared/util.js\";\nimport { deprecated, setLayerDimensions } from \"./display_utils.js\";\n\n/**\n * Text layer render parameters.\n *\n * @typedef {Object} TextLayerRenderParameters\n * @property {ReadableStream | TextContent} textContentSource - Text content to\n *   render, i.e. the value returned by the page's `streamTextContent` or\n *   `getTextContent` method.\n * @property {HTMLElement} container - The DOM node that will contain the text\n *   runs.\n * @property {PageViewport} viewport - The target viewport to properly layout\n *   the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that correspond to\n *   the text items of the textContent input.\n *   This is output and shall initially be set to an empty array.\n * @property {WeakMap<HTMLElement,Object>} [textDivProperties] - Some properties\n *   weakly mapped to the HTML elements used to render the text.\n * @property {Array<string>} [textContentItemsStr] - Strings that correspond to\n *   the `str` property of the text items of the textContent input.\n *   This is output and shall initially be set to an empty array.\n * @property {boolean} [isOffscreenCanvasSupported] true if we can use\n *   OffscreenCanvas to measure string widths.\n */\n\n/**\n * Text layer update parameters.\n *\n * @typedef {Object} TextLayerUpdateParameters\n * @property {HTMLElement} container - The DOM node that will contain the text\n *   runs.\n * @property {PageViewport} viewport - The target viewport to properly layout\n *   the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that correspond to\n *   the text items of the textContent input.\n *   This is output and shall initially be set to an empty array.\n * @property {WeakMap<HTMLElement,Object>} [textDivProperties] - Some properties\n *   weakly mapped to the HTML elements used to render the text.\n * @property {boolean} [isOffscreenCanvasSupported] true if we can use\n *   OffscreenCanvas to measure string widths.\n * @property {boolean} [mustRotate] true if the text layer must be rotated.\n * @property {boolean} [mustRescale] true if the text layer contents must be\n *   rescaled.\n */\n\nconst MAX_TEXT_DIVS_TO_RENDER = 100000;\nconst DEFAULT_FONT_SIZE = 30;\nconst DEFAULT_FONT_ASCENT = 0.8;\nconst ascentCache = new Map();\n\nfunction getCtx(size, isOffscreenCanvasSupported) {\n  let ctx;\n  if (isOffscreenCanvasSupported && FeatureTest.isOffscreenCanvasSupported) {\n    ctx = new OffscreenCanvas(size, size).getContext(\"2d\", { alpha: false });\n  } else {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = canvas.height = size;\n    ctx = canvas.getContext(\"2d\", { alpha: false });\n  }\n\n  return ctx;\n}\n\nfunction getAscent(fontFamily, isOffscreenCanvasSupported) {\n  const cachedAscent = ascentCache.get(fontFamily);\n  if (cachedAscent) {\n    return cachedAscent;\n  }\n\n  const ctx = getCtx(DEFAULT_FONT_SIZE, isOffscreenCanvasSupported);\n\n  ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n  const metrics = ctx.measureText(\"\");\n\n  // Both properties aren't available by default in Firefox.\n  let ascent = metrics.fontBoundingBoxAscent;\n  let descent = Math.abs(metrics.fontBoundingBoxDescent);\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n\n    ctx.canvas.width = ctx.canvas.height = 0;\n    return ratio;\n  }\n\n  // Try basic heuristic to guess ascent/descent.\n  // Draw a g with baseline at 0,0 and then get the line\n  // number where a pixel has non-null red component (starting\n  // from bottom).\n  ctx.strokeStyle = \"red\";\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"g\", 0, 0);\n  let pixels = ctx.getImageData(\n    0,\n    0,\n    DEFAULT_FONT_SIZE,\n    DEFAULT_FONT_SIZE\n  ).data;\n  descent = 0;\n  for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n    if (pixels[i] > 0) {\n      descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  // Draw an A with baseline at 0,DEFAULT_FONT_SIZE and then get the line\n  // number where a pixel has non-null red component (starting\n  // from top).\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n  pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n  ascent = 0;\n  for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n    if (pixels[i] > 0) {\n      ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  ctx.canvas.width = ctx.canvas.height = 0;\n\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n  return DEFAULT_FONT_ASCENT;\n}\n\nfunction appendText(task, geom, styles) {\n  // Initialize all used properties to keep the caches monomorphic.\n  const textDiv = document.createElement(\"span\");\n  const textDivProperties = {\n    angle: 0,\n    canvasWidth: 0,\n    hasText: geom.str !== \"\",\n    hasEOL: geom.hasEOL,\n    fontSize: 0,\n  };\n  task._textDivs.push(textDiv);\n\n  const tx = Util.transform(task._transform, geom.transform);\n  let angle = Math.atan2(tx[1], tx[0]);\n  const style = styles[geom.fontName];\n  if (style.vertical) {\n    angle += Math.PI / 2;\n  }\n  const fontHeight = Math.hypot(tx[2], tx[3]);\n  const fontAscent =\n    fontHeight * getAscent(style.fontFamily, task._isOffscreenCanvasSupported);\n\n  let left, top;\n  if (angle === 0) {\n    left = tx[4];\n    top = tx[5] - fontAscent;\n  } else {\n    left = tx[4] + fontAscent * Math.sin(angle);\n    top = tx[5] - fontAscent * Math.cos(angle);\n  }\n\n  const scaleFactorStr = \"calc(var(--scale-factor)*\";\n  const divStyle = textDiv.style;\n  // Setting the style properties individually, rather than all at once,\n  // should be OK since the `textDiv` isn't appended to the document yet.\n  if (task._container === task._rootContainer) {\n    divStyle.left = `${((100 * left) / task._pageWidth).toFixed(2)}%`;\n    divStyle.top = `${((100 * top) / task._pageHeight).toFixed(2)}%`;\n  } else {\n    // We're in a marked content span, hence we can't use percents.\n    divStyle.left = `${scaleFactorStr}${left.toFixed(2)}px)`;\n    divStyle.top = `${scaleFactorStr}${top.toFixed(2)}px)`;\n  }\n  divStyle.fontSize = `${scaleFactorStr}${fontHeight.toFixed(2)}px)`;\n  divStyle.fontFamily = style.fontFamily;\n\n  textDivProperties.fontSize = fontHeight;\n\n  // Keeps screen readers from pausing on every new text span.\n  textDiv.setAttribute(\"role\", \"presentation\");\n\n  textDiv.textContent = geom.str;\n  // geom.dir may be 'ttb' for vertical texts.\n  textDiv.dir = geom.dir;\n\n  // `fontName` is only used by the FontInspector, and we only use `dataset`\n  // here to make the font name available in the debugger.\n  if (task._fontInspectorEnabled) {\n    textDiv.dataset.fontName = geom.fontName;\n  }\n  if (angle !== 0) {\n    textDivProperties.angle = angle * (180 / Math.PI);\n  }\n  // We don't bother scaling single-char text divs, because it has very\n  // little effect on text highlighting. This makes scrolling on docs with\n  // lots of such divs a lot faster.\n  let shouldScaleText = false;\n  if (geom.str.length > 1) {\n    shouldScaleText = true;\n  } else if (geom.str !== \" \" && geom.transform[0] !== geom.transform[3]) {\n    const absScaleX = Math.abs(geom.transform[0]),\n      absScaleY = Math.abs(geom.transform[3]);\n    // When the horizontal/vertical scaling differs significantly, also scale\n    // even single-char text to improve highlighting (fixes issue11713.pdf).\n    if (\n      absScaleX !== absScaleY &&\n      Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5\n    ) {\n      shouldScaleText = true;\n    }\n  }\n  if (shouldScaleText) {\n    textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;\n  }\n  task._textDivProperties.set(textDiv, textDivProperties);\n  if (task._isReadableStream) {\n    task._layoutText(textDiv);\n  }\n}\n\nfunction layout(params) {\n  const { div, scale, properties, ctx, prevFontSize, prevFontFamily } = params;\n  const { style } = div;\n  let transform = \"\";\n  if (properties.canvasWidth !== 0 && properties.hasText) {\n    const { fontFamily } = style;\n    const { canvasWidth, fontSize } = properties;\n\n    if (prevFontSize !== fontSize || prevFontFamily !== fontFamily) {\n      ctx.font = `${fontSize * scale}px ${fontFamily}`;\n      params.prevFontSize = fontSize;\n      params.prevFontFamily = fontFamily;\n    }\n\n    // Only measure the width for multi-char text divs, see `appendText`.\n    const { width } = ctx.measureText(div.textContent);\n\n    if (width > 0) {\n      transform = `scaleX(${(canvasWidth * scale) / width})`;\n    }\n  }\n  if (properties.angle !== 0) {\n    transform = `rotate(${properties.angle}deg) ${transform}`;\n  }\n  if (transform.length > 0) {\n    style.transform = transform;\n  }\n}\n\nfunction render(task) {\n  if (task._canceled) {\n    return;\n  }\n  const textDivs = task._textDivs;\n  const capability = task._capability;\n  const textDivsLength = textDivs.length;\n\n  // No point in rendering many divs as it would make the browser\n  // unusable even after the divs are rendered.\n  if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n    capability.resolve();\n    return;\n  }\n\n  if (!task._isReadableStream) {\n    for (const textDiv of textDivs) {\n      task._layoutText(textDiv);\n    }\n  }\n  capability.resolve();\n}\n\nclass TextLayerRenderTask {\n  constructor({\n    textContentSource,\n    container,\n    viewport,\n    textDivs,\n    textDivProperties,\n    textContentItemsStr,\n    isOffscreenCanvasSupported,\n  }) {\n    this._textContentSource = textContentSource;\n    this._isReadableStream = textContentSource instanceof ReadableStream;\n    this._container = this._rootContainer = container;\n    this._textDivs = textDivs || [];\n    this._textContentItemsStr = textContentItemsStr || [];\n    this._isOffscreenCanvasSupported = isOffscreenCanvasSupported;\n    this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n\n    this._reader = null;\n    this._textDivProperties = textDivProperties || new WeakMap();\n    this._canceled = false;\n    this._capability = new PromiseCapability();\n    this._layoutTextParams = {\n      prevFontSize: null,\n      prevFontFamily: null,\n      div: null,\n      scale: viewport.scale * (globalThis.devicePixelRatio || 1),\n      properties: null,\n      ctx: getCtx(0, isOffscreenCanvasSupported),\n    };\n    const { pageWidth, pageHeight, pageX, pageY } = viewport.rawDims;\n    this._transform = [1, 0, 0, -1, -pageX, pageY + pageHeight];\n    this._pageWidth = pageWidth;\n    this._pageHeight = pageHeight;\n\n    setLayerDimensions(container, viewport);\n\n    // Always clean-up the temporary canvas once rendering is no longer pending.\n    this._capability.promise\n      .finally(() => {\n        this._layoutTextParams = null;\n      })\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n  }\n\n  /**\n   * Promise for textLayer rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Cancel rendering of the textLayer.\n   */\n  cancel() {\n    this._canceled = true;\n    if (this._reader) {\n      this._reader\n        .cancel(new AbortException(\"TextLayer task cancelled.\"))\n        .catch(() => {\n          // Avoid \"Uncaught promise\" messages in the console.\n        });\n      this._reader = null;\n    }\n    this._capability.reject(new AbortException(\"TextLayer task cancelled.\"));\n  }\n\n  /**\n   * @private\n   */\n  _processItems(items, styleCache) {\n    for (const item of items) {\n      if (item.str === undefined) {\n        if (\n          item.type === \"beginMarkedContentProps\" ||\n          item.type === \"beginMarkedContent\"\n        ) {\n          const parent = this._container;\n          this._container = document.createElement(\"span\");\n          this._container.classList.add(\"markedContent\");\n          if (item.id !== null) {\n            this._container.setAttribute(\"id\", `${item.id}`);\n          }\n          parent.append(this._container);\n        } else if (item.type === \"endMarkedContent\") {\n          this._container = this._container.parentNode;\n        }\n        continue;\n      }\n      this._textContentItemsStr.push(item.str);\n      appendText(this, item, styleCache);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _layoutText(textDiv) {\n    const textDivProperties = (this._layoutTextParams.properties =\n      this._textDivProperties.get(textDiv));\n    this._layoutTextParams.div = textDiv;\n    layout(this._layoutTextParams);\n\n    if (textDivProperties.hasText) {\n      this._container.append(textDiv);\n    }\n    if (textDivProperties.hasEOL) {\n      const br = document.createElement(\"br\");\n      br.setAttribute(\"role\", \"presentation\");\n      this._container.append(br);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _render() {\n    const capability = new PromiseCapability();\n    let styleCache = Object.create(null);\n\n    if (this._isReadableStream) {\n      const pump = () => {\n        this._reader.read().then(({ value, done }) => {\n          if (done) {\n            capability.resolve();\n            return;\n          }\n\n          Object.assign(styleCache, value.styles);\n          this._processItems(value.items, styleCache);\n          pump();\n        }, capability.reject);\n      };\n\n      this._reader = this._textContentSource.getReader();\n      pump();\n    } else if (this._textContentSource) {\n      const { items, styles } = this._textContentSource;\n      this._processItems(items, styles);\n      capability.resolve();\n    } else {\n      throw new Error('No \"textContentSource\" parameter specified.');\n    }\n\n    capability.promise.then(() => {\n      styleCache = null;\n      render(this);\n    }, this._capability.reject);\n  }\n}\n\n/**\n * @param {TextLayerRenderParameters} params\n * @returns {TextLayerRenderTask}\n */\nfunction renderTextLayer(params) {\n  if (\n    (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n    !params.textContentSource &&\n    (params.textContent || params.textContentStream)\n  ) {\n    deprecated(\n      \"The TextLayerRender `textContent`/`textContentStream` parameters \" +\n        \"will be removed in the future, please use `textContentSource` instead.\"\n    );\n    params.textContentSource = params.textContent || params.textContentStream;\n  }\n  if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC && !TESTING\")) {\n    const { container, viewport } = params;\n    const style = getComputedStyle(container);\n    const visibility = style.getPropertyValue(\"visibility\");\n    const scaleFactor = parseFloat(style.getPropertyValue(\"--scale-factor\"));\n\n    if (\n      visibility === \"visible\" &&\n      (!scaleFactor || Math.abs(scaleFactor - viewport.scale) > 1e-5)\n    ) {\n      console.error(\n        \"The `--scale-factor` CSS-variable must be set, \" +\n          \"to the same value as `viewport.scale`, \" +\n          \"either on the `container`-element itself or higher up in the DOM.\"\n      );\n    }\n  }\n  const task = new TextLayerRenderTask(params);\n  task._render();\n  return task;\n}\n\n/**\n * @param {TextLayerUpdateParameters} params\n * @returns {undefined}\n */\nfunction updateTextLayer({\n  container,\n  viewport,\n  textDivs,\n  textDivProperties,\n  isOffscreenCanvasSupported,\n  mustRotate = true,\n  mustRescale = true,\n}) {\n  if (mustRotate) {\n    setLayerDimensions(container, { rotation: viewport.rotation });\n  }\n\n  if (mustRescale) {\n    const ctx = getCtx(0, isOffscreenCanvasSupported);\n    const scale = viewport.scale * (globalThis.devicePixelRatio || 1);\n    const params = {\n      prevFontSize: null,\n      prevFontFamily: null,\n      div: null,\n      scale,\n      properties: null,\n      ctx,\n    };\n    for (const div of textDivs) {\n      params.properties = textDivProperties.get(div);\n      params.div = div;\n      layout(params);\n    }\n  }\n}\n\nexport { renderTextLayer, TextLayerRenderTask, updateTextLayer };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./editor.js\").AnnotationEditor} AnnotationEditor */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./tools.js\").AnnotationEditorUIManager} AnnotationEditorUIManager */\n/** @typedef {import(\"../display_utils.js\").PageViewport} PageViewport */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"../../web/text_accessibility.js\").TextAccessibilityManager} TextAccessibilityManager */\n/** @typedef {import(\"../../web/interfaces\").IL10n} IL10n */\n\nimport { AnnotationEditorType, FeatureTest } from \"../../shared/util.js\";\nimport { bindEvents } from \"./tools.js\";\nimport { FreeTextEditor } from \"./freetext.js\";\nimport { InkEditor } from \"./ink.js\";\nimport { setLayerDimensions } from \"../display_utils.js\";\n\n/**\n * @typedef {Object} AnnotationEditorLayerOptions\n * @property {Object} mode\n * @property {HTMLDivElement} div\n * @property {AnnotationEditorUIManager} uiManager\n * @property {boolean} enabled\n * @property {TextAccessibilityManager} [accessibilityManager]\n * @property {number} pageIndex\n * @property {IL10n} l10n\n */\n\n/**\n * @typedef {Object} RenderEditorLayerOptions\n * @property {PageViewport} viewport\n */\n\n/**\n * Manage all the different editors on a page.\n */\nclass AnnotationEditorLayer {\n  #accessibilityManager;\n\n  #allowClick = false;\n\n  #boundPointerup = this.pointerup.bind(this);\n\n  #boundPointerdown = this.pointerdown.bind(this);\n\n  #editors = new Map();\n\n  #hadPointerDown = false;\n\n  #isCleaningUp = false;\n\n  #uiManager;\n\n  static _initialized = false;\n\n  /**\n   * @param {AnnotationEditorLayerOptions} options\n   */\n  constructor(options) {\n    if (!AnnotationEditorLayer._initialized) {\n      AnnotationEditorLayer._initialized = true;\n      FreeTextEditor.initialize(options.l10n);\n      InkEditor.initialize(options.l10n);\n    }\n    options.uiManager.registerEditorTypes([FreeTextEditor, InkEditor]);\n\n    this.#uiManager = options.uiManager;\n    this.pageIndex = options.pageIndex;\n    this.div = options.div;\n    this.#accessibilityManager = options.accessibilityManager;\n\n    this.#uiManager.addLayer(this);\n  }\n\n  get isEmpty() {\n    return this.#editors.size === 0;\n  }\n\n  /**\n   * Update the toolbar if it's required to reflect the tool currently used.\n   * @param {number} mode\n   */\n  updateToolbar(mode) {\n    this.#uiManager.updateToolbar(mode);\n  }\n\n  /**\n   * The mode has changed: it must be updated.\n   * @param {number} mode\n   */\n  updateMode(mode = this.#uiManager.getMode()) {\n    this.#cleanup();\n    if (mode === AnnotationEditorType.INK) {\n      // We always want to an ink editor ready to draw in.\n      this.addInkEditorIfNeeded(false);\n      this.disableClick();\n    } else {\n      this.enableClick();\n    }\n    this.#uiManager.unselectAll();\n\n    if (mode !== AnnotationEditorType.NONE) {\n      this.div.classList.toggle(\n        \"freeTextEditing\",\n        mode === AnnotationEditorType.FREETEXT\n      );\n      this.div.classList.toggle(\n        \"inkEditing\",\n        mode === AnnotationEditorType.INK\n      );\n      this.div.hidden = false;\n    }\n  }\n\n  addInkEditorIfNeeded(isCommitting) {\n    if (\n      !isCommitting &&\n      this.#uiManager.getMode() !== AnnotationEditorType.INK\n    ) {\n      return;\n    }\n\n    if (!isCommitting) {\n      // We're removing an editor but an empty one can already exist so in this\n      // case we don't need to create a new one.\n      for (const editor of this.#editors.values()) {\n        if (editor.isEmpty()) {\n          editor.setInBackground();\n          return;\n        }\n      }\n    }\n\n    const editor = this.#createAndAddNewEditor({ offsetX: 0, offsetY: 0 });\n    editor.setInBackground();\n  }\n\n  /**\n   * Set the editing state.\n   * @param {boolean} isEditing\n   */\n  setEditingState(isEditing) {\n    this.#uiManager.setEditingState(isEditing);\n  }\n\n  /**\n   * Add some commands into the CommandManager (undo/redo stuff).\n   * @param {Object} params\n   */\n  addCommands(params) {\n    this.#uiManager.addCommands(params);\n  }\n\n  /**\n   * Enable pointer events on the main div in order to enable\n   * editor creation.\n   */\n  enable() {\n    this.div.style.pointerEvents = \"auto\";\n    for (const editor of this.#editors.values()) {\n      editor.enableEditing();\n    }\n  }\n\n  /**\n   * Disable editor creation.\n   */\n  disable() {\n    this.div.style.pointerEvents = \"none\";\n    for (const editor of this.#editors.values()) {\n      editor.disableEditing();\n    }\n    this.#cleanup();\n    if (this.isEmpty) {\n      this.div.hidden = true;\n    }\n  }\n\n  /**\n   * Set the current editor.\n   * @param {AnnotationEditor} editor\n   */\n  setActiveEditor(editor) {\n    const currentActive = this.#uiManager.getActive();\n    if (currentActive === editor) {\n      return;\n    }\n\n    this.#uiManager.setActiveEditor(editor);\n  }\n\n  enableClick() {\n    this.div.addEventListener(\"pointerdown\", this.#boundPointerdown);\n    this.div.addEventListener(\"pointerup\", this.#boundPointerup);\n  }\n\n  disableClick() {\n    this.div.removeEventListener(\"pointerdown\", this.#boundPointerdown);\n    this.div.removeEventListener(\"pointerup\", this.#boundPointerup);\n  }\n\n  attach(editor) {\n    this.#editors.set(editor.id, editor);\n  }\n\n  detach(editor) {\n    this.#editors.delete(editor.id);\n    this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n  }\n\n  /**\n   * Remove an editor.\n   * @param {AnnotationEditor} editor\n   */\n  remove(editor) {\n    // Since we can undo a removal we need to keep the\n    // parent property as it is, so don't null it!\n\n    this.#uiManager.removeEditor(editor);\n    this.detach(editor);\n    editor.div.style.display = \"none\";\n    setTimeout(() => {\n      // When the div is removed from DOM the focus can move on the\n      // document.body, so we just slightly postpone the removal in\n      // order to let an element potentially grab the focus before\n      // the body.\n      editor.div.style.display = \"\";\n      editor.div.remove();\n      editor.isAttachedToDOM = false;\n      if (document.activeElement === document.body) {\n        this.#uiManager.focusMainContainer();\n      }\n    }, 0);\n\n    if (!this.#isCleaningUp) {\n      this.addInkEditorIfNeeded(/* isCommitting = */ false);\n    }\n  }\n\n  /**\n   * An editor can have a different parent, for example after having\n   * being dragged and droped from a page to another.\n   * @param {AnnotationEditor} editor\n   */\n  #changeParent(editor) {\n    if (editor.parent === this) {\n      return;\n    }\n\n    this.attach(editor);\n    editor.parent?.detach(editor);\n    editor.setParent(this);\n    if (editor.div && editor.isAttachedToDOM) {\n      editor.div.remove();\n      this.div.append(editor.div);\n    }\n  }\n\n  /**\n   * Add a new editor in the current view.\n   * @param {AnnotationEditor} editor\n   */\n  add(editor) {\n    this.#changeParent(editor);\n    this.#uiManager.addEditor(editor);\n    this.attach(editor);\n\n    if (!editor.isAttachedToDOM) {\n      const div = editor.render();\n      this.div.append(div);\n      editor.isAttachedToDOM = true;\n    }\n\n    this.moveEditorInDOM(editor);\n    editor.onceAdded();\n    this.#uiManager.addToAnnotationStorage(editor);\n  }\n\n  moveEditorInDOM(editor) {\n    this.#accessibilityManager?.moveElementInDOM(\n      this.div,\n      editor.div,\n      editor.contentDiv,\n      /* isRemovable = */ true\n    );\n  }\n\n  /**\n   * Add or rebuild depending if it has been removed or not.\n   * @param {AnnotationEditor} editor\n   */\n  addOrRebuild(editor) {\n    if (editor.needsToBeRebuilt()) {\n      editor.rebuild();\n    } else {\n      this.add(editor);\n    }\n  }\n\n  /**\n   * Add a new editor and make this addition undoable.\n   * @param {AnnotationEditor} editor\n   */\n  addANewEditor(editor) {\n    const cmd = () => {\n      this.addOrRebuild(editor);\n    };\n    const undo = () => {\n      editor.remove();\n    };\n\n    this.addCommands({ cmd, undo, mustExec: true });\n  }\n\n  /**\n   * Add a new editor and make this addition undoable.\n   * @param {AnnotationEditor} editor\n   */\n  addUndoableEditor(editor) {\n    const cmd = () => {\n      this.addOrRebuild(editor);\n    };\n    const undo = () => {\n      editor.remove();\n    };\n\n    this.addCommands({ cmd, undo, mustExec: false });\n  }\n\n  /**\n   * Get an id for an editor.\n   * @returns {string}\n   */\n  getNextId() {\n    return this.#uiManager.getId();\n  }\n\n  /**\n   * Create a new editor\n   * @param {Object} params\n   * @returns {AnnotationEditor}\n   */\n  #createNewEditor(params) {\n    switch (this.#uiManager.getMode()) {\n      case AnnotationEditorType.FREETEXT:\n        return new FreeTextEditor(params);\n      case AnnotationEditorType.INK:\n        return new InkEditor(params);\n    }\n    return null;\n  }\n\n  /**\n   * Create a new editor\n   * @param {Object} data\n   * @returns {AnnotationEditor}\n   */\n  deserialize(data) {\n    switch (data.annotationType) {\n      case AnnotationEditorType.FREETEXT:\n        return FreeTextEditor.deserialize(data, this, this.#uiManager);\n      case AnnotationEditorType.INK:\n        return InkEditor.deserialize(data, this, this.#uiManager);\n    }\n    return null;\n  }\n\n  /**\n   * Create and add a new editor.\n   * @param {PointerEvent} event\n   * @returns {AnnotationEditor}\n   */\n  #createAndAddNewEditor(event) {\n    const id = this.getNextId();\n    const editor = this.#createNewEditor({\n      parent: this,\n      id,\n      x: event.offsetX,\n      y: event.offsetY,\n      uiManager: this.#uiManager,\n    });\n    if (editor) {\n      this.add(editor);\n    }\n\n    return editor;\n  }\n\n  /**\n   * Set the last selected editor.\n   * @param {AnnotationEditor} editor\n   */\n  setSelected(editor) {\n    this.#uiManager.setSelected(editor);\n  }\n\n  /**\n   * Add or remove an editor the current selection.\n   * @param {AnnotationEditor} editor\n   */\n  toggleSelected(editor) {\n    this.#uiManager.toggleSelected(editor);\n  }\n\n  /**\n   * Check if the editor is selected.\n   * @param {AnnotationEditor} editor\n   */\n  isSelected(editor) {\n    return this.#uiManager.isSelected(editor);\n  }\n\n  /**\n   * Unselect an editor.\n   * @param {AnnotationEditor} editor\n   */\n  unselect(editor) {\n    this.#uiManager.unselect(editor);\n  }\n\n  /**\n   * Pointerup callback.\n   * @param {PointerEvent} event\n   */\n  pointerup(event) {\n    const { isMac } = FeatureTest.platform;\n    if (event.button !== 0 || (event.ctrlKey && isMac)) {\n      // Don't create an editor on right click.\n      return;\n    }\n\n    if (event.target !== this.div) {\n      return;\n    }\n\n    if (!this.#hadPointerDown) {\n      // It can happen when the user starts a drag inside a text editor\n      // and then releases the mouse button outside of it. In such a case\n      // we don't want to create a new editor, hence we check that a pointerdown\n      // occurred on this div previously.\n      return;\n    }\n    this.#hadPointerDown = false;\n\n    if (!this.#allowClick) {\n      this.#allowClick = true;\n      return;\n    }\n\n    this.#createAndAddNewEditor(event);\n  }\n\n  /**\n   * Pointerdown callback.\n   * @param {PointerEvent} event\n   */\n  pointerdown(event) {\n    const { isMac } = FeatureTest.platform;\n    if (event.button !== 0 || (event.ctrlKey && isMac)) {\n      // Do nothing on right click.\n      return;\n    }\n\n    if (event.target !== this.div) {\n      return;\n    }\n\n    this.#hadPointerDown = true;\n\n    const editor = this.#uiManager.getActive();\n    this.#allowClick = !editor || editor.isEmpty();\n  }\n\n  /**\n   * Drag callback.\n   * @param {DragEvent} event\n   */\n  drop(event) {\n    const id = event.dataTransfer.getData(\"text/plain\");\n    const editor = this.#uiManager.getEditor(id);\n    if (!editor) {\n      return;\n    }\n\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n\n    this.#changeParent(editor);\n\n    const rect = this.div.getBoundingClientRect();\n    const endX = event.clientX - rect.x;\n    const endY = event.clientY - rect.y;\n\n    editor.translate(endX - editor.startX, endY - editor.startY);\n    this.moveEditorInDOM(editor);\n    editor.div.focus();\n  }\n\n  /**\n   * Dragover callback.\n   * @param {DragEvent} event\n   */\n  dragover(event) {\n    event.preventDefault();\n  }\n\n  /**\n   * Destroy the main editor.\n   */\n  destroy() {\n    if (this.#uiManager.getActive()?.parent === this) {\n      this.#uiManager.setActiveEditor(null);\n    }\n\n    for (const editor of this.#editors.values()) {\n      this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n      editor.setParent(null);\n      editor.isAttachedToDOM = false;\n      editor.div.remove();\n    }\n    this.div = null;\n    this.#editors.clear();\n    this.#uiManager.removeLayer(this);\n  }\n\n  #cleanup() {\n    // When we're cleaning up, some editors are removed but we don't want\n    // to add a new one which will induce an addition in this.#editors, hence\n    // an infinite loop.\n    this.#isCleaningUp = true;\n    for (const editor of this.#editors.values()) {\n      if (editor.isEmpty()) {\n        editor.remove();\n      }\n    }\n    this.#isCleaningUp = false;\n  }\n\n  /**\n   * Render the main editor.\n   * @param {RenderEditorLayerOptions} parameters\n   */\n  render({ viewport }) {\n    this.viewport = viewport;\n    setLayerDimensions(this.div, viewport);\n    bindEvents(this, this.div, [\"dragover\", \"drop\"]);\n    for (const editor of this.#uiManager.getEditors(this.pageIndex)) {\n      this.add(editor);\n    }\n    this.updateMode();\n  }\n\n  /**\n   * Update the main editor.\n   * @param {RenderEditorLayerOptions} parameters\n   */\n  update({ viewport }) {\n    // Editors have their dimensions/positions in percent so to avoid any\n    // issues (see #15582), we must commit the current one before changing\n    // the viewport.\n    this.#uiManager.commitOrRemove();\n\n    this.viewport = viewport;\n    setLayerDimensions(this.div, { rotation: viewport.rotation });\n    this.updateMode();\n  }\n\n  /**\n   * Get page dimensions.\n   * @returns {Object} dimensions.\n   */\n  get pageDimensions() {\n    const { pageWidth, pageHeight } = this.viewport.rawDims;\n    return [pageWidth, pageHeight];\n  }\n}\n\nexport { AnnotationEditorLayer };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./annotation_editor_layer.js\").AnnotationEditorLayer} AnnotationEditorLayer */\n\nimport {\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  assert,\n  LINE_FACTOR,\n  Util,\n} from \"../../shared/util.js\";\nimport { bindEvents, KeyboardManager } from \"./tools.js\";\nimport { AnnotationEditor } from \"./editor.js\";\n\n/**\n * Basic text editor in order to create a FreeTex annotation.\n */\nclass FreeTextEditor extends AnnotationEditor {\n  #boundEditorDivBlur = this.editorDivBlur.bind(this);\n\n  #boundEditorDivFocus = this.editorDivFocus.bind(this);\n\n  #boundEditorDivInput = this.editorDivInput.bind(this);\n\n  #boundEditorDivKeydown = this.editorDivKeydown.bind(this);\n\n  #color;\n\n  #content = \"\";\n\n  #editorDivId = `${this.id}-editor`;\n\n  #hasAlreadyBeenCommitted = false;\n\n  #fontSize;\n\n  static _freeTextDefaultContent = \"\";\n\n  static _l10nPromise;\n\n  static _internalPadding = 0;\n\n  static _defaultColor = null;\n\n  static _defaultFontSize = 10;\n\n  static _keyboardManager = new KeyboardManager([\n    [\n      [\"ctrl+Enter\", \"mac+meta+Enter\", \"Escape\", \"mac+Escape\"],\n      FreeTextEditor.prototype.commitOrRemove,\n    ],\n  ]);\n\n  static _type = \"freetext\";\n\n  constructor(params) {\n    super({ ...params, name: \"freeTextEditor\" });\n    this.#color =\n      params.color ||\n      FreeTextEditor._defaultColor ||\n      AnnotationEditor._defaultLineColor;\n    this.#fontSize = params.fontSize || FreeTextEditor._defaultFontSize;\n  }\n\n  static initialize(l10n) {\n    this._l10nPromise = new Map(\n      [\"free_text2_default_content\", \"editor_free_text2_aria_label\"].map(\n        str => [str, l10n.get(str)]\n      )\n    );\n\n    const style = getComputedStyle(document.documentElement);\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      const lineHeight = parseFloat(\n        style.getPropertyValue(\"--freetext-line-height\")\n      );\n      assert(\n        lineHeight === LINE_FACTOR,\n        \"Update the CSS variable to agree with the constant.\"\n      );\n    }\n\n    this._internalPadding = parseFloat(\n      style.getPropertyValue(\"--freetext-padding\")\n    );\n  }\n\n  static updateDefaultParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.FREETEXT_SIZE:\n        FreeTextEditor._defaultFontSize = value;\n        break;\n      case AnnotationEditorParamsType.FREETEXT_COLOR:\n        FreeTextEditor._defaultColor = value;\n        break;\n    }\n  }\n\n  /** @inheritdoc */\n  updateParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.FREETEXT_SIZE:\n        this.#updateFontSize(value);\n        break;\n      case AnnotationEditorParamsType.FREETEXT_COLOR:\n        this.#updateColor(value);\n        break;\n    }\n  }\n\n  static get defaultPropertiesToUpdate() {\n    return [\n      [\n        AnnotationEditorParamsType.FREETEXT_SIZE,\n        FreeTextEditor._defaultFontSize,\n      ],\n      [\n        AnnotationEditorParamsType.FREETEXT_COLOR,\n        FreeTextEditor._defaultColor || AnnotationEditor._defaultLineColor,\n      ],\n    ];\n  }\n\n  get propertiesToUpdate() {\n    return [\n      [AnnotationEditorParamsType.FREETEXT_SIZE, this.#fontSize],\n      [AnnotationEditorParamsType.FREETEXT_COLOR, this.#color],\n    ];\n  }\n\n  /**\n   * Update the font size and make this action as undoable.\n   * @param {number} fontSize\n   */\n  #updateFontSize(fontSize) {\n    const setFontsize = size => {\n      this.editorDiv.style.fontSize = `calc(${size}px * var(--scale-factor))`;\n      this.translate(0, -(size - this.#fontSize) * this.parentScale);\n      this.#fontSize = size;\n      this.#setEditorDimensions();\n    };\n    const savedFontsize = this.#fontSize;\n    this.addCommands({\n      cmd: () => {\n        setFontsize(fontSize);\n      },\n      undo: () => {\n        setFontsize(savedFontsize);\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.FREETEXT_SIZE,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /**\n   * Update the color and make this action undoable.\n   * @param {string} color\n   */\n  #updateColor(color) {\n    const savedColor = this.#color;\n    this.addCommands({\n      cmd: () => {\n        this.#color = this.editorDiv.style.color = color;\n      },\n      undo: () => {\n        this.#color = this.editorDiv.style.color = savedColor;\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.FREETEXT_COLOR,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /** @inheritdoc */\n  getInitialTranslation() {\n    // The start of the base line is where the user clicked.\n    const scale = this.parentScale;\n    return [\n      -FreeTextEditor._internalPadding * scale,\n      -(FreeTextEditor._internalPadding + this.#fontSize) * scale,\n    ];\n  }\n\n  /** @inheritdoc */\n  rebuild() {\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n\n    if (!this.isAttachedToDOM) {\n      // At some point this editor was removed and we're rebuilting it,\n      // hence we must add it to its parent.\n      this.parent.add(this);\n    }\n  }\n\n  /** @inheritdoc */\n  enableEditMode() {\n    if (this.isInEditMode()) {\n      return;\n    }\n\n    this.parent.setEditingState(false);\n    this.parent.updateToolbar(AnnotationEditorType.FREETEXT);\n    super.enableEditMode();\n    this.overlayDiv.classList.remove(\"enabled\");\n    this.editorDiv.contentEditable = true;\n    this.div.draggable = false;\n    this.div.removeAttribute(\"aria-activedescendant\");\n    this.editorDiv.addEventListener(\"keydown\", this.#boundEditorDivKeydown);\n    this.editorDiv.addEventListener(\"focus\", this.#boundEditorDivFocus);\n    this.editorDiv.addEventListener(\"blur\", this.#boundEditorDivBlur);\n    this.editorDiv.addEventListener(\"input\", this.#boundEditorDivInput);\n  }\n\n  /** @inheritdoc */\n  disableEditMode() {\n    if (!this.isInEditMode()) {\n      return;\n    }\n\n    this.parent.setEditingState(true);\n    super.disableEditMode();\n    this.overlayDiv.classList.add(\"enabled\");\n    this.editorDiv.contentEditable = false;\n    this.div.setAttribute(\"aria-activedescendant\", this.#editorDivId);\n    this.div.draggable = true;\n    this.editorDiv.removeEventListener(\"keydown\", this.#boundEditorDivKeydown);\n    this.editorDiv.removeEventListener(\"focus\", this.#boundEditorDivFocus);\n    this.editorDiv.removeEventListener(\"blur\", this.#boundEditorDivBlur);\n    this.editorDiv.removeEventListener(\"input\", this.#boundEditorDivInput);\n\n    // On Chrome, the focus is given to <body> when contentEditable is set to\n    // false, hence we focus the div.\n    this.div.focus({\n      preventScroll: true /* See issue #15744 */,\n    });\n\n    // In case the blur callback hasn't been called.\n    this.isEditing = false;\n    this.parent.div.classList.add(\"freeTextEditing\");\n  }\n\n  /** @inheritdoc */\n  focusin(event) {\n    super.focusin(event);\n    if (event.target !== this.editorDiv) {\n      this.editorDiv.focus();\n    }\n  }\n\n  /** @inheritdoc */\n  onceAdded() {\n    if (this.width) {\n      // The editor was created in using ctrl+c.\n      return;\n    }\n    this.enableEditMode();\n    this.editorDiv.focus();\n  }\n\n  /** @inheritdoc */\n  isEmpty() {\n    return !this.editorDiv || this.editorDiv.innerText.trim() === \"\";\n  }\n\n  /** @inheritdoc */\n  remove() {\n    this.isEditing = false;\n    this.parent.setEditingState(true);\n    this.parent.div.classList.add(\"freeTextEditing\");\n    super.remove();\n  }\n\n  /**\n   * Extract the text from this editor.\n   * @returns {string}\n   */\n  #extractText() {\n    const divs = this.editorDiv.getElementsByTagName(\"div\");\n    if (divs.length === 0) {\n      return this.editorDiv.innerText;\n    }\n    const buffer = [];\n    for (const div of divs) {\n      buffer.push(div.innerText.replace(/\\r\\n?|\\n/, \"\"));\n    }\n    return buffer.join(\"\\n\");\n  }\n\n  #setEditorDimensions() {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n\n    let rect;\n    if (this.isAttachedToDOM) {\n      rect = this.div.getBoundingClientRect();\n    } else {\n      // This editor isn't on screen but we need to get its dimensions, so\n      // we just insert it in the DOM, get its bounding box and then remove it.\n      const { currentLayer, div } = this;\n      const savedDisplay = div.style.display;\n      div.style.display = \"hidden\";\n      currentLayer.div.append(this.div);\n      rect = div.getBoundingClientRect();\n      div.remove();\n      div.style.display = savedDisplay;\n    }\n\n    this.width = rect.width / parentWidth;\n    this.height = rect.height / parentHeight;\n  }\n\n  /**\n   * Commit the content we have in this editor.\n   * @returns {undefined}\n   */\n  commit() {\n    if (!this.isInEditMode()) {\n      return;\n    }\n\n    super.commit();\n    if (!this.#hasAlreadyBeenCommitted) {\n      // This editor has something and it's the first time\n      // it's commited so we can add it in the undo/redo stack.\n      this.#hasAlreadyBeenCommitted = true;\n      this.parent.addUndoableEditor(this);\n    }\n\n    this.disableEditMode();\n    this.#content = this.#extractText().trimEnd();\n\n    this.#setEditorDimensions();\n  }\n\n  /** @inheritdoc */\n  shouldGetKeyboardEvents() {\n    return this.isInEditMode();\n  }\n\n  /**\n   * ondblclick callback.\n   * @param {MouseEvent} event\n   */\n  dblclick(event) {\n    this.enableEditMode();\n    this.editorDiv.focus();\n  }\n\n  /**\n   * onkeydown callback.\n   * @param {KeyboardEvent} event\n   */\n  keydown(event) {\n    if (event.target === this.div && event.key === \"Enter\") {\n      this.enableEditMode();\n      this.editorDiv.focus();\n    }\n  }\n\n  editorDivKeydown(event) {\n    FreeTextEditor._keyboardManager.exec(this, event);\n  }\n\n  editorDivFocus(event) {\n    this.isEditing = true;\n  }\n\n  editorDivBlur(event) {\n    this.isEditing = false;\n  }\n\n  editorDivInput(event) {\n    this.parent.div.classList.toggle(\"freeTextEditing\", this.isEmpty());\n  }\n\n  /** @inheritdoc */\n  disableEditing() {\n    this.editorDiv.setAttribute(\"role\", \"comment\");\n    this.editorDiv.removeAttribute(\"aria-multiline\");\n  }\n\n  /** @inheritdoc */\n  enableEditing() {\n    this.editorDiv.setAttribute(\"role\", \"textbox\");\n    this.editorDiv.setAttribute(\"aria-multiline\", true);\n  }\n\n  /** @inheritdoc */\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n\n    let baseX, baseY;\n    if (this.width) {\n      baseX = this.x;\n      baseY = this.y;\n    }\n\n    super.render();\n    this.editorDiv = document.createElement(\"div\");\n    this.editorDiv.className = \"internal\";\n\n    this.editorDiv.setAttribute(\"id\", this.#editorDivId);\n    this.enableEditing();\n\n    FreeTextEditor._l10nPromise\n      .get(\"editor_free_text2_aria_label\")\n      .then(msg => this.editorDiv?.setAttribute(\"aria-label\", msg));\n\n    FreeTextEditor._l10nPromise\n      .get(\"free_text2_default_content\")\n      .then(msg => this.editorDiv?.setAttribute(\"default-content\", msg));\n    this.editorDiv.contentEditable = true;\n\n    const { style } = this.editorDiv;\n    style.fontSize = `calc(${this.#fontSize}px * var(--scale-factor))`;\n    style.color = this.#color;\n\n    this.div.append(this.editorDiv);\n\n    this.overlayDiv = document.createElement(\"div\");\n    this.overlayDiv.classList.add(\"overlay\", \"enabled\");\n    this.div.append(this.overlayDiv);\n\n    // TODO: implement paste callback.\n    // The goal is to sanitize and have something suitable for this\n    // editor.\n    bindEvents(this, this.div, [\"dblclick\", \"keydown\"]);\n\n    if (this.width) {\n      // This editor was created in using copy (ctrl+c).\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.setAt(\n        baseX * parentWidth,\n        baseY * parentHeight,\n        this.width * parentWidth,\n        this.height * parentHeight\n      );\n\n      for (const line of this.#content.split(\"\\n\")) {\n        const div = document.createElement(\"div\");\n        div.append(\n          line ? document.createTextNode(line) : document.createElement(\"br\")\n        );\n        this.editorDiv.append(div);\n      }\n\n      this.div.draggable = true;\n      this.editorDiv.contentEditable = false;\n    } else {\n      this.div.draggable = false;\n      this.editorDiv.contentEditable = true;\n    }\n\n    return this.div;\n  }\n\n  get contentDiv() {\n    return this.editorDiv;\n  }\n\n  /** @inheritdoc */\n  static deserialize(data, parent, uiManager) {\n    const editor = super.deserialize(data, parent, uiManager);\n\n    editor.#fontSize = data.fontSize;\n    editor.#color = Util.makeHexColor(...data.color);\n    editor.#content = data.value;\n\n    return editor;\n  }\n\n  /** @inheritdoc */\n  serialize() {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const padding = FreeTextEditor._internalPadding * this.parentScale;\n    const rect = this.getRect(padding, padding);\n\n    const color = AnnotationEditor._colorManager.convert(\n      this.isAttachedToDOM\n        ? getComputedStyle(this.editorDiv).color\n        : this.#color\n    );\n\n    return {\n      annotationType: AnnotationEditorType.FREETEXT,\n      color,\n      fontSize: this.#fontSize,\n      value: this.#content,\n      pageIndex: this.pageIndex,\n      rect,\n      rotation: this.rotation,\n    };\n  }\n}\n\nexport { FreeTextEditor };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  Util,\n} from \"../../shared/util.js\";\nimport { AnnotationEditor } from \"./editor.js\";\nimport { opacityToHex } from \"./tools.js\";\n\n// The dimensions of the resizer is 15x15:\n// https://searchfox.org/mozilla-central/rev/1ce190047b9556c3c10ab4de70a0e61d893e2954/toolkit/content/minimal-xul.css#136-137\n// so each dimension must be greater than RESIZER_SIZE.\nconst RESIZER_SIZE = 16;\n\n/**\n * Basic draw editor in order to generate an Ink annotation.\n */\nclass InkEditor extends AnnotationEditor {\n  #aspectRatio = 0;\n\n  #baseHeight = 0;\n\n  #baseWidth = 0;\n\n  #boundCanvasContextMenu = this.canvasContextMenu.bind(this);\n\n  #boundCanvasPointermove = this.canvasPointermove.bind(this);\n\n  #boundCanvasPointerleave = this.canvasPointerleave.bind(this);\n\n  #boundCanvasPointerup = this.canvasPointerup.bind(this);\n\n  #boundCanvasPointerdown = this.canvasPointerdown.bind(this);\n\n  #currentPath2D = new Path2D();\n\n  #disableEditing = false;\n\n  #hasSomethingToDraw = false;\n\n  #isCanvasInitialized = false;\n\n  #observer = null;\n\n  #realWidth = 0;\n\n  #realHeight = 0;\n\n  #requestFrameCallback = null;\n\n  static _defaultColor = null;\n\n  static _defaultOpacity = 1;\n\n  static _defaultThickness = 1;\n\n  static _l10nPromise;\n\n  static _type = \"ink\";\n\n  constructor(params) {\n    super({ ...params, name: \"inkEditor\" });\n    this.color = params.color || null;\n    this.thickness = params.thickness || null;\n    this.opacity = params.opacity || null;\n    this.paths = [];\n    this.bezierPath2D = [];\n    this.allRawPaths = [];\n    this.currentPath = [];\n    this.scaleFactor = 1;\n    this.translationX = this.translationY = 0;\n    this.x = 0;\n    this.y = 0;\n  }\n\n  static initialize(l10n) {\n    this._l10nPromise = new Map(\n      [\"editor_ink_canvas_aria_label\", \"editor_ink2_aria_label\"].map(str => [\n        str,\n        l10n.get(str),\n      ])\n    );\n  }\n\n  static updateDefaultParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.INK_THICKNESS:\n        InkEditor._defaultThickness = value;\n        break;\n      case AnnotationEditorParamsType.INK_COLOR:\n        InkEditor._defaultColor = value;\n        break;\n      case AnnotationEditorParamsType.INK_OPACITY:\n        InkEditor._defaultOpacity = value / 100;\n        break;\n    }\n  }\n\n  /** @inheritdoc */\n  updateParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.INK_THICKNESS:\n        this.#updateThickness(value);\n        break;\n      case AnnotationEditorParamsType.INK_COLOR:\n        this.#updateColor(value);\n        break;\n      case AnnotationEditorParamsType.INK_OPACITY:\n        this.#updateOpacity(value);\n        break;\n    }\n  }\n\n  static get defaultPropertiesToUpdate() {\n    return [\n      [AnnotationEditorParamsType.INK_THICKNESS, InkEditor._defaultThickness],\n      [\n        AnnotationEditorParamsType.INK_COLOR,\n        InkEditor._defaultColor || AnnotationEditor._defaultLineColor,\n      ],\n      [\n        AnnotationEditorParamsType.INK_OPACITY,\n        Math.round(InkEditor._defaultOpacity * 100),\n      ],\n    ];\n  }\n\n  /** @inheritdoc */\n  get propertiesToUpdate() {\n    return [\n      [\n        AnnotationEditorParamsType.INK_THICKNESS,\n        this.thickness || InkEditor._defaultThickness,\n      ],\n      [\n        AnnotationEditorParamsType.INK_COLOR,\n        this.color ||\n          InkEditor._defaultColor ||\n          AnnotationEditor._defaultLineColor,\n      ],\n      [\n        AnnotationEditorParamsType.INK_OPACITY,\n        Math.round(100 * (this.opacity ?? InkEditor._defaultOpacity)),\n      ],\n    ];\n  }\n\n  /**\n   * Update the thickness and make this action undoable.\n   * @param {number} thickness\n   */\n  #updateThickness(thickness) {\n    const savedThickness = this.thickness;\n    this.addCommands({\n      cmd: () => {\n        this.thickness = thickness;\n        this.#fitToContent();\n      },\n      undo: () => {\n        this.thickness = savedThickness;\n        this.#fitToContent();\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.INK_THICKNESS,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /**\n   * Update the color and make this action undoable.\n   * @param {string} color\n   */\n  #updateColor(color) {\n    const savedColor = this.color;\n    this.addCommands({\n      cmd: () => {\n        this.color = color;\n        this.#redraw();\n      },\n      undo: () => {\n        this.color = savedColor;\n        this.#redraw();\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.INK_COLOR,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /**\n   * Update the opacity and make this action undoable.\n   * @param {number} opacity\n   */\n  #updateOpacity(opacity) {\n    opacity /= 100;\n    const savedOpacity = this.opacity;\n    this.addCommands({\n      cmd: () => {\n        this.opacity = opacity;\n        this.#redraw();\n      },\n      undo: () => {\n        this.opacity = savedOpacity;\n        this.#redraw();\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.INK_OPACITY,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /** @inheritdoc */\n  rebuild() {\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n\n    if (!this.canvas) {\n      this.#createCanvas();\n      this.#createObserver();\n    }\n\n    if (!this.isAttachedToDOM) {\n      // At some point this editor was removed and we're rebuilding it,\n      // hence we must add it to its parent.\n      this.parent.add(this);\n      this.#setCanvasDims();\n    }\n    this.#fitToContent();\n  }\n\n  /** @inheritdoc */\n  remove() {\n    if (this.canvas === null) {\n      return;\n    }\n\n    if (!this.isEmpty()) {\n      this.commit();\n    }\n\n    // Destroy the canvas.\n    this.canvas.width = this.canvas.height = 0;\n    this.canvas.remove();\n    this.canvas = null;\n\n    this.#observer.disconnect();\n    this.#observer = null;\n\n    super.remove();\n  }\n\n  setParent(parent) {\n    if (!this.parent && parent) {\n      // We've a parent hence the rescale will be handled thanks to the\n      // ResizeObserver.\n      this._uiManager.removeShouldRescale(this);\n    } else if (this.parent && parent === null) {\n      // The editor is removed from the DOM, hence we handle the rescale thanks\n      // to the onScaleChanging callback.\n      // This way, it'll be saved/printed correctly.\n      this._uiManager.addShouldRescale(this);\n    }\n    super.setParent(parent);\n  }\n\n  onScaleChanging() {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    const width = this.width * parentWidth;\n    const height = this.height * parentHeight;\n    this.setDimensions(width, height);\n  }\n\n  /** @inheritdoc */\n  enableEditMode() {\n    if (this.#disableEditing || this.canvas === null) {\n      return;\n    }\n\n    super.enableEditMode();\n    this.div.draggable = false;\n    this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n  }\n\n  /** @inheritdoc */\n  disableEditMode() {\n    if (!this.isInEditMode() || this.canvas === null) {\n      return;\n    }\n\n    super.disableEditMode();\n    this.div.draggable = !this.isEmpty();\n    this.div.classList.remove(\"editing\");\n\n    this.canvas.removeEventListener(\n      \"pointerdown\",\n      this.#boundCanvasPointerdown\n    );\n  }\n\n  /** @inheritdoc */\n  onceAdded() {\n    this.div.draggable = !this.isEmpty();\n  }\n\n  /** @inheritdoc */\n  isEmpty() {\n    return (\n      this.paths.length === 0 ||\n      (this.paths.length === 1 && this.paths[0].length === 0)\n    );\n  }\n\n  #getInitialBBox() {\n    const {\n      parentRotation,\n      parentDimensions: [width, height],\n    } = this;\n    switch (parentRotation) {\n      case 90:\n        return [0, height, height, width];\n      case 180:\n        return [width, height, width, height];\n      case 270:\n        return [width, 0, height, width];\n      default:\n        return [0, 0, width, height];\n    }\n  }\n\n  /**\n   * Set line styles.\n   */\n  #setStroke() {\n    const { ctx, color, opacity, thickness, parentScale, scaleFactor } = this;\n    ctx.lineWidth = (thickness * parentScale) / scaleFactor;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.miterLimit = 10;\n    ctx.strokeStyle = `${color}${opacityToHex(opacity)}`;\n  }\n\n  /**\n   * Start to draw on the canvas.\n   * @param {number} x\n   * @param {number} y\n   */\n  #startDrawing(x, y) {\n    this.canvas.addEventListener(\"contextmenu\", this.#boundCanvasContextMenu);\n    this.canvas.addEventListener(\"pointerleave\", this.#boundCanvasPointerleave);\n    this.canvas.addEventListener(\"pointermove\", this.#boundCanvasPointermove);\n    this.canvas.addEventListener(\"pointerup\", this.#boundCanvasPointerup);\n    this.canvas.removeEventListener(\n      \"pointerdown\",\n      this.#boundCanvasPointerdown\n    );\n\n    this.isEditing = true;\n    if (!this.#isCanvasInitialized) {\n      this.#isCanvasInitialized = true;\n      this.#setCanvasDims();\n      this.thickness ||= InkEditor._defaultThickness;\n      this.color ||=\n        InkEditor._defaultColor || AnnotationEditor._defaultLineColor;\n      this.opacity ??= InkEditor._defaultOpacity;\n    }\n    this.currentPath.push([x, y]);\n    this.#hasSomethingToDraw = false;\n    this.#setStroke();\n\n    this.#requestFrameCallback = () => {\n      this.#drawPoints();\n      if (this.#requestFrameCallback) {\n        window.requestAnimationFrame(this.#requestFrameCallback);\n      }\n    };\n    window.requestAnimationFrame(this.#requestFrameCallback);\n  }\n\n  /**\n   * Draw on the canvas.\n   * @param {number} x\n   * @param {number} y\n   */\n  #draw(x, y) {\n    const [lastX, lastY] = this.currentPath.at(-1);\n    if (this.currentPath.length > 1 && x === lastX && y === lastY) {\n      return;\n    }\n    const currentPath = this.currentPath;\n    let path2D = this.#currentPath2D;\n    currentPath.push([x, y]);\n    this.#hasSomethingToDraw = true;\n\n    if (currentPath.length <= 2) {\n      path2D.moveTo(...currentPath[0]);\n      path2D.lineTo(x, y);\n      return;\n    }\n\n    if (currentPath.length === 3) {\n      this.#currentPath2D = path2D = new Path2D();\n      path2D.moveTo(...currentPath[0]);\n    }\n\n    this.#makeBezierCurve(\n      path2D,\n      ...currentPath.at(-3),\n      ...currentPath.at(-2),\n      x,\n      y\n    );\n  }\n\n  #endPath() {\n    if (this.currentPath.length === 0) {\n      return;\n    }\n    const lastPoint = this.currentPath.at(-1);\n    this.#currentPath2D.lineTo(...lastPoint);\n  }\n\n  /**\n   * Stop to draw on the canvas.\n   * @param {number} x\n   * @param {number} y\n   */\n  #stopDrawing(x, y) {\n    this.#requestFrameCallback = null;\n\n    x = Math.min(Math.max(x, 0), this.canvas.width);\n    y = Math.min(Math.max(y, 0), this.canvas.height);\n\n    this.#draw(x, y);\n    this.#endPath();\n\n    // Interpolate the path entered by the user with some\n    // Bezier's curves in order to have a smoother path and\n    // to reduce the data size used to draw it in the PDF.\n    let bezier;\n    if (this.currentPath.length !== 1) {\n      bezier = this.#generateBezierPoints();\n    } else {\n      // We have only one point finally.\n      const xy = [x, y];\n      bezier = [[xy, xy.slice(), xy.slice(), xy]];\n    }\n    const path2D = this.#currentPath2D;\n    const currentPath = this.currentPath;\n    this.currentPath = [];\n    this.#currentPath2D = new Path2D();\n\n    const cmd = () => {\n      this.allRawPaths.push(currentPath);\n      this.paths.push(bezier);\n      this.bezierPath2D.push(path2D);\n      this.rebuild();\n    };\n\n    const undo = () => {\n      this.allRawPaths.pop();\n      this.paths.pop();\n      this.bezierPath2D.pop();\n      if (this.paths.length === 0) {\n        this.remove();\n      } else {\n        if (!this.canvas) {\n          this.#createCanvas();\n          this.#createObserver();\n        }\n        this.#fitToContent();\n      }\n    };\n\n    this.addCommands({ cmd, undo, mustExec: true });\n  }\n\n  #drawPoints() {\n    if (!this.#hasSomethingToDraw) {\n      return;\n    }\n    this.#hasSomethingToDraw = false;\n\n    const thickness = Math.ceil(this.thickness * this.parentScale);\n    const lastPoints = this.currentPath.slice(-3);\n    const x = lastPoints.map(xy => xy[0]);\n    const y = lastPoints.map(xy => xy[1]);\n    const xMin = Math.min(...x) - thickness;\n    const xMax = Math.max(...x) + thickness;\n    const yMin = Math.min(...y) - thickness;\n    const yMax = Math.max(...y) + thickness;\n\n    const { ctx } = this;\n    ctx.save();\n\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      // In Chrome, the clip() method doesn't work as expected.\n      ctx.clearRect(xMin, yMin, xMax - xMin, yMax - yMin);\n      ctx.beginPath();\n      ctx.rect(xMin, yMin, xMax - xMin, yMax - yMin);\n      ctx.clip();\n    } else {\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    for (const path of this.bezierPath2D) {\n      ctx.stroke(path);\n    }\n    ctx.stroke(this.#currentPath2D);\n\n    ctx.restore();\n  }\n\n  #makeBezierCurve(path2D, x0, y0, x1, y1, x2, y2) {\n    const prevX = (x0 + x1) / 2;\n    const prevY = (y0 + y1) / 2;\n    const x3 = (x1 + x2) / 2;\n    const y3 = (y1 + y2) / 2;\n\n    path2D.bezierCurveTo(\n      prevX + (2 * (x1 - prevX)) / 3,\n      prevY + (2 * (y1 - prevY)) / 3,\n      x3 + (2 * (x1 - x3)) / 3,\n      y3 + (2 * (y1 - y3)) / 3,\n      x3,\n      y3\n    );\n  }\n\n  #generateBezierPoints() {\n    const path = this.currentPath;\n    if (path.length <= 2) {\n      return [[path[0], path[0], path.at(-1), path.at(-1)]];\n    }\n\n    const bezierPoints = [];\n    let i;\n    let [x0, y0] = path[0];\n    for (i = 1; i < path.length - 2; i++) {\n      const [x1, y1] = path[i];\n      const [x2, y2] = path[i + 1];\n      const x3 = (x1 + x2) / 2;\n      const y3 = (y1 + y2) / 2;\n\n      // The quadratic is: [[x0, y0], [x1, y1], [x3, y3]].\n      // Convert the quadratic to a cubic\n      // (see https://fontforge.org/docs/techref/bezier.html#converting-truetype-to-postscript)\n      const control1 = [x0 + (2 * (x1 - x0)) / 3, y0 + (2 * (y1 - y0)) / 3];\n      const control2 = [x3 + (2 * (x1 - x3)) / 3, y3 + (2 * (y1 - y3)) / 3];\n\n      bezierPoints.push([[x0, y0], control1, control2, [x3, y3]]);\n\n      [x0, y0] = [x3, y3];\n    }\n\n    const [x1, y1] = path[i];\n    const [x2, y2] = path[i + 1];\n\n    // The quadratic is: [[x0, y0], [x1, y1], [x2, y2]].\n    const control1 = [x0 + (2 * (x1 - x0)) / 3, y0 + (2 * (y1 - y0)) / 3];\n    const control2 = [x2 + (2 * (x1 - x2)) / 3, y2 + (2 * (y1 - y2)) / 3];\n\n    bezierPoints.push([[x0, y0], control1, control2, [x2, y2]]);\n    return bezierPoints;\n  }\n\n  /**\n   * Redraw all the paths.\n   */\n  #redraw() {\n    if (this.isEmpty()) {\n      this.#updateTransform();\n      return;\n    }\n    this.#setStroke();\n\n    const { canvas, ctx } = this;\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    this.#updateTransform();\n\n    for (const path of this.bezierPath2D) {\n      ctx.stroke(path);\n    }\n  }\n\n  /**\n   * Commit the curves we have in this editor.\n   */\n  commit() {\n    if (this.#disableEditing) {\n      return;\n    }\n\n    super.commit();\n\n    this.isEditing = false;\n    this.disableEditMode();\n\n    // This editor must be on top of the main ink editor.\n    this.setInForeground();\n\n    this.#disableEditing = true;\n    this.div.classList.add(\"disabled\");\n\n    this.#fitToContent(/* firstTime = */ true);\n\n    this.parent.addInkEditorIfNeeded(/* isCommitting = */ true);\n\n    // When commiting, the position of this editor is changed, hence we must\n    // move it to the right position in the DOM.\n    this.parent.moveEditorInDOM(this);\n    this.div.focus({\n      preventScroll: true /* See issue #15744 */,\n    });\n  }\n\n  /** @inheritdoc */\n  focusin(event) {\n    super.focusin(event);\n    this.enableEditMode();\n  }\n\n  /**\n   * onpointerdown callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointerdown(event) {\n    if (event.button !== 0 || !this.isInEditMode() || this.#disableEditing) {\n      return;\n    }\n\n    // We want to draw on top of any other editors.\n    // Since it's the last child, there's no need to give it a higher z-index.\n    this.setInForeground();\n\n    event.preventDefault();\n\n    if (event.type !== \"mouse\") {\n      this.div.focus();\n    }\n\n    this.#startDrawing(event.offsetX, event.offsetY);\n  }\n\n  /**\n   * oncontextmenu callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasContextMenu(event) {\n    event.preventDefault();\n  }\n\n  /**\n   * onpointermove callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointermove(event) {\n    event.preventDefault();\n    this.#draw(event.offsetX, event.offsetY);\n  }\n\n  /**\n   * onpointerup callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointerup(event) {\n    event.preventDefault();\n    this.#endDrawing(event);\n  }\n\n  /**\n   * onpointerleave callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointerleave(event) {\n    this.#endDrawing(event);\n  }\n\n  /**\n   * End the drawing.\n   * @param {PointerEvent} event\n   */\n  #endDrawing(event) {\n    this.canvas.removeEventListener(\n      \"pointerleave\",\n      this.#boundCanvasPointerleave\n    );\n    this.canvas.removeEventListener(\n      \"pointermove\",\n      this.#boundCanvasPointermove\n    );\n    this.canvas.removeEventListener(\"pointerup\", this.#boundCanvasPointerup);\n    this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n\n    // Slight delay to avoid the context menu to appear (it can happen on a long\n    // tap with a pen).\n    setTimeout(() => {\n      this.canvas.removeEventListener(\n        \"contextmenu\",\n        this.#boundCanvasContextMenu\n      );\n    }, 10);\n\n    this.#stopDrawing(event.offsetX, event.offsetY);\n\n    this.addToAnnotationStorage();\n\n    // Since the ink editor covers all of the page and we want to be able\n    // to select another editor, we just put this one in the background.\n    this.setInBackground();\n  }\n\n  /**\n   * Create the canvas element.\n   */\n  #createCanvas() {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = this.canvas.height = 0;\n    this.canvas.className = \"inkEditorCanvas\";\n\n    InkEditor._l10nPromise\n      .get(\"editor_ink_canvas_aria_label\")\n      .then(msg => this.canvas?.setAttribute(\"aria-label\", msg));\n    this.div.append(this.canvas);\n    this.ctx = this.canvas.getContext(\"2d\");\n  }\n\n  /**\n   * Create the resize observer.\n   */\n  #createObserver() {\n    this.#observer = new ResizeObserver(entries => {\n      const rect = entries[0].contentRect;\n      if (rect.width && rect.height) {\n        this.setDimensions(rect.width, rect.height);\n      }\n    });\n    this.#observer.observe(this.div);\n  }\n\n  /** @inheritdoc */\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n\n    let baseX, baseY;\n    if (this.width) {\n      baseX = this.x;\n      baseY = this.y;\n    }\n\n    super.render();\n\n    InkEditor._l10nPromise\n      .get(\"editor_ink2_aria_label\")\n      .then(msg => this.div?.setAttribute(\"aria-label\", msg));\n\n    const [x, y, w, h] = this.#getInitialBBox();\n    this.setAt(x, y, 0, 0);\n    this.setDims(w, h);\n\n    this.#createCanvas();\n\n    if (this.width) {\n      // This editor was created in using copy (ctrl+c).\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.setAt(\n        baseX * parentWidth,\n        baseY * parentHeight,\n        this.width * parentWidth,\n        this.height * parentHeight\n      );\n      this.#isCanvasInitialized = true;\n      this.#setCanvasDims();\n      this.setDims(this.width * parentWidth, this.height * parentHeight);\n      this.#redraw();\n      this.#setMinDims();\n      this.div.classList.add(\"disabled\");\n    } else {\n      this.div.classList.add(\"editing\");\n      this.enableEditMode();\n    }\n\n    this.#createObserver();\n\n    return this.div;\n  }\n\n  #setCanvasDims() {\n    if (!this.#isCanvasInitialized) {\n      return;\n    }\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.canvas.width = Math.ceil(this.width * parentWidth);\n    this.canvas.height = Math.ceil(this.height * parentHeight);\n    this.#updateTransform();\n  }\n\n  /**\n   * When the dimensions of the div change the inner canvas must\n   * renew its dimensions, hence it must redraw its own contents.\n   * @param {number} width - the new width of the div\n   * @param {number} height - the new height of the div\n   * @returns\n   */\n  setDimensions(width, height) {\n    const roundedWidth = Math.round(width);\n    const roundedHeight = Math.round(height);\n    if (\n      this.#realWidth === roundedWidth &&\n      this.#realHeight === roundedHeight\n    ) {\n      return;\n    }\n\n    this.#realWidth = roundedWidth;\n    this.#realHeight = roundedHeight;\n\n    this.canvas.style.visibility = \"hidden\";\n\n    if (\n      this.#aspectRatio &&\n      Math.abs(this.#aspectRatio - width / height) > 1e-2\n    ) {\n      height = Math.ceil(width / this.#aspectRatio);\n      this.setDims(width, height);\n    }\n\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.width = width / parentWidth;\n    this.height = height / parentHeight;\n\n    if (this.#disableEditing) {\n      this.#setScaleFactor(width, height);\n    }\n\n    this.#setCanvasDims();\n    this.#redraw();\n\n    this.canvas.style.visibility = \"visible\";\n\n    // For any reason the dimensions couldn't be in percent but in pixels, hence\n    // we must fix them.\n    this.fixDims();\n  }\n\n  #setScaleFactor(width, height) {\n    const padding = this.#getPadding();\n    const scaleFactorW = (width - padding) / this.#baseWidth;\n    const scaleFactorH = (height - padding) / this.#baseHeight;\n    this.scaleFactor = Math.min(scaleFactorW, scaleFactorH);\n  }\n\n  /**\n   * Update the canvas transform.\n   */\n  #updateTransform() {\n    const padding = this.#getPadding() / 2;\n    this.ctx.setTransform(\n      this.scaleFactor,\n      0,\n      0,\n      this.scaleFactor,\n      this.translationX * this.scaleFactor + padding,\n      this.translationY * this.scaleFactor + padding\n    );\n  }\n\n  /**\n   * Convert into a Path2D.\n   * @param {Arra<Array<number>} bezier\n   * @returns {Path2D}\n   */\n  static #buildPath2D(bezier) {\n    const path2D = new Path2D();\n    for (let i = 0, ii = bezier.length; i < ii; i++) {\n      const [first, control1, control2, second] = bezier[i];\n      if (i === 0) {\n        path2D.moveTo(...first);\n      }\n      path2D.bezierCurveTo(\n        control1[0],\n        control1[1],\n        control2[0],\n        control2[1],\n        second[0],\n        second[1]\n      );\n    }\n    return path2D;\n  }\n\n  /**\n   * Transform and serialize the paths.\n   * @param {number} s - scale factor\n   * @param {number} tx - abscissa of the translation\n   * @param {number} ty - ordinate of the translation\n   * @param {number} h - height of the bounding box\n   */\n  #serializePaths(s, tx, ty, h) {\n    const NUMBER_OF_POINTS_ON_BEZIER_CURVE = 4;\n    const paths = [];\n    const padding = this.thickness / 2;\n    let buffer, points;\n\n    for (const bezier of this.paths) {\n      buffer = [];\n      points = [];\n      for (let i = 0, ii = bezier.length; i < ii; i++) {\n        const [first, control1, control2, second] = bezier[i];\n        const p10 = s * (first[0] + tx) + padding;\n        const p11 = h - s * (first[1] + ty) - padding;\n        const p20 = s * (control1[0] + tx) + padding;\n        const p21 = h - s * (control1[1] + ty) - padding;\n        const p30 = s * (control2[0] + tx) + padding;\n        const p31 = h - s * (control2[1] + ty) - padding;\n        const p40 = s * (second[0] + tx) + padding;\n        const p41 = h - s * (second[1] + ty) - padding;\n\n        if (i === 0) {\n          buffer.push(p10, p11);\n          points.push(p10, p11);\n        }\n        buffer.push(p20, p21, p30, p31, p40, p41);\n        this.#extractPointsOnBezier(\n          p10,\n          p11,\n          p20,\n          p21,\n          p30,\n          p31,\n          p40,\n          p41,\n          NUMBER_OF_POINTS_ON_BEZIER_CURVE,\n          points\n        );\n      }\n      paths.push({ bezier: buffer, points });\n    }\n\n    return paths;\n  }\n\n  /**\n   * Extract n-1 points from the cubic Bezier curve.\n   * @param {number} p10\n   * @param {number} p11\n   * @param {number} p20\n   * @param {number} p21\n   * @param {number} p30\n   * @param {number} p31\n   * @param {number} p40\n   * @param {number} p41\n   * @param {number} n\n   * @param {Array<number>} points\n   * @returns {undefined}\n   */\n  #extractPointsOnBezier(p10, p11, p20, p21, p30, p31, p40, p41, n, points) {\n    // If we can save few points thanks to the flatness we must do it.\n    if (this.#isAlmostFlat(p10, p11, p20, p21, p30, p31, p40, p41)) {\n      points.push(p40, p41);\n      return;\n    }\n\n    // Apply the de Casteljau's algorithm in order to get n points belonging\n    // to the Bezier's curve:\n    // https://en.wikipedia.org/wiki/De_Casteljau%27s_algorithm\n\n    // The first point is the last point of the previous Bezier curve\n    // so no need to push the first point.\n    for (let i = 1; i < n - 1; i++) {\n      const t = i / n;\n      const mt = 1 - t;\n\n      let q10 = t * p10 + mt * p20;\n      let q11 = t * p11 + mt * p21;\n\n      let q20 = t * p20 + mt * p30;\n      let q21 = t * p21 + mt * p31;\n\n      const q30 = t * p30 + mt * p40;\n      const q31 = t * p31 + mt * p41;\n\n      q10 = t * q10 + mt * q20;\n      q11 = t * q11 + mt * q21;\n\n      q20 = t * q20 + mt * q30;\n      q21 = t * q21 + mt * q31;\n\n      q10 = t * q10 + mt * q20;\n      q11 = t * q11 + mt * q21;\n\n      points.push(q10, q11);\n    }\n\n    points.push(p40, p41);\n  }\n\n  /**\n   * Check if a cubic Bezier curve is almost flat.\n   * @param {number} p10\n   * @param {number} p11\n   * @param {number} p20\n   * @param {number} p21\n   * @param {number} p30\n   * @param {number} p31\n   * @param {number} p40\n   * @param {number} p41\n   * @returns {boolean}\n   */\n  #isAlmostFlat(p10, p11, p20, p21, p30, p31, p40, p41) {\n    // For reference:\n    //   https://jeremykun.com/tag/bezier-curves/\n    const tol = 10;\n\n    const ax = (3 * p20 - 2 * p10 - p40) ** 2;\n    const ay = (3 * p21 - 2 * p11 - p41) ** 2;\n    const bx = (3 * p30 - p10 - 2 * p40) ** 2;\n    const by = (3 * p31 - p11 - 2 * p41) ** 2;\n\n    return Math.max(ax, bx) + Math.max(ay, by) <= tol;\n  }\n\n  /**\n   * Get the bounding box containing all the paths.\n   * @returns {Array<number>}\n   */\n  #getBbox() {\n    let xMin = Infinity;\n    let xMax = -Infinity;\n    let yMin = Infinity;\n    let yMax = -Infinity;\n\n    for (const path of this.paths) {\n      for (const [first, control1, control2, second] of path) {\n        const bbox = Util.bezierBoundingBox(\n          ...first,\n          ...control1,\n          ...control2,\n          ...second\n        );\n        xMin = Math.min(xMin, bbox[0]);\n        yMin = Math.min(yMin, bbox[1]);\n        xMax = Math.max(xMax, bbox[2]);\n        yMax = Math.max(yMax, bbox[3]);\n      }\n    }\n\n    return [xMin, yMin, xMax, yMax];\n  }\n\n  /**\n   * The bounding box is computed with null thickness, so we must take\n   * it into account for the display.\n   * It corresponds to the total padding, hence it should be divided by 2\n   * in order to have left/right paddings.\n   * @returns {number}\n   */\n  #getPadding() {\n    return this.#disableEditing\n      ? Math.ceil(this.thickness * this.parentScale)\n      : 0;\n  }\n\n  /**\n   * Set the div position and dimensions in order to fit to\n   * the bounding box of the contents.\n   * @returns {undefined}\n   */\n  #fitToContent(firstTime = false) {\n    if (this.isEmpty()) {\n      return;\n    }\n\n    if (!this.#disableEditing) {\n      this.#redraw();\n      return;\n    }\n\n    const bbox = this.#getBbox();\n    const padding = this.#getPadding();\n    this.#baseWidth = Math.max(RESIZER_SIZE, bbox[2] - bbox[0]);\n    this.#baseHeight = Math.max(RESIZER_SIZE, bbox[3] - bbox[1]);\n\n    const width = Math.ceil(padding + this.#baseWidth * this.scaleFactor);\n    const height = Math.ceil(padding + this.#baseHeight * this.scaleFactor);\n\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.width = width / parentWidth;\n    this.height = height / parentHeight;\n\n    this.#aspectRatio = width / height;\n    this.#setMinDims();\n\n    const prevTranslationX = this.translationX;\n    const prevTranslationY = this.translationY;\n\n    this.translationX = -bbox[0];\n    this.translationY = -bbox[1];\n    this.#setCanvasDims();\n    this.#redraw();\n\n    this.#realWidth = width;\n    this.#realHeight = height;\n\n    this.setDims(width, height);\n    const unscaledPadding = firstTime ? padding / this.scaleFactor / 2 : 0;\n    this.translate(\n      prevTranslationX - this.translationX - unscaledPadding,\n      prevTranslationY - this.translationY - unscaledPadding\n    );\n  }\n\n  #setMinDims() {\n    const { style } = this.div;\n    if (this.#aspectRatio >= 1) {\n      style.minHeight = `${RESIZER_SIZE}px`;\n      style.minWidth = `${Math.round(this.#aspectRatio * RESIZER_SIZE)}px`;\n    } else {\n      style.minWidth = `${RESIZER_SIZE}px`;\n      style.minHeight = `${Math.round(RESIZER_SIZE / this.#aspectRatio)}px`;\n    }\n  }\n\n  /** @inheritdoc */\n  static deserialize(data, parent, uiManager) {\n    const editor = super.deserialize(data, parent, uiManager);\n\n    editor.thickness = data.thickness;\n    editor.color = Util.makeHexColor(...data.color);\n    editor.opacity = data.opacity;\n\n    const [pageWidth, pageHeight] = editor.pageDimensions;\n    const width = editor.width * pageWidth;\n    const height = editor.height * pageHeight;\n    const scaleFactor = editor.parentScale;\n    const padding = data.thickness / 2;\n\n    editor.#aspectRatio = width / height;\n    editor.#disableEditing = true;\n    editor.#realWidth = Math.round(width);\n    editor.#realHeight = Math.round(height);\n\n    for (const { bezier } of data.paths) {\n      const path = [];\n      editor.paths.push(path);\n      let p0 = scaleFactor * (bezier[0] - padding);\n      let p1 = scaleFactor * (height - bezier[1] - padding);\n      for (let i = 2, ii = bezier.length; i < ii; i += 6) {\n        const p10 = scaleFactor * (bezier[i] - padding);\n        const p11 = scaleFactor * (height - bezier[i + 1] - padding);\n        const p20 = scaleFactor * (bezier[i + 2] - padding);\n        const p21 = scaleFactor * (height - bezier[i + 3] - padding);\n        const p30 = scaleFactor * (bezier[i + 4] - padding);\n        const p31 = scaleFactor * (height - bezier[i + 5] - padding);\n        path.push([\n          [p0, p1],\n          [p10, p11],\n          [p20, p21],\n          [p30, p31],\n        ]);\n        p0 = p30;\n        p1 = p31;\n      }\n      const path2D = this.#buildPath2D(path);\n      editor.bezierPath2D.push(path2D);\n    }\n\n    const bbox = editor.#getBbox();\n    editor.#baseWidth = Math.max(RESIZER_SIZE, bbox[2] - bbox[0]);\n    editor.#baseHeight = Math.max(RESIZER_SIZE, bbox[3] - bbox[1]);\n    editor.#setScaleFactor(width, height);\n\n    return editor;\n  }\n\n  /** @inheritdoc */\n  serialize() {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const rect = this.getRect(0, 0);\n    const height =\n      this.rotation % 180 === 0 ? rect[3] - rect[1] : rect[2] - rect[0];\n\n    const color = AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);\n\n    return {\n      annotationType: AnnotationEditorType.INK,\n      color,\n      thickness: this.thickness,\n      opacity: this.opacity,\n      paths: this.#serializePaths(\n        this.scaleFactor / this.parentScale,\n        this.translationX,\n        this.translationY,\n        height\n      ),\n      pageIndex: this.pageIndex,\n      rect,\n      rotation: this.rotation,\n    };\n  }\n}\n\nexport { InkEditor };\n", "/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n/** @typedef {import(\"./interfaces\").IDownloadManager} IDownloadManager */\n/** @typedef {import(\"../../web/interfaces\").IPDFLinkService} IPDFLinkService */\n\nimport {\n  AnnotationBorderStyleType,\n  AnnotationType,\n  assert,\n  FeatureTest,\n  LINE_FACTOR,\n  shadow,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  AnnotationPrefix,\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  PDFDateString,\n  setLayerDimensions,\n} from \"./display_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { ColorConverters } from \"../shared/scripting_utils.js\";\nimport { XfaLayer } from \"./xfa_layer.js\";\n\nconst DEFAULT_TAB_INDEX = 1000;\nconst DEFAULT_FONT_SIZE = 9;\nconst GetElementsByNameSet = new WeakSet();\n\nfunction getRectDims(rect) {\n  return {\n    width: rect[2] - rect[0],\n    height: rect[3] - rect[1],\n  };\n}\n\n/**\n * @typedef {Object} AnnotationElementParameters\n * @property {Object} data\n * @property {HTMLDivElement} layer\n * @property {PDFPageProxy} page\n * @property {PageViewport} viewport\n * @property {IPDFLinkService} linkService\n * @property {IDownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {Object} svgFactory\n * @property {boolean} [enableScripting]\n * @property {boolean} [hasJSActions]\n * @property {Object} [fieldObjects]\n */\n\nclass AnnotationElementFactory {\n  /**\n   * @param {AnnotationElementParameters} parameters\n   * @returns {AnnotationElement}\n   */\n  static create(parameters) {\n    const subtype = parameters.data.annotationType;\n\n    switch (subtype) {\n      case AnnotationType.LINK:\n        return new LinkAnnotationElement(parameters);\n\n      case AnnotationType.TEXT:\n        return new TextAnnotationElement(parameters);\n\n      case AnnotationType.WIDGET:\n        const fieldType = parameters.data.fieldType;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotationElement(parameters);\n          case \"Btn\":\n            if (parameters.data.radioButton) {\n              return new RadioButtonWidgetAnnotationElement(parameters);\n            } else if (parameters.data.checkBox) {\n              return new CheckboxWidgetAnnotationElement(parameters);\n            }\n            return new PushButtonWidgetAnnotationElement(parameters);\n          case \"Ch\":\n            return new ChoiceWidgetAnnotationElement(parameters);\n        }\n        return new WidgetAnnotationElement(parameters);\n\n      case AnnotationType.POPUP:\n        return new PopupAnnotationElement(parameters);\n\n      case AnnotationType.FREETEXT:\n        return new FreeTextAnnotationElement(parameters);\n\n      case AnnotationType.LINE:\n        return new LineAnnotationElement(parameters);\n\n      case AnnotationType.SQUARE:\n        return new SquareAnnotationElement(parameters);\n\n      case AnnotationType.CIRCLE:\n        return new CircleAnnotationElement(parameters);\n\n      case AnnotationType.POLYLINE:\n        return new PolylineAnnotationElement(parameters);\n\n      case AnnotationType.CARET:\n        return new CaretAnnotationElement(parameters);\n\n      case AnnotationType.INK:\n        return new InkAnnotationElement(parameters);\n\n      case AnnotationType.POLYGON:\n        return new PolygonAnnotationElement(parameters);\n\n      case AnnotationType.HIGHLIGHT:\n        return new HighlightAnnotationElement(parameters);\n\n      case AnnotationType.UNDERLINE:\n        return new UnderlineAnnotationElement(parameters);\n\n      case AnnotationType.SQUIGGLY:\n        return new SquigglyAnnotationElement(parameters);\n\n      case AnnotationType.STRIKEOUT:\n        return new StrikeOutAnnotationElement(parameters);\n\n      case AnnotationType.STAMP:\n        return new StampAnnotationElement(parameters);\n\n      case AnnotationType.FILEATTACHMENT:\n        return new FileAttachmentAnnotationElement(parameters);\n\n      default:\n        return new AnnotationElement(parameters);\n    }\n  }\n}\n\nclass AnnotationElement {\n  constructor(\n    parameters,\n    {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false,\n    } = {}\n  ) {\n    this.isRenderable = isRenderable;\n    this.data = parameters.data;\n    this.layer = parameters.layer;\n    this.page = parameters.page;\n    this.viewport = parameters.viewport;\n    this.linkService = parameters.linkService;\n    this.downloadManager = parameters.downloadManager;\n    this.imageResourcesPath = parameters.imageResourcesPath;\n    this.renderForms = parameters.renderForms;\n    this.svgFactory = parameters.svgFactory;\n    this.annotationStorage = parameters.annotationStorage;\n    this.enableScripting = parameters.enableScripting;\n    this.hasJSActions = parameters.hasJSActions;\n    this._fieldObjects = parameters.fieldObjects;\n\n    if (isRenderable) {\n      this.container = this._createContainer(ignoreBorder);\n    }\n    if (createQuadrilaterals) {\n      this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n    }\n  }\n\n  /**\n   * Create an empty container for the annotation's HTML element.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {HTMLElement} A section element.\n   */\n  _createContainer(ignoreBorder = false) {\n    const { data, page, viewport } = this;\n\n    const container = document.createElement(\"section\");\n    container.setAttribute(\"data-annotation-id\", data.id);\n\n    if (data.noRotate) {\n      container.classList.add(\"norotate\");\n    }\n\n    const { pageWidth, pageHeight, pageX, pageY } = viewport.rawDims;\n    const { width, height } = getRectDims(data.rect);\n\n    // Do *not* modify `data.rect`, since that will corrupt the annotation\n    // position on subsequent calls to `_createContainer` (see issue 6804).\n    const rect = Util.normalizeRect([\n      data.rect[0],\n      page.view[3] - data.rect[1] + page.view[1],\n      data.rect[2],\n      page.view[3] - data.rect[3] + page.view[1],\n    ]);\n\n    if (!ignoreBorder && data.borderStyle.width > 0) {\n      container.style.borderWidth = `${data.borderStyle.width}px`;\n\n      const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n      const verticalRadius = data.borderStyle.verticalCornerRadius;\n      if (horizontalRadius > 0 || verticalRadius > 0) {\n        const radius = `calc(${horizontalRadius}px * var(--scale-factor)) / calc(${verticalRadius}px * var(--scale-factor))`;\n        container.style.borderRadius = radius;\n      } else if (this instanceof RadioButtonWidgetAnnotationElement) {\n        const radius = `calc(${width}px * var(--scale-factor)) / calc(${height}px * var(--scale-factor))`;\n        container.style.borderRadius = radius;\n      }\n\n      switch (data.borderStyle.style) {\n        case AnnotationBorderStyleType.SOLID:\n          container.style.borderStyle = \"solid\";\n          break;\n\n        case AnnotationBorderStyleType.DASHED:\n          container.style.borderStyle = \"dashed\";\n          break;\n\n        case AnnotationBorderStyleType.BEVELED:\n          warn(\"Unimplemented border style: beveled\");\n          break;\n\n        case AnnotationBorderStyleType.INSET:\n          warn(\"Unimplemented border style: inset\");\n          break;\n\n        case AnnotationBorderStyleType.UNDERLINE:\n          container.style.borderBottomStyle = \"solid\";\n          break;\n\n        default:\n          break;\n      }\n\n      const borderColor = data.borderColor || null;\n      if (borderColor) {\n        container.style.borderColor = Util.makeHexColor(\n          borderColor[0] | 0,\n          borderColor[1] | 0,\n          borderColor[2] | 0\n        );\n      } else {\n        // Transparent (invisible) border, so do not draw it at all.\n        container.style.borderWidth = 0;\n      }\n    }\n\n    container.style.left = `${(100 * (rect[0] - pageX)) / pageWidth}%`;\n    container.style.top = `${(100 * (rect[1] - pageY)) / pageHeight}%`;\n\n    const { rotation } = data;\n    if (data.hasOwnCanvas || rotation === 0) {\n      container.style.width = `${(100 * width) / pageWidth}%`;\n      container.style.height = `${(100 * height) / pageHeight}%`;\n    } else {\n      this.setRotation(rotation, container);\n    }\n\n    return container;\n  }\n\n  setRotation(angle, container = this.container) {\n    const { pageWidth, pageHeight } = this.viewport.rawDims;\n    const { width, height } = getRectDims(this.data.rect);\n\n    let elementWidth, elementHeight;\n    if (angle % 180 === 0) {\n      elementWidth = (100 * width) / pageWidth;\n      elementHeight = (100 * height) / pageHeight;\n    } else {\n      elementWidth = (100 * height) / pageWidth;\n      elementHeight = (100 * width) / pageHeight;\n    }\n\n    container.style.width = `${elementWidth}%`;\n    container.style.height = `${elementHeight}%`;\n\n    container.setAttribute(\"data-main-rotation\", (360 - angle) % 360);\n  }\n\n  get _commonActions() {\n    const setColor = (jsName, styleName, event) => {\n      const color = event.detail[jsName];\n      event.target.style[styleName] = ColorConverters[`${color[0]}_HTML`](\n        color.slice(1)\n      );\n    };\n\n    return shadow(this, \"_commonActions\", {\n      display: event => {\n        const hidden = event.detail.display % 2 === 1;\n        this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden,\n          print: event.detail.display === 0 || event.detail.display === 3,\n        });\n      },\n      print: event => {\n        this.annotationStorage.setValue(this.data.id, {\n          print: event.detail.print,\n        });\n      },\n      hidden: event => {\n        this.container.style.visibility = event.detail.hidden\n          ? \"hidden\"\n          : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden: event.detail.hidden,\n        });\n      },\n      focus: event => {\n        setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n      },\n      userName: event => {\n        // tooltip\n        event.target.title = event.detail.userName;\n      },\n      readonly: event => {\n        if (event.detail.readonly) {\n          event.target.setAttribute(\"readonly\", \"\");\n        } else {\n          event.target.removeAttribute(\"readonly\");\n        }\n      },\n      required: event => {\n        this._setRequired(event.target, event.detail.required);\n      },\n      bgColor: event => {\n        setColor(\"bgColor\", \"backgroundColor\", event);\n      },\n      fillColor: event => {\n        setColor(\"fillColor\", \"backgroundColor\", event);\n      },\n      fgColor: event => {\n        setColor(\"fgColor\", \"color\", event);\n      },\n      textColor: event => {\n        setColor(\"textColor\", \"color\", event);\n      },\n      borderColor: event => {\n        setColor(\"borderColor\", \"borderColor\", event);\n      },\n      strokeColor: event => {\n        setColor(\"strokeColor\", \"borderColor\", event);\n      },\n      rotation: event => {\n        const angle = event.detail.rotation;\n        this.setRotation(angle);\n        this.annotationStorage.setValue(this.data.id, {\n          rotation: angle,\n        });\n      },\n    });\n  }\n\n  _dispatchEventFromSandbox(actions, jsEvent) {\n    const commonActions = this._commonActions;\n    for (const name of Object.keys(jsEvent.detail)) {\n      const action = actions[name] || commonActions[name];\n      action?.(jsEvent);\n    }\n  }\n\n  _setDefaultPropertiesFromJS(element) {\n    if (!this.enableScripting) {\n      return;\n    }\n\n    // Some properties may have been updated thanks to JS.\n    const storedData = this.annotationStorage.getRawValue(this.data.id);\n    if (!storedData) {\n      return;\n    }\n\n    const commonActions = this._commonActions;\n    for (const [actionName, detail] of Object.entries(storedData)) {\n      const action = commonActions[actionName];\n      if (action) {\n        const eventProxy = {\n          detail: {\n            [actionName]: detail,\n          },\n          target: element,\n        };\n        action(eventProxy);\n        // The action has been consumed: no need to keep it.\n        delete storedData[actionName];\n      }\n    }\n  }\n\n  /**\n   * Create quadrilaterals from the annotation's quadpoints.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLElement>} An array of section elements.\n   */\n  _createQuadrilaterals(ignoreBorder = false) {\n    if (!this.data.quadPoints) {\n      return null;\n    }\n\n    const quadrilaterals = [];\n    const savedRect = this.data.rect;\n    for (const quadPoint of this.data.quadPoints) {\n      this.data.rect = [\n        quadPoint[2].x,\n        quadPoint[2].y,\n        quadPoint[1].x,\n        quadPoint[1].y,\n      ];\n      quadrilaterals.push(this._createContainer(ignoreBorder));\n    }\n    this.data.rect = savedRect;\n    return quadrilaterals;\n  }\n\n  /**\n   * Create a popup for the annotation's HTML element. This is used for\n   * annotations that do not have a Popup entry in the dictionary, but\n   * are of a type that works with popups (such as Highlight annotations).\n   *\n   * @private\n   * @param {HTMLDivElement|HTMLImageElement|null} trigger\n   * @param {Object} data\n   * @memberof AnnotationElement\n   */\n  _createPopup(trigger, data) {\n    let container = this.container;\n    if (this.quadrilaterals) {\n      trigger ||= this.quadrilaterals;\n      container = this.quadrilaterals[0];\n    }\n\n    // If no trigger element is specified, create it.\n    if (!trigger) {\n      trigger = document.createElement(\"div\");\n      trigger.classList.add(\"popupTriggerArea\");\n      container.append(trigger);\n    }\n\n    const popupElement = new PopupElement({\n      container,\n      trigger,\n      color: data.color,\n      titleObj: data.titleObj,\n      modificationDate: data.modificationDate,\n      contentsObj: data.contentsObj,\n      richText: data.richText,\n      hideWrapper: true,\n    });\n    const popup = popupElement.render();\n\n    // Position the popup next to the annotation's container.\n    popup.style.left = \"100%\";\n\n    container.append(popup);\n  }\n\n  /**\n   * Render the quadrilaterals of the annotation.\n   *\n   * @private\n   * @param {string} className\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLElement>} An array of section elements.\n   */\n  _renderQuadrilaterals(className) {\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      assert(this.quadrilaterals, \"Missing quadrilaterals during rendering\");\n    }\n\n    for (const quadrilateral of this.quadrilaterals) {\n      quadrilateral.classList.add(className);\n    }\n    return this.quadrilaterals;\n  }\n\n  /**\n   * Render the annotation's HTML element(s).\n   *\n   * @public\n   * @memberof AnnotationElement\n   * @returns {HTMLElement|Array<HTMLElement>} A section element or\n   *   an array of section elements.\n   */\n  render() {\n    unreachable(\"Abstract method `AnnotationElement.render` called\");\n  }\n\n  /**\n   * @private\n   * @returns {Array}\n   */\n  _getElementsByName(name, skipId = null) {\n    const fields = [];\n\n    if (this._fieldObjects) {\n      const fieldObj = this._fieldObjects[name];\n      if (fieldObj) {\n        for (const { page, id, exportValues } of fieldObj) {\n          if (page === -1) {\n            continue;\n          }\n          if (id === skipId) {\n            continue;\n          }\n          const exportValue =\n            typeof exportValues === \"string\" ? exportValues : null;\n\n          const domElement = document.querySelector(\n            `[data-element-id=\"${id}\"]`\n          );\n          if (domElement && !GetElementsByNameSet.has(domElement)) {\n            warn(`_getElementsByName - element not allowed: ${id}`);\n            continue;\n          }\n          fields.push({ id, exportValue, domElement });\n        }\n      }\n      return fields;\n    }\n    // Fallback to a regular DOM lookup, to ensure that the standalone\n    // viewer components won't break.\n    for (const domElement of document.getElementsByName(name)) {\n      const { exportValue } = domElement;\n      const id = domElement.getAttribute(\"data-element-id\");\n      if (id === skipId) {\n        continue;\n      }\n      if (!GetElementsByNameSet.has(domElement)) {\n        continue;\n      }\n      fields.push({ id, exportValue, domElement });\n    }\n    return fields;\n  }\n}\n\nclass LinkAnnotationElement extends AnnotationElement {\n  constructor(parameters, options = null) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: !!options?.ignoreBorder,\n      createQuadrilaterals: true,\n    });\n    this.isTooltipOnly = parameters.data.isTooltipOnly;\n  }\n\n  render() {\n    const { data, linkService } = this;\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"data-element-id\", data.id);\n    let isBound = false;\n\n    if (data.url) {\n      linkService.addLinkAttributes(link, data.url, data.newWindow);\n      isBound = true;\n    } else if (data.action) {\n      this._bindNamedAction(link, data.action);\n      isBound = true;\n    } else if (data.attachment) {\n      this._bindAttachment(link, data.attachment);\n      isBound = true;\n    } else if (data.setOCGState) {\n      this.#bindSetOCGState(link, data.setOCGState);\n      isBound = true;\n    } else if (data.dest) {\n      this._bindLink(link, data.dest);\n      isBound = true;\n    } else {\n      if (\n        data.actions &&\n        (data.actions.Action ||\n          data.actions[\"Mouse Up\"] ||\n          data.actions[\"Mouse Down\"]) &&\n        this.enableScripting &&\n        this.hasJSActions\n      ) {\n        this._bindJSAction(link, data);\n        isBound = true;\n      }\n\n      if (data.resetForm) {\n        this._bindResetFormAction(link, data.resetForm);\n        isBound = true;\n      } else if (this.isTooltipOnly && !isBound) {\n        this._bindLink(link, \"\");\n        isBound = true;\n      }\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"linkAnnotation\").map(\n        (quadrilateral, index) => {\n          const linkElement = index === 0 ? link : link.cloneNode();\n          quadrilateral.append(linkElement);\n          return quadrilateral;\n        }\n      );\n    }\n\n    this.container.classList.add(\"linkAnnotation\");\n    if (isBound) {\n      this.container.append(link);\n    }\n\n    return this.container;\n  }\n\n  #setInternalLink() {\n    this.container.setAttribute(\"data-internal-link\", \"\");\n  }\n\n  /**\n   * Bind internal links to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} destination\n   * @memberof LinkAnnotationElement\n   */\n  _bindLink(link, destination) {\n    link.href = this.linkService.getDestinationHash(destination);\n    link.onclick = () => {\n      if (destination) {\n        this.linkService.goToDestination(destination);\n      }\n      return false;\n    };\n    if (destination || destination === /* isTooltipOnly = */ \"\") {\n      this.#setInternalLink();\n    }\n  }\n\n  /**\n   * Bind named actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} action\n   * @memberof LinkAnnotationElement\n   */\n  _bindNamedAction(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeNamedAction(action);\n      return false;\n    };\n    this.#setInternalLink();\n  }\n\n  /**\n   * Bind attachments to the link element.\n   * @param {Object} link\n   * @param {Object} attachment\n   */\n  _bindAttachment(link, attachment) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.downloadManager?.openOrDownloadData(\n        this.container,\n        attachment.content,\n        attachment.filename\n      );\n      return false;\n    };\n    this.#setInternalLink();\n  }\n\n  /**\n   * Bind SetOCGState actions to the link element.\n   * @param {Object} link\n   * @param {Object} action\n   */\n  #bindSetOCGState(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeSetOCGState(action);\n      return false;\n    };\n    this.#setInternalLink();\n  }\n\n  /**\n   * Bind JS actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} data\n   * @memberof LinkAnnotationElement\n   */\n  _bindJSAction(link, data) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    const map = new Map([\n      [\"Action\", \"onclick\"],\n      [\"Mouse Up\", \"onmouseup\"],\n      [\"Mouse Down\", \"onmousedown\"],\n    ]);\n    for (const name of Object.keys(data.actions)) {\n      const jsName = map.get(name);\n      if (!jsName) {\n        continue;\n      }\n      link[jsName] = () => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: data.id,\n            name,\n          },\n        });\n        return false;\n      };\n    }\n\n    if (!link.onclick) {\n      link.onclick = () => false;\n    }\n    this.#setInternalLink();\n  }\n\n  _bindResetFormAction(link, resetForm) {\n    const otherClickAction = link.onclick;\n    if (!otherClickAction) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n    }\n    this.#setInternalLink();\n\n    if (!this._fieldObjects) {\n      warn(\n        `_bindResetFormAction - \"resetForm\" action not supported, ` +\n          \"ensure that the `fieldObjects` parameter is provided.\"\n      );\n      if (!otherClickAction) {\n        link.onclick = () => false;\n      }\n      return;\n    }\n\n    link.onclick = () => {\n      otherClickAction?.();\n\n      const {\n        fields: resetFormFields,\n        refs: resetFormRefs,\n        include,\n      } = resetForm;\n\n      const allFields = [];\n      if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n        const fieldIds = new Set(resetFormRefs);\n        for (const fieldName of resetFormFields) {\n          const fields = this._fieldObjects[fieldName] || [];\n          for (const { id } of fields) {\n            fieldIds.add(id);\n          }\n        }\n        for (const fields of Object.values(this._fieldObjects)) {\n          for (const field of fields) {\n            if (fieldIds.has(field.id) === include) {\n              allFields.push(field);\n            }\n          }\n        }\n      } else {\n        for (const fields of Object.values(this._fieldObjects)) {\n          allFields.push(...fields);\n        }\n      }\n\n      const storage = this.annotationStorage;\n      const allIds = [];\n      for (const field of allFields) {\n        const { id } = field;\n        allIds.push(id);\n        switch (field.type) {\n          case \"text\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value });\n            break;\n          }\n          case \"checkbox\":\n          case \"radiobutton\": {\n            const value = field.defaultValue === field.exportValues;\n            storage.setValue(id, { value });\n            break;\n          }\n          case \"combobox\":\n          case \"listbox\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value });\n            break;\n          }\n          default:\n            continue;\n        }\n\n        const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\n        if (!domElement) {\n          continue;\n        } else if (!GetElementsByNameSet.has(domElement)) {\n          warn(`_bindResetFormAction - element not allowed: ${id}`);\n          continue;\n        }\n        domElement.dispatchEvent(new Event(\"resetform\"));\n      }\n\n      if (this.enableScripting) {\n        // Update the values in the sandbox.\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: \"app\",\n            ids: allIds,\n            name: \"ResetForm\",\n          },\n        });\n      }\n\n      return false;\n    };\n  }\n}\n\nclass TextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    this.container.classList.add(\"textAnnotation\");\n\n    const image = document.createElement(\"img\");\n    image.src =\n      this.imageResourcesPath +\n      \"annotation-\" +\n      this.data.name.toLowerCase() +\n      \".svg\";\n    image.alt = \"[{{type}} Annotation]\";\n    image.dataset.l10nId = \"text_annotation_type\";\n    image.dataset.l10nArgs = JSON.stringify({ type: this.data.name });\n\n    if (!this.data.hasPopup) {\n      this._createPopup(image, this.data);\n    }\n\n    this.container.append(image);\n    return this.container;\n  }\n}\n\nclass WidgetAnnotationElement extends AnnotationElement {\n  render() {\n    // Show only the container for unsupported field types.\n    if (this.data.alternativeText) {\n      this.container.title = this.data.alternativeText;\n    }\n\n    return this.container;\n  }\n\n  showElementAndHideCanvas(element) {\n    if (this.data.hasOwnCanvas) {\n      if (element.previousSibling?.nodeName === \"CANVAS\") {\n        element.previousSibling.hidden = true;\n      }\n      element.hidden = false;\n    }\n  }\n\n  _getKeyModifier(event) {\n    const { isWin, isMac } = FeatureTest.platform;\n    return (isWin && event.ctrlKey) || (isMac && event.metaKey);\n  }\n\n  _setEventListener(element, baseName, eventName, valueGetter) {\n    if (baseName.includes(\"mouse\")) {\n      // Mouse events\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n            shift: event.shiftKey,\n            modifier: this._getKeyModifier(event),\n          },\n        });\n      });\n    } else {\n      // Non mouse event\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n          },\n        });\n      });\n    }\n  }\n\n  _setEventListeners(element, names, getter) {\n    for (const [baseName, eventName] of names) {\n      if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n        this._setEventListener(element, baseName, eventName, getter);\n      }\n    }\n  }\n\n  _setBackgroundColor(element) {\n    const color = this.data.backgroundColor || null;\n    element.style.backgroundColor =\n      color === null\n        ? \"transparent\"\n        : Util.makeHexColor(color[0], color[1], color[2]);\n  }\n\n  /**\n   * Apply text styles to the text in the element.\n   *\n   * @private\n   * @param {HTMLDivElement} element\n   * @memberof TextWidgetAnnotationElement\n   */\n  _setTextStyle(element) {\n    const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n    const { fontColor } = this.data.defaultAppearanceData;\n    const fontSize =\n      this.data.defaultAppearanceData.fontSize || DEFAULT_FONT_SIZE;\n\n    const style = element.style;\n\n    // TODO: If the font-size is zero, calculate it based on the height and\n    //       width of the element.\n    // Not setting `style.fontSize` will use the default font-size for now.\n\n    // We don't use the font, as specified in the PDF document, for the <input>\n    // element. Hence using the original `fontSize` could look bad, which is why\n    // it's instead based on the field height.\n    // If the height is \"big\" then it could lead to a too big font size\n    // so in this case use the one we've in the pdf (hence the min).\n    let computedFontSize;\n    const BORDER_SIZE = 2;\n    const roundToOneDecimal = x => Math.round(10 * x) / 10;\n    if (this.data.multiLine) {\n      const height = Math.abs(\n        this.data.rect[3] - this.data.rect[1] - BORDER_SIZE\n      );\n      const numberOfLines = Math.round(height / (LINE_FACTOR * fontSize)) || 1;\n      const lineHeight = height / numberOfLines;\n      computedFontSize = Math.min(\n        fontSize,\n        roundToOneDecimal(lineHeight / LINE_FACTOR)\n      );\n    } else {\n      const height = Math.abs(\n        this.data.rect[3] - this.data.rect[1] - BORDER_SIZE\n      );\n      computedFontSize = Math.min(\n        fontSize,\n        roundToOneDecimal(height / LINE_FACTOR)\n      );\n    }\n    style.fontSize = `calc(${computedFontSize}px * var(--scale-factor))`;\n\n    style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n    if (this.data.textAlignment !== null) {\n      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n    }\n  }\n\n  _setRequired(element, isRequired) {\n    if (isRequired) {\n      element.setAttribute(\"required\", true);\n    } else {\n      element.removeAttribute(\"required\");\n    }\n    element.setAttribute(\"aria-required\", isRequired);\n  }\n}\n\nclass TextWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    const isRenderable =\n      parameters.renderForms ||\n      (!parameters.data.hasAppearance && !!parameters.data.fieldValue);\n    super(parameters, { isRenderable });\n  }\n\n  setPropertyOnSiblings(base, key, value, keyInStorage) {\n    const storage = this.annotationStorage;\n    for (const element of this._getElementsByName(\n      base.name,\n      /* skipId = */ base.id\n    )) {\n      if (element.domElement) {\n        element.domElement[key] = value;\n      }\n      storage.setValue(element.id, { [keyInStorage]: value });\n    }\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    this.container.classList.add(\"textWidgetAnnotation\");\n\n    let element = null;\n    if (this.renderForms) {\n      // NOTE: We cannot set the values using `element.value` below, since it\n      //       prevents the AnnotationLayer rasterizer in `test/driver.js`\n      //       from parsing the elements correctly for the reference tests.\n      const storedData = storage.getValue(id, {\n        value: this.data.fieldValue,\n      });\n      let textContent = storedData.value || \"\";\n      const maxLen = storage.getValue(id, {\n        charLimit: this.data.maxLen,\n      }).charLimit;\n      if (maxLen && textContent.length > maxLen) {\n        textContent = textContent.slice(0, maxLen);\n      }\n\n      let fieldFormattedValues =\n        storedData.formattedValue || this.data.textContent?.join(\"\\n\") || null;\n      if (fieldFormattedValues && this.data.comb) {\n        fieldFormattedValues = fieldFormattedValues.replaceAll(/\\s+/g, \"\");\n      }\n\n      const elementData = {\n        userValue: textContent,\n        formattedValue: fieldFormattedValues,\n        lastCommittedValue: null,\n        commitKey: 1,\n      };\n\n      if (this.data.multiLine) {\n        element = document.createElement(\"textarea\");\n        element.textContent = fieldFormattedValues ?? textContent;\n        if (this.data.doNotScroll) {\n          element.style.overflowY = \"hidden\";\n        }\n      } else {\n        element = document.createElement(\"input\");\n        element.type = \"text\";\n        element.setAttribute(\"value\", fieldFormattedValues ?? textContent);\n        if (this.data.doNotScroll) {\n          element.style.overflowX = \"hidden\";\n        }\n      }\n      if (this.data.hasOwnCanvas) {\n        element.hidden = true;\n      }\n      GetElementsByNameSet.add(element);\n      element.setAttribute(\"data-element-id\", id);\n\n      element.disabled = this.data.readOnly;\n      element.name = this.data.fieldName;\n      element.tabIndex = DEFAULT_TAB_INDEX;\n\n      this._setRequired(element, this.data.required);\n\n      if (maxLen) {\n        element.maxLength = maxLen;\n      }\n\n      element.addEventListener(\"input\", event => {\n        storage.setValue(id, { value: event.target.value });\n        this.setPropertyOnSiblings(\n          element,\n          \"value\",\n          event.target.value,\n          \"value\"\n        );\n        elementData.formattedValue = null;\n      });\n\n      element.addEventListener(\"resetform\", event => {\n        const defaultValue = this.data.defaultFieldValue ?? \"\";\n        element.value = elementData.userValue = defaultValue;\n        elementData.formattedValue = null;\n      });\n\n      let blurListener = event => {\n        const { formattedValue } = elementData;\n        if (formattedValue !== null && formattedValue !== undefined) {\n          event.target.value = formattedValue;\n        }\n        // Reset the cursor position to the start of the field (issue 12359).\n        event.target.scrollLeft = 0;\n      };\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"focus\", event => {\n          const { target } = event;\n          if (elementData.userValue) {\n            target.value = elementData.userValue;\n          }\n          elementData.lastCommittedValue = target.value;\n          elementData.commitKey = 1;\n        });\n\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\n          this.showElementAndHideCanvas(jsEvent.target);\n          const actions = {\n            value(event) {\n              elementData.userValue = event.detail.value ?? \"\";\n              storage.setValue(id, { value: elementData.userValue.toString() });\n              event.target.value = elementData.userValue;\n            },\n            formattedValue(event) {\n              const { formattedValue } = event.detail;\n              elementData.formattedValue = formattedValue;\n              if (\n                formattedValue !== null &&\n                formattedValue !== undefined &&\n                event.target !== document.activeElement\n              ) {\n                // Input hasn't the focus so display formatted string\n                event.target.value = formattedValue;\n              }\n              storage.setValue(id, {\n                formattedValue,\n              });\n            },\n            selRange(event) {\n              event.target.setSelectionRange(...event.detail.selRange);\n            },\n            charLimit: event => {\n              const { charLimit } = event.detail;\n              const { target } = event;\n              if (charLimit === 0) {\n                target.removeAttribute(\"maxLength\");\n                return;\n              }\n\n              target.setAttribute(\"maxLength\", charLimit);\n              let value = elementData.userValue;\n              if (!value || value.length <= charLimit) {\n                return;\n              }\n              value = value.slice(0, charLimit);\n              target.value = elementData.userValue = value;\n              storage.setValue(id, { value });\n\n              this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                source: this,\n                detail: {\n                  id,\n                  name: \"Keystroke\",\n                  value,\n                  willCommit: true,\n                  commitKey: 1,\n                  selStart: target.selectionStart,\n                  selEnd: target.selectionEnd,\n                },\n              });\n            },\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n\n        // Even if the field hasn't any actions\n        // leaving it can still trigger some actions with Calculate\n        element.addEventListener(\"keydown\", event => {\n          elementData.commitKey = 1;\n          // If the key is one of Escape, Enter then the data are committed.\n          // If we've a Tab then data will be committed on blur.\n          let commitKey = -1;\n          if (event.key === \"Escape\") {\n            commitKey = 0;\n          } else if (event.key === \"Enter\" && !this.data.multiLine) {\n            // When we've a multiline field, \"Enter\" key is a key as the other\n            // hence we don't commit the data (Acrobat behaves the same way)\n            // (see issue #15627).\n            commitKey = 2;\n          } else if (event.key === \"Tab\") {\n            elementData.commitKey = 3;\n          }\n          if (commitKey === -1) {\n            return;\n          }\n          const { value } = event.target;\n          if (elementData.lastCommittedValue === value) {\n            return;\n          }\n          elementData.lastCommittedValue = value;\n          // Save the entered value\n          elementData.userValue = value;\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              value,\n              willCommit: true,\n              commitKey,\n              selStart: event.target.selectionStart,\n              selEnd: event.target.selectionEnd,\n            },\n          });\n        });\n        const _blurListener = blurListener;\n        blurListener = null;\n        element.addEventListener(\"blur\", event => {\n          if (!event.relatedTarget) {\n            return;\n          }\n          const { value } = event.target;\n          elementData.userValue = value;\n          if (elementData.lastCommittedValue !== value) {\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value,\n                willCommit: true,\n                commitKey: elementData.commitKey,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd,\n              },\n            });\n          }\n          _blurListener(event);\n        });\n\n        if (this.data.actions?.Keystroke) {\n          element.addEventListener(\"beforeinput\", event => {\n            elementData.lastCommittedValue = null;\n            const { data, target } = event;\n            const { value, selectionStart, selectionEnd } = target;\n\n            let selStart = selectionStart,\n              selEnd = selectionEnd;\n\n            switch (event.inputType) {\n              // https://rawgit.com/w3c/input-events/v1/index.html#interface-InputEvent-Attributes\n              case \"deleteWordBackward\": {\n                const match = value\n                  .substring(0, selectionStart)\n                  .match(/\\w*[^\\w]*$/);\n                if (match) {\n                  selStart -= match[0].length;\n                }\n                break;\n              }\n              case \"deleteWordForward\": {\n                const match = value\n                  .substring(selectionStart)\n                  .match(/^[^\\w]*\\w*/);\n                if (match) {\n                  selEnd += match[0].length;\n                }\n                break;\n              }\n              case \"deleteContentBackward\":\n                if (selectionStart === selectionEnd) {\n                  selStart -= 1;\n                }\n                break;\n              case \"deleteContentForward\":\n                if (selectionStart === selectionEnd) {\n                  selEnd += 1;\n                }\n                break;\n            }\n\n            // We handle the event ourselves.\n            event.preventDefault();\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value,\n                change: data || \"\",\n                willCommit: false,\n                selStart,\n                selEnd,\n              },\n            });\n          });\n        }\n\n        this._setEventListeners(\n          element,\n          [\n            [\"focus\", \"Focus\"],\n            [\"blur\", \"Blur\"],\n            [\"mousedown\", \"Mouse Down\"],\n            [\"mouseenter\", \"Mouse Enter\"],\n            [\"mouseleave\", \"Mouse Exit\"],\n            [\"mouseup\", \"Mouse Up\"],\n          ],\n          event => event.target.value\n        );\n      }\n\n      if (blurListener) {\n        element.addEventListener(\"blur\", blurListener);\n      }\n\n      if (this.data.comb) {\n        const fieldWidth = this.data.rect[2] - this.data.rect[0];\n        const combWidth = fieldWidth / maxLen;\n\n        element.classList.add(\"comb\");\n        element.style.letterSpacing = `calc(${combWidth}px * var(--scale-factor) - 1ch)`;\n      }\n    } else {\n      element = document.createElement(\"div\");\n      element.textContent = this.data.fieldValue;\n      element.style.verticalAlign = \"middle\";\n      element.style.display = \"table-cell\";\n    }\n\n    this._setTextStyle(element);\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n\n    this.container.append(element);\n    return this.container;\n  }\n}\n\nclass CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.exportValue === data.fieldValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== \"Off\";\n      storage.setValue(id, { value });\n    }\n\n    this.container.classList.add(\"buttonWidgetAnnotation\", \"checkBox\");\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.setAttribute(\"data-element-id\", id);\n\n    element.disabled = data.readOnly;\n    this._setRequired(element, this.data.required);\n    element.type = \"checkbox\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"exportValue\", data.exportValue);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const checkbox of this._getElementsByName(name, /* skipId = */ id)) {\n        const curChecked = checked && checkbox.exportValue === data.exportValue;\n        if (checkbox.domElement) {\n          checkbox.domElement.checked = curChecked;\n        }\n        storage.setValue(checkbox.id, { value: curChecked });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue || \"Off\";\n      event.target.checked = defaultValue === data.exportValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            event.target.checked = event.detail.value !== \"Off\";\n            storage.setValue(id, { value: event.target.checked });\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n\n    this.container.append(element);\n    return this.container;\n  }\n}\n\nclass RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.classList.add(\"buttonWidgetAnnotation\", \"radioButton\");\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.fieldValue === data.buttonValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== data.buttonValue;\n      storage.setValue(id, { value });\n    }\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.setAttribute(\"data-element-id\", id);\n\n    element.disabled = data.readOnly;\n    this._setRequired(element, this.data.required);\n    element.type = \"radio\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const radio of this._getElementsByName(name, /* skipId = */ id)) {\n        storage.setValue(radio.id, { value: false });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue;\n      event.target.checked =\n        defaultValue !== null &&\n        defaultValue !== undefined &&\n        defaultValue === data.buttonValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      const pdfButtonValue = data.buttonValue;\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value: event => {\n            const checked = pdfButtonValue === event.detail.value;\n            for (const radio of this._getElementsByName(event.target.name)) {\n              const curChecked = checked && radio.id === id;\n              if (radio.domElement) {\n                radio.domElement.checked = curChecked;\n              }\n              storage.setValue(radio.id, { value: curChecked });\n            }\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n\n    this.container.append(element);\n    return this.container;\n  }\n}\n\nclass PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { ignoreBorder: parameters.data.hasAppearance });\n  }\n\n  render() {\n    // The rendering and functionality of a push button widget annotation is\n    // equal to that of a link annotation, but may have more functionality, such\n    // as performing actions on form fields (resetting, submitting, et cetera).\n    const container = super.render();\n    container.classList.add(\"buttonWidgetAnnotation\", \"pushButton\");\n\n    if (this.data.alternativeText) {\n      container.title = this.data.alternativeText;\n    }\n\n    const linkElement = container.lastChild;\n    if (this.enableScripting && this.hasJSActions && linkElement) {\n      this._setDefaultPropertiesFromJS(linkElement);\n\n      linkElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        this._dispatchEventFromSandbox({}, jsEvent);\n      });\n    }\n\n    return container;\n  }\n}\n\nclass ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.classList.add(\"choiceWidgetAnnotation\");\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    const storedData = storage.getValue(id, {\n      value: this.data.fieldValue,\n    });\n\n    const selectElement = document.createElement(\"select\");\n    GetElementsByNameSet.add(selectElement);\n    selectElement.setAttribute(\"data-element-id\", id);\n\n    selectElement.disabled = this.data.readOnly;\n    this._setRequired(selectElement, this.data.required);\n    selectElement.name = this.data.fieldName;\n    selectElement.tabIndex = DEFAULT_TAB_INDEX;\n\n    let addAnEmptyEntry = this.data.combo && this.data.options.length > 0;\n\n    if (!this.data.combo) {\n      // List boxes have a size and (optionally) multiple selection.\n      selectElement.size = this.data.options.length;\n      if (this.data.multiSelect) {\n        selectElement.multiple = true;\n      }\n    }\n\n    selectElement.addEventListener(\"resetform\", event => {\n      const defaultValue = this.data.defaultFieldValue;\n      for (const option of selectElement.options) {\n        option.selected = option.value === defaultValue;\n      }\n    });\n\n    // Insert the options into the choice field.\n    for (const option of this.data.options) {\n      const optionElement = document.createElement(\"option\");\n      optionElement.textContent = option.displayValue;\n      optionElement.value = option.exportValue;\n      if (storedData.value.includes(option.exportValue)) {\n        optionElement.setAttribute(\"selected\", true);\n        addAnEmptyEntry = false;\n      }\n      selectElement.append(optionElement);\n    }\n\n    let removeEmptyEntry = null;\n    if (addAnEmptyEntry) {\n      const noneOptionElement = document.createElement(\"option\");\n      noneOptionElement.value = \" \";\n      noneOptionElement.setAttribute(\"hidden\", true);\n      noneOptionElement.setAttribute(\"selected\", true);\n      selectElement.prepend(noneOptionElement);\n\n      removeEmptyEntry = () => {\n        noneOptionElement.remove();\n        selectElement.removeEventListener(\"input\", removeEmptyEntry);\n        removeEmptyEntry = null;\n      };\n      selectElement.addEventListener(\"input\", removeEmptyEntry);\n    }\n\n    const getValue = isExport => {\n      const name = isExport ? \"value\" : \"textContent\";\n      const { options, multiple } = selectElement;\n      if (!multiple) {\n        return options.selectedIndex === -1\n          ? null\n          : options[options.selectedIndex][name];\n      }\n      return Array.prototype.filter\n        .call(options, option => option.selected)\n        .map(option => option[name]);\n    };\n\n    let selectedValues = getValue(/* isExport */ false);\n\n    const getItems = event => {\n      const options = event.target.options;\n      return Array.prototype.map.call(options, option => {\n        return { displayValue: option.textContent, exportValue: option.value };\n      });\n    };\n\n    if (this.enableScripting && this.hasJSActions) {\n      selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            removeEmptyEntry?.();\n            const value = event.detail.value;\n            const values = new Set(Array.isArray(value) ? value : [value]);\n            for (const option of selectElement.options) {\n              option.selected = values.has(option.value);\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          multipleSelection(event) {\n            selectElement.multiple = true;\n          },\n          remove(event) {\n            const options = selectElement.options;\n            const index = event.detail.remove;\n            options[index].selected = false;\n            selectElement.remove(index);\n            if (options.length > 0) {\n              const i = Array.prototype.findIndex.call(\n                options,\n                option => option.selected\n              );\n              if (i === -1) {\n                options[0].selected = true;\n              }\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n              items: getItems(event),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          clear(event) {\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            storage.setValue(id, { value: null, items: [] });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          insert(event) {\n            const { index, displayValue, exportValue } = event.detail.insert;\n            const selectChild = selectElement.children[index];\n            const optionElement = document.createElement(\"option\");\n            optionElement.textContent = displayValue;\n            optionElement.value = exportValue;\n\n            if (selectChild) {\n              selectChild.before(optionElement);\n            } else {\n              selectElement.append(optionElement);\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n              items: getItems(event),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          items(event) {\n            const { items } = event.detail;\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            for (const item of items) {\n              const { displayValue, exportValue } = item;\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              selectElement.append(optionElement);\n            }\n            if (selectElement.options.length > 0) {\n              selectElement.options[0].selected = true;\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n              items: getItems(event),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          indices(event) {\n            const indices = new Set(event.detail.indices);\n            for (const option of event.target.options) {\n              option.selected = indices.has(option.index);\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          editable(event) {\n            event.target.disabled = !event.detail.editable;\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      selectElement.addEventListener(\"input\", event => {\n        const exportValue = getValue(/* isExport */ true);\n        storage.setValue(id, { value: exportValue });\n\n        event.preventDefault();\n\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id,\n            name: \"Keystroke\",\n            value: selectedValues,\n            changeEx: exportValue,\n            willCommit: false,\n            commitKey: 1,\n            keyDown: false,\n          },\n        });\n      });\n\n      this._setEventListeners(\n        selectElement,\n        [\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n          [\"input\", \"Action\"],\n          [\"input\", \"Validate\"],\n        ],\n        event => event.target.value\n      );\n    } else {\n      selectElement.addEventListener(\"input\", function (event) {\n        storage.setValue(id, { value: getValue(/* isExport */ true) });\n      });\n    }\n\n    if (this.data.combo) {\n      this._setTextStyle(selectElement);\n    } else {\n      // Just use the default font size...\n      // it's a bit hard to guess what is a good size.\n    }\n    this._setBackgroundColor(selectElement);\n    this._setDefaultPropertiesFromJS(selectElement);\n\n    this.container.append(selectElement);\n    return this.container;\n  }\n}\n\nclass PopupAnnotationElement extends AnnotationElement {\n  // Do not render popup annotations for parent elements with these types as\n  // they create the popups themselves (because of custom trigger divs).\n  static IGNORE_TYPES = new Set([\n    \"Line\",\n    \"Square\",\n    \"Circle\",\n    \"PolyLine\",\n    \"Polygon\",\n    \"Ink\",\n  ]);\n\n  constructor(parameters) {\n    const { data } = parameters;\n    const isRenderable =\n      !PopupAnnotationElement.IGNORE_TYPES.has(data.parentType) &&\n      !!(data.titleObj?.str || data.contentsObj?.str || data.richText?.str);\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    this.container.classList.add(\"popupAnnotation\");\n\n    const parentElements = this.layer.querySelectorAll(\n      `[data-annotation-id=\"${this.data.parentId}\"]`\n    );\n    if (parentElements.length === 0) {\n      return this.container;\n    }\n\n    const popup = new PopupElement({\n      container: this.container,\n      trigger: Array.from(parentElements),\n      color: this.data.color,\n      titleObj: this.data.titleObj,\n      modificationDate: this.data.modificationDate,\n      contentsObj: this.data.contentsObj,\n      richText: this.data.richText,\n    });\n\n    // Position the popup next to the parent annotation's container.\n    // PDF viewers ignore a popup annotation's rectangle.\n    const page = this.page;\n    const rect = Util.normalizeRect([\n      this.data.parentRect[0],\n      page.view[3] - this.data.parentRect[1] + page.view[1],\n      this.data.parentRect[2],\n      page.view[3] - this.data.parentRect[3] + page.view[1],\n    ]);\n    const popupLeft =\n      rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n    const popupTop = rect[1];\n\n    const { pageWidth, pageHeight, pageX, pageY } = this.viewport.rawDims;\n\n    this.container.style.left = `${(100 * (popupLeft - pageX)) / pageWidth}%`;\n    this.container.style.top = `${(100 * (popupTop - pageY)) / pageHeight}%`;\n\n    this.container.append(popup.render());\n    return this.container;\n  }\n}\n\nclass PopupElement {\n  constructor(parameters) {\n    this.container = parameters.container;\n    this.trigger = parameters.trigger;\n    this.color = parameters.color;\n    this.titleObj = parameters.titleObj;\n    this.modificationDate = parameters.modificationDate;\n    this.contentsObj = parameters.contentsObj;\n    this.richText = parameters.richText;\n    this.hideWrapper = parameters.hideWrapper || false;\n\n    this.pinned = false;\n  }\n\n  render() {\n    const BACKGROUND_ENLIGHT = 0.7;\n\n    const wrapper = document.createElement(\"div\");\n    wrapper.classList.add(\"popupWrapper\");\n\n    // For Popup annotations we hide the entire section because it contains\n    // only the popup. However, for Text annotations without a separate Popup\n    // annotation, we cannot hide the entire container as the image would\n    // disappear too. In that special case, hiding the wrapper suffices.\n    this.hideElement = this.hideWrapper ? wrapper : this.container;\n    this.hideElement.hidden = true;\n\n    const popup = document.createElement(\"div\");\n    popup.classList.add(\"popup\");\n\n    const color = this.color;\n    if (color) {\n      // Enlighten the color.\n      const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n      const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n      const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n      popup.style.backgroundColor = Util.makeHexColor(r | 0, g | 0, b | 0);\n    }\n\n    const title = document.createElement(\"h1\");\n    title.dir = this.titleObj.dir;\n    title.textContent = this.titleObj.str;\n    popup.append(title);\n\n    // The modification date is shown in the popup instead of the creation\n    // date if it is available and can be parsed correctly, which is\n    // consistent with other viewers such as Adobe Acrobat.\n    const dateObject = PDFDateString.toDateObject(this.modificationDate);\n    if (dateObject) {\n      const modificationDate = document.createElement(\"span\");\n      modificationDate.classList.add(\"popupDate\");\n      modificationDate.textContent = \"{{date}}, {{time}}\";\n      modificationDate.dataset.l10nId = \"annotation_date_string\";\n      modificationDate.dataset.l10nArgs = JSON.stringify({\n        date: dateObject.toLocaleDateString(),\n        time: dateObject.toLocaleTimeString(),\n      });\n      popup.append(modificationDate);\n    }\n\n    if (\n      this.richText?.str &&\n      (!this.contentsObj?.str || this.contentsObj.str === this.richText.str)\n    ) {\n      XfaLayer.render({\n        xfaHtml: this.richText.html,\n        intent: \"richText\",\n        div: popup,\n      });\n      popup.lastChild.classList.add(\"richText\", \"popupContent\");\n    } else {\n      const contents = this._formatContents(this.contentsObj);\n      popup.append(contents);\n    }\n\n    if (!Array.isArray(this.trigger)) {\n      this.trigger = [this.trigger];\n    }\n\n    // Attach the event listeners to the trigger element.\n    for (const element of this.trigger) {\n      element.addEventListener(\"click\", this._toggle.bind(this));\n      element.addEventListener(\"mouseover\", this._show.bind(this, false));\n      element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n    }\n    popup.addEventListener(\"click\", this._hide.bind(this, true));\n\n    wrapper.append(popup);\n    return wrapper;\n  }\n\n  /**\n   * Format the contents of the popup by adding newlines where necessary.\n   *\n   * @private\n   * @param {Object<string, string>} contentsObj\n   * @memberof PopupElement\n   * @returns {HTMLParagraphElement}\n   */\n  _formatContents({ str, dir }) {\n    const p = document.createElement(\"p\");\n    p.classList.add(\"popupContent\");\n    p.dir = dir;\n    const lines = str.split(/(?:\\r\\n?|\\n)/);\n    for (let i = 0, ii = lines.length; i < ii; ++i) {\n      const line = lines[i];\n      p.append(document.createTextNode(line));\n      if (i < ii - 1) {\n        p.append(document.createElement(\"br\"));\n      }\n    }\n    return p;\n  }\n\n  /**\n   * Toggle the visibility of the popup.\n   *\n   * @private\n   * @memberof PopupElement\n   */\n  _toggle() {\n    if (this.pinned) {\n      this._hide(true);\n    } else {\n      this._show(true);\n    }\n  }\n\n  /**\n   * Show the popup.\n   *\n   * @private\n   * @param {boolean} pin\n   * @memberof PopupElement\n   */\n  _show(pin = false) {\n    if (pin) {\n      this.pinned = true;\n    }\n    if (this.hideElement.hidden) {\n      this.hideElement.hidden = false;\n      this.container.style.zIndex =\n        parseInt(this.container.style.zIndex) + 1000;\n    }\n  }\n\n  /**\n   * Hide the popup.\n   *\n   * @private\n   * @param {boolean} unpin\n   * @memberof PopupElement\n   */\n  _hide(unpin = true) {\n    if (unpin) {\n      this.pinned = false;\n    }\n    if (!this.hideElement.hidden && !this.pinned) {\n      this.hideElement.hidden = true;\n      this.container.style.zIndex =\n        parseInt(this.container.style.zIndex) - 1000;\n    }\n  }\n}\n\nclass FreeTextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n    this.textContent = parameters.data.textContent;\n  }\n\n  render() {\n    this.container.classList.add(\"freeTextAnnotation\");\n\n    if (this.textContent) {\n      const content = document.createElement(\"div\");\n      content.classList.add(\"annotationTextContent\");\n      content.setAttribute(\"role\", \"comment\");\n      for (const line of this.textContent) {\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.textContent = line;\n        content.append(lineSpan);\n      }\n      this.container.append(content);\n    }\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass LineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"lineAnnotation\");\n\n    // Create an invisible line with the same starting and ending coordinates\n    // that acts as the trigger for the popup. Only the line itself should\n    // trigger the popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // PDF coordinates are calculated from a bottom left origin, so transform\n    // the line coordinates to a top left origin for the SVG element.\n    const line = this.svgFactory.createElement(\"svg:line\");\n    line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n    line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n    line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n    line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    line.setAttribute(\"stroke\", \"transparent\");\n    line.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(line);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the line instead\n    // of to the entire container (which is the default).\n    this._createPopup(line, data);\n\n    return this.container;\n  }\n}\n\nclass SquareAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"squareAnnotation\");\n\n    // Create an invisible square with the same rectangle that acts as the\n    // trigger for the popup. Only the square itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // The browser draws half of the borders inside the square and half of\n    // the borders outside the square by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const square = this.svgFactory.createElement(\"svg:rect\");\n    square.setAttribute(\"x\", borderWidth / 2);\n    square.setAttribute(\"y\", borderWidth / 2);\n    square.setAttribute(\"width\", width - borderWidth);\n    square.setAttribute(\"height\", height - borderWidth);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    square.setAttribute(\"stroke-width\", borderWidth || 1);\n    square.setAttribute(\"stroke\", \"transparent\");\n    square.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(square);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the square instead\n    // of to the entire container (which is the default).\n    this._createPopup(square, data);\n\n    return this.container;\n  }\n}\n\nclass CircleAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"circleAnnotation\");\n\n    // Create an invisible circle with the same ellipse that acts as the\n    // trigger for the popup. Only the circle itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // The browser draws half of the borders inside the circle and half of\n    // the borders outside the circle by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const circle = this.svgFactory.createElement(\"svg:ellipse\");\n    circle.setAttribute(\"cx\", width / 2);\n    circle.setAttribute(\"cy\", height / 2);\n    circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n    circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    circle.setAttribute(\"stroke-width\", borderWidth || 1);\n    circle.setAttribute(\"stroke\", \"transparent\");\n    circle.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(circle);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the circle instead\n    // of to the entire container (which is the default).\n    this._createPopup(circle, data);\n\n    return this.container;\n  }\n}\n\nclass PolylineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"polylineAnnotation\";\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.classList.add(this.containerClassName);\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup. Only the polyline itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // Convert the vertices array to a single points string that the SVG\n    // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n    // calculated from a bottom left origin, so transform the polyline\n    // coordinates to a top left origin for the SVG element.\n    let points = [];\n    for (const coordinate of data.vertices) {\n      const x = coordinate.x - data.rect[0];\n      const y = data.rect[3] - coordinate.y;\n      points.push(x + \",\" + y);\n    }\n    points = points.join(\" \");\n\n    const polyline = this.svgFactory.createElement(this.svgElementName);\n    polyline.setAttribute(\"points\", points);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    polyline.setAttribute(\"stroke\", \"transparent\");\n    polyline.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(polyline);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the polyline\n    // instead of to the entire container (which is the default).\n    this._createPopup(polyline, data);\n\n    return this.container;\n  }\n}\n\nclass PolygonAnnotationElement extends PolylineAnnotationElement {\n  constructor(parameters) {\n    // Polygons are specific forms of polylines, so reuse their logic.\n    super(parameters);\n\n    this.containerClassName = \"polygonAnnotation\";\n    this.svgElementName = \"svg:polygon\";\n  }\n}\n\nclass CaretAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"caretAnnotation\");\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass InkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"inkAnnotation\";\n\n    // Use the polyline SVG element since it allows us to use coordinates\n    // directly and to draw both straight lines and curves.\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.classList.add(this.containerClassName);\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    for (const inkList of data.inkLists) {\n      // Convert the ink list to a single points string that the SVG\n      // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n      // calculated from a bottom left origin, so transform the polyline\n      // coordinates to a top left origin for the SVG element.\n      let points = [];\n      for (const coordinate of inkList) {\n        const x = coordinate.x - data.rect[0];\n        const y = data.rect[3] - coordinate.y;\n        points.push(`${x},${y}`);\n      }\n      points = points.join(\" \");\n\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      polyline.setAttribute(\"points\", points);\n      // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n      // won't be possible to open/close the popup (note e.g. issue 11122).\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"transparent\");\n\n      // Create the popup ourselves so that we can bind it to the polyline\n      // instead of to the entire container (which is the default).\n      this._createPopup(polyline, data);\n\n      svg.append(polyline);\n    }\n\n    this.container.append(svg);\n    return this.container;\n  }\n}\n\nclass HighlightAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"highlightAnnotation\");\n    }\n\n    this.container.classList.add(\"highlightAnnotation\");\n    return this.container;\n  }\n}\n\nclass UnderlineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"underlineAnnotation\");\n    }\n\n    this.container.classList.add(\"underlineAnnotation\");\n    return this.container;\n  }\n}\n\nclass SquigglyAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"squigglyAnnotation\");\n    }\n\n    this.container.classList.add(\"squigglyAnnotation\");\n    return this.container;\n  }\n}\n\nclass StrikeOutAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n    }\n\n    this.container.classList.add(\"strikeoutAnnotation\");\n    return this.container;\n  }\n}\n\nclass StampAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str ||\n      parameters.data.richText?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"stampAnnotation\");\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass FileAttachmentAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true });\n\n    const { filename, content } = this.data.file;\n    this.filename = getFilenameFromUrl(filename, /* onlyStripPath = */ true);\n    this.content = content;\n\n    this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n      source: this,\n      filename,\n      content,\n    });\n  }\n\n  render() {\n    this.container.classList.add(\"fileAttachmentAnnotation\");\n\n    let trigger;\n    if (this.data.hasAppearance) {\n      trigger = document.createElement(\"div\");\n    } else {\n      // Unfortunately it seems that it's not clearly specified exactly what\n      // names are actually valid, since Table 184 contains:\n      //   Conforming readers shall provide predefined icon appearances for at\n      //   least the following standard names: GraphPushPin, PaperclipTag.\n      //   Additional names may be supported as well. Default value: PushPin.\n      trigger = document.createElement(\"img\");\n      trigger.src = `${this.imageResourcesPath}annotation-${\n        /paperclip/i.test(this.data.name) ? \"paperclip\" : \"pushpin\"\n      }.svg`;\n    }\n    trigger.classList.add(\"popupTriggerArea\");\n    trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n    if (\n      !this.data.hasPopup &&\n      (this.data.titleObj?.str ||\n        this.data.contentsObj?.str ||\n        this.data.richText)\n    ) {\n      this._createPopup(trigger, this.data);\n    }\n\n    this.container.append(trigger);\n    return this.container;\n  }\n\n  /**\n   * Download the file attachment associated with this annotation.\n   *\n   * @private\n   * @memberof FileAttachmentAnnotationElement\n   */\n  _download() {\n    this.downloadManager?.openOrDownloadData(\n      this.container,\n      this.content,\n      this.filename\n    );\n  }\n}\n\n/**\n * @typedef {Object} AnnotationLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Array} annotations\n * @property {PDFPageProxy} page\n * @property {IPDFLinkService} linkService\n * @property {IDownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {boolean} [enableScripting] - Enable embedded script execution.\n * @property {boolean} [hasJSActions] - Some fields have JS actions.\n *   The default value is `false`.\n * @property {Object<string, Array<Object>> | null} [fieldObjects]\n * @property {Map<string, HTMLCanvasElement>} [annotationCanvasMap]\n * @property {TextAccessibilityManager} [accessibilityManager]\n */\n\nclass AnnotationLayer {\n  static #appendElement(element, id, div, accessibilityManager) {\n    const contentElement = element.firstChild || element;\n    contentElement.id = `${AnnotationPrefix}${id}`;\n\n    div.append(element);\n    accessibilityManager?.moveElementInDOM(\n      div,\n      element,\n      contentElement,\n      /* isRemovable = */ false\n    );\n  }\n\n  /**\n   * Render a new annotation layer with all annotation elements.\n   *\n   * @param {AnnotationLayerParameters} params\n   * @memberof AnnotationLayer\n   */\n  static render(params) {\n    const { annotations, div, viewport, accessibilityManager } = params;\n    setLayerDimensions(div, viewport);\n\n    const elementParams = {\n      data: null,\n      layer: div,\n      page: params.page,\n      viewport,\n      linkService: params.linkService,\n      downloadManager: params.downloadManager,\n      imageResourcesPath: params.imageResourcesPath || \"\",\n      renderForms: params.renderForms !== false,\n      svgFactory: new DOMSVGFactory(),\n      annotationStorage: params.annotationStorage || new AnnotationStorage(),\n      enableScripting: params.enableScripting === true,\n      hasJSActions: params.hasJSActions,\n      fieldObjects: params.fieldObjects,\n    };\n    let zIndex = 0;\n\n    for (const data of annotations) {\n      if (data.noHTML) {\n        continue;\n      }\n      if (data.annotationType !== AnnotationType.POPUP) {\n        const { width, height } = getRectDims(data.rect);\n        if (width <= 0 || height <= 0) {\n          continue; // Ignore empty annotations.\n        }\n      }\n      elementParams.data = data;\n      const element = AnnotationElementFactory.create(elementParams);\n\n      if (!element.isRenderable) {\n        continue;\n      }\n      const rendered = element.render();\n      if (data.hidden) {\n        rendered.style.visibility = \"hidden\";\n      }\n      if (Array.isArray(rendered)) {\n        for (const renderedElement of rendered) {\n          renderedElement.style.zIndex = zIndex++;\n          AnnotationLayer.#appendElement(\n            renderedElement,\n            data.id,\n            div,\n            accessibilityManager\n          );\n        }\n      } else {\n        // The accessibility manager will move the annotation in the DOM in\n        // order to match the visual ordering.\n        // But if an annotation is above an other one, then we must draw it\n        // after the other one whatever the order is in the DOM, hence the\n        // use of the z-index.\n        rendered.style.zIndex = zIndex++;\n\n        if (element instanceof PopupAnnotationElement) {\n          // Popup annotation elements should not be on top of other\n          // annotation elements to prevent interfering with mouse events.\n          div.prepend(rendered);\n        } else {\n          AnnotationLayer.#appendElement(\n            rendered,\n            data.id,\n            div,\n            accessibilityManager\n          );\n        }\n      }\n    }\n\n    this.#setAnnotationCanvasMap(div, params.annotationCanvasMap);\n  }\n\n  /**\n   * Update the annotation elements on existing annotation layer.\n   *\n   * @param {AnnotationLayerParameters} params\n   * @memberof AnnotationLayer\n   */\n  static update(params) {\n    const { annotationCanvasMap, div, viewport } = params;\n    setLayerDimensions(div, { rotation: viewport.rotation });\n\n    this.#setAnnotationCanvasMap(div, annotationCanvasMap);\n    div.hidden = false;\n  }\n\n  static #setAnnotationCanvasMap(div, annotationCanvasMap) {\n    if (!annotationCanvasMap) {\n      return;\n    }\n    for (const [id, canvas] of annotationCanvasMap) {\n      const element = div.querySelector(`[data-annotation-id=\"${id}\"]`);\n      if (!element) {\n        continue;\n      }\n\n      const { firstChild } = element;\n      if (!firstChild) {\n        element.append(canvas);\n      } else if (firstChild.nodeName === \"CANVAS\") {\n        firstChild.replaceWith(canvas);\n      } else {\n        firstChild.before(canvas);\n      }\n    }\n    annotationCanvasMap.clear();\n  }\n}\n\nexport { AnnotationLayer };\n", "/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PLEASE NOTE: This file is currently imported in both the `../display/` and\n *              `../scripting_api/` folders, hence be EXTREMELY careful about\n *              introducing any dependencies here since that can lead to an\n *              unexpected/unnecessary size increase of the *built* files.\n */\n\nfunction makeColorComp(n) {\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255)\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\n// PDF specifications section 10.3\nclass ColorConverters {\n  static CMYK_G([c, y, m, k]) {\n    return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n  }\n\n  static G_CMYK([g]) {\n    return [\"CMYK\", 0, 0, 0, 1 - g];\n  }\n\n  static G_RGB([g]) {\n    return [\"RGB\", g, g, g];\n  }\n\n  static G_HTML([g]) {\n    const G = makeColorComp(g);\n    return `#${G}${G}${G}`;\n  }\n\n  static RGB_G([r, g, b]) {\n    return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n  }\n\n  static RGB_HTML([r, g, b]) {\n    const R = makeColorComp(r);\n    const G = makeColorComp(g);\n    const B = makeColorComp(b);\n    return `#${R}${G}${B}`;\n  }\n\n  static T_HTML() {\n    return \"#00000000\";\n  }\n\n  static CMYK_RGB([c, y, m, k]) {\n    return [\n      \"RGB\",\n      1 - Math.min(1, c + k),\n      1 - Math.min(1, m + k),\n      1 - Math.min(1, y + k),\n    ];\n  }\n\n  static CMYK_HTML(components) {\n    const rgb = this.CMYK_RGB(components).slice(1);\n    return this.RGB_HTML(rgb);\n  }\n\n  static RGB_CMYK([r, g, b]) {\n    const c = 1 - r;\n    const m = 1 - g;\n    const y = 1 - b;\n    const k = Math.min(c, m, y);\n    return [\"CMYK\", c, m, y, k];\n  }\n}\n\nexport { ColorConverters };\n", "/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n/** @typedef {import(\"../../web/interfaces\").IPDFLinkService} IPDFLinkService */\n\nimport { XfaText } from \"./xfa_text.js\";\n\n/**\n * @typedef {Object} XfaLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Object} xfaHtml\n * @property {AnnotationStorage} [annotationStorage]\n * @property {IPDFLinkService} linkService\n * @property {string} [intent] - (default value is 'display').\n */\n\nclass XfaLayer {\n  static setupStorage(html, id, element, storage, intent) {\n    const storedData = storage.getValue(id, { value: null });\n    switch (element.name) {\n      case \"textarea\":\n        if (storedData.value !== null) {\n          html.textContent = storedData.value;\n        }\n        if (intent === \"print\") {\n          break;\n        }\n        html.addEventListener(\"input\", event => {\n          storage.setValue(id, { value: event.target.value });\n        });\n        break;\n      case \"input\":\n        if (\n          element.attributes.type === \"radio\" ||\n          element.attributes.type === \"checkbox\"\n        ) {\n          if (storedData.value === element.attributes.xfaOn) {\n            html.setAttribute(\"checked\", true);\n          } else if (storedData.value === element.attributes.xfaOff) {\n            // The checked attribute may have been set when opening the file,\n            // unset through the UI and we're here because of printing.\n            html.removeAttribute(\"checked\");\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"change\", event => {\n            storage.setValue(id, {\n              value: event.target.checked\n                ? event.target.getAttribute(\"xfaOn\")\n                : event.target.getAttribute(\"xfaOff\"),\n            });\n          });\n        } else {\n          if (storedData.value !== null) {\n            html.setAttribute(\"value\", storedData.value);\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"input\", event => {\n            storage.setValue(id, { value: event.target.value });\n          });\n        }\n        break;\n      case \"select\":\n        if (storedData.value !== null) {\n          for (const option of element.children) {\n            if (option.attributes.value === storedData.value) {\n              option.attributes.selected = true;\n            }\n          }\n        }\n        html.addEventListener(\"input\", event => {\n          const options = event.target.options;\n          const value =\n            options.selectedIndex === -1\n              ? \"\"\n              : options[options.selectedIndex].value;\n          storage.setValue(id, { value });\n        });\n        break;\n    }\n  }\n\n  static setAttributes({ html, element, storage = null, intent, linkService }) {\n    const { attributes } = element;\n    const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n\n    if (attributes.type === \"radio\") {\n      // Avoid to have a radio group when printing with the same as one\n      // already displayed.\n      attributes.name = `${attributes.name}-${intent}`;\n    }\n    for (const [key, value] of Object.entries(attributes)) {\n      if (value === null || value === undefined) {\n        continue;\n      }\n\n      switch (key) {\n        case \"class\":\n          if (value.length) {\n            html.setAttribute(key, value.join(\" \"));\n          }\n          break;\n        case \"dataId\":\n          // We don't need to add dataId in the html object but it can\n          // be useful to know its value when writing printing tests:\n          // in this case, don't skip dataId to have its value.\n          break;\n        case \"id\":\n          html.setAttribute(\"data-element-id\", value);\n          break;\n        case \"style\":\n          Object.assign(html.style, value);\n          break;\n        case \"textContent\":\n          html.textContent = value;\n          break;\n        default:\n          if (!isHTMLAnchorElement || (key !== \"href\" && key !== \"newWindow\")) {\n            html.setAttribute(key, value);\n          }\n      }\n    }\n\n    if (isHTMLAnchorElement) {\n      linkService.addLinkAttributes(\n        html,\n        attributes.href,\n        attributes.newWindow\n      );\n    }\n\n    // Set the value after the others to be sure to overwrite any other values.\n    if (storage && attributes.dataId) {\n      this.setupStorage(html, attributes.dataId, element, storage);\n    }\n  }\n\n  /**\n   * Render the XFA layer.\n   *\n   * @param {XfaLayerParameters} parameters\n   */\n  static render(parameters) {\n    const storage = parameters.annotationStorage;\n    const linkService = parameters.linkService;\n    const root = parameters.xfaHtml;\n    const intent = parameters.intent || \"display\";\n    const rootHtml = document.createElement(root.name);\n    if (root.attributes) {\n      this.setAttributes({\n        html: rootHtml,\n        element: root,\n        intent,\n        linkService,\n      });\n    }\n    const stack = [[root, -1, rootHtml]];\n\n    const rootDiv = parameters.div;\n    rootDiv.append(rootHtml);\n\n    if (parameters.viewport) {\n      const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n      rootDiv.style.transform = transform;\n    }\n\n    // Set defaults.\n    if (intent !== \"richText\") {\n      rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n    }\n\n    // Text nodes used for the text highlighter.\n    const textDivs = [];\n\n    while (stack.length > 0) {\n      const [parent, i, html] = stack.at(-1);\n      if (i + 1 === parent.children.length) {\n        stack.pop();\n        continue;\n      }\n\n      const child = parent.children[++stack.at(-1)[1]];\n      if (child === null) {\n        continue;\n      }\n\n      const { name } = child;\n      if (name === \"#text\") {\n        const node = document.createTextNode(child.value);\n        textDivs.push(node);\n        html.append(node);\n        continue;\n      }\n\n      let childHtml;\n      if (child?.attributes?.xmlns) {\n        childHtml = document.createElementNS(child.attributes.xmlns, name);\n      } else {\n        childHtml = document.createElement(name);\n      }\n\n      html.append(childHtml);\n      if (child.attributes) {\n        this.setAttributes({\n          html: childHtml,\n          element: child,\n          storage,\n          intent,\n          linkService,\n        });\n      }\n\n      if (child.children && child.children.length > 0) {\n        stack.push([child, -1, childHtml]);\n      } else if (child.value) {\n        const node = document.createTextNode(child.value);\n        if (XfaText.shouldBuildText(name)) {\n          textDivs.push(node);\n        }\n        childHtml.append(node);\n      }\n    }\n\n    /**\n     * TODO: re-enable that stuff once we've JS implementation.\n     * See https://bugzilla.mozilla.org/show_bug.cgi?id=1719465.\n     *\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaDisabled input, .xfaDisabled textarea\"\n     * )) {\n     * el.setAttribute(\"disabled\", true);\n     * }\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaReadOnly input, .xfaReadOnly textarea\"\n     * )) {\n     * el.setAttribute(\"readOnly\", true);\n     * }\n     */\n\n    for (const el of rootDiv.querySelectorAll(\n      \".xfaNonInteractive input, .xfaNonInteractive textarea\"\n    )) {\n      el.setAttribute(\"readOnly\", true);\n    }\n\n    return {\n      textDivs,\n    };\n  }\n\n  /**\n   * Update the XFA layer.\n   *\n   * @param {XfaLayerParameters} parameters\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    parameters.div.style.transform = transform;\n    parameters.div.hidden = false;\n  }\n}\n\nexport { XfaLayer };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport { deprecated, DOMSVGFactory } from \"./display_utils.js\";\nimport {\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  OPS,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\n\n/** @type {any} */\nlet SVGGraphics = class {\n  constructor() {\n    unreachable(\"Not implemented: SVGGraphics\");\n  }\n};\n\nif (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n  const SVG_DEFAULTS = {\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    fillColor: \"#000000\",\n  };\n  const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n  const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n  const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n  const createObjectURL = function (\n    data,\n    contentType = \"\",\n    forceDataSchema = false\n  ) {\n    if (\n      URL.createObjectURL &&\n      typeof Blob !== \"undefined\" &&\n      !forceDataSchema\n    ) {\n      return URL.createObjectURL(new Blob([data], { type: contentType }));\n    }\n    // Blob/createObjectURL is not available, falling back to data schema.\n    const digits =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    let buffer = `data:${contentType};base64,`;\n    for (let i = 0, ii = data.length; i < ii; i += 3) {\n      const b1 = data[i] & 0xff;\n      const b2 = data[i + 1] & 0xff;\n      const b3 = data[i + 2] & 0xff;\n      const d1 = b1 >> 2,\n        d2 = ((b1 & 3) << 4) | (b2 >> 4);\n      const d3 = i + 1 < ii ? ((b2 & 0xf) << 2) | (b3 >> 6) : 64;\n      const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n    }\n    return buffer;\n  };\n\n  const convertImgDataToPng = (function () {\n    const PNG_HEADER = new Uint8Array([\n      0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,\n    ]);\n    const CHUNK_WRAPPER_SIZE = 12;\n\n    const crcTable = new Int32Array(256);\n    for (let i = 0; i < 256; i++) {\n      let c = i;\n      for (let h = 0; h < 8; h++) {\n        if (c & 1) {\n          c = 0xedb88320 ^ ((c >> 1) & 0x7fffffff);\n        } else {\n          c = (c >> 1) & 0x7fffffff;\n        }\n      }\n      crcTable[i] = c;\n    }\n\n    function crc32(data, start, end) {\n      let crc = -1;\n      for (let i = start; i < end; i++) {\n        const a = (crc ^ data[i]) & 0xff;\n        const b = crcTable[a];\n        crc = (crc >>> 8) ^ b;\n      }\n      return crc ^ -1;\n    }\n\n    function writePngChunk(type, body, data, offset) {\n      let p = offset;\n      const len = body.length;\n\n      data[p] = (len >> 24) & 0xff;\n      data[p + 1] = (len >> 16) & 0xff;\n      data[p + 2] = (len >> 8) & 0xff;\n      data[p + 3] = len & 0xff;\n      p += 4;\n\n      data[p] = type.charCodeAt(0) & 0xff;\n      data[p + 1] = type.charCodeAt(1) & 0xff;\n      data[p + 2] = type.charCodeAt(2) & 0xff;\n      data[p + 3] = type.charCodeAt(3) & 0xff;\n      p += 4;\n\n      data.set(body, p);\n      p += body.length;\n\n      const crc = crc32(data, offset + 4, p);\n      data[p] = (crc >> 24) & 0xff;\n      data[p + 1] = (crc >> 16) & 0xff;\n      data[p + 2] = (crc >> 8) & 0xff;\n      data[p + 3] = crc & 0xff;\n    }\n\n    function adler32(data, start, end) {\n      let a = 1;\n      let b = 0;\n      for (let i = start; i < end; ++i) {\n        a = (a + (data[i] & 0xff)) % 65521;\n        b = (b + a) % 65521;\n      }\n      return (b << 16) | a;\n    }\n\n    /**\n     * @param {Uint8Array} literals The input data.\n     * @returns {Uint8Array} The DEFLATE-compressed data stream in zlib format.\n     *   This is the required format for compressed streams in the PNG format:\n     *   http://www.libpng.org/pub/png/spec/1.2/PNG-Compression.html\n     */\n    function deflateSync(literals) {\n      if (!isNodeJS) {\n        // zlib is certainly not available outside of Node.js. We can either use\n        // the pako library for client-side DEFLATE compression, or use the\n        // canvas API of the browser to obtain a more optimal PNG file.\n        return deflateSyncUncompressed(literals);\n      }\n      try {\n        // NOTE: This implementation is far from perfect, but already way better\n        // than not applying any compression.\n        //\n        // A better algorithm will try to choose a good predictor/filter and\n        // then choose a suitable zlib compression strategy (e.g. 3,Z_RLE).\n        //\n        // Node v0.11.12 zlib.deflateSync is introduced (and returns a Buffer).\n        // Node v3.0.0   Buffer inherits from Uint8Array.\n        // Node v8.0.0   zlib.deflateSync accepts Uint8Array as input.\n        let input;\n        // eslint-disable-next-line no-undef\n        if (parseInt(process.versions.node) >= 8) {\n          input = literals;\n        } else {\n          // eslint-disable-next-line no-undef\n          input = Buffer.from(literals);\n        }\n        const output = __non_webpack_require__(\"zlib\").deflateSync(input, {\n          level: 9,\n        });\n        return output instanceof Uint8Array ? output : new Uint8Array(output);\n      } catch (e) {\n        warn(\n          \"Not compressing PNG because zlib.deflateSync is unavailable: \" + e\n        );\n      }\n\n      return deflateSyncUncompressed(literals);\n    }\n\n    // An implementation of DEFLATE with compression level 0 (Z_NO_COMPRESSION).\n    function deflateSyncUncompressed(literals) {\n      let len = literals.length;\n      const maxBlockLength = 0xffff;\n\n      const deflateBlocks = Math.ceil(len / maxBlockLength);\n      const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n      let pi = 0;\n      idat[pi++] = 0x78; // compression method and flags\n      idat[pi++] = 0x9c; // flags\n\n      let pos = 0;\n      while (len > maxBlockLength) {\n        // writing non-final DEFLATE blocks type 0 and length of 65535\n        idat[pi++] = 0x00;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0x00;\n        idat[pi++] = 0x00;\n        idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n        pi += maxBlockLength;\n        pos += maxBlockLength;\n        len -= maxBlockLength;\n      }\n\n      // writing non-final DEFLATE blocks type 0\n      idat[pi++] = 0x01;\n      idat[pi++] = len & 0xff;\n      idat[pi++] = (len >> 8) & 0xff;\n      idat[pi++] = ~len & 0xffff & 0xff;\n      idat[pi++] = ((~len & 0xffff) >> 8) & 0xff;\n      idat.set(literals.subarray(pos), pi);\n      pi += literals.length - pos;\n\n      const adler = adler32(literals, 0, literals.length); // checksum\n      idat[pi++] = (adler >> 24) & 0xff;\n      idat[pi++] = (adler >> 16) & 0xff;\n      idat[pi++] = (adler >> 8) & 0xff;\n      idat[pi++] = adler & 0xff;\n      return idat;\n    }\n\n    function encode(imgData, kind, forceDataSchema, isMask) {\n      const width = imgData.width;\n      const height = imgData.height;\n      let bitDepth, colorType, lineSize;\n      const bytes = imgData.data;\n\n      switch (kind) {\n        case ImageKind.GRAYSCALE_1BPP:\n          colorType = 0;\n          bitDepth = 1;\n          lineSize = (width + 7) >> 3;\n          break;\n        case ImageKind.RGB_24BPP:\n          colorType = 2;\n          bitDepth = 8;\n          lineSize = width * 3;\n          break;\n        case ImageKind.RGBA_32BPP:\n          colorType = 6;\n          bitDepth = 8;\n          lineSize = width * 4;\n          break;\n        default:\n          throw new Error(\"invalid format\");\n      }\n\n      // prefix every row with predictor 0\n      const literals = new Uint8Array((1 + lineSize) * height);\n      let offsetLiterals = 0,\n        offsetBytes = 0;\n      for (let y = 0; y < height; ++y) {\n        literals[offsetLiterals++] = 0; // no prediction\n        literals.set(\n          bytes.subarray(offsetBytes, offsetBytes + lineSize),\n          offsetLiterals\n        );\n        offsetBytes += lineSize;\n        offsetLiterals += lineSize;\n      }\n\n      if (kind === ImageKind.GRAYSCALE_1BPP && isMask) {\n        // inverting for image masks\n        offsetLiterals = 0;\n        for (let y = 0; y < height; y++) {\n          offsetLiterals++; // skipping predictor\n          for (let i = 0; i < lineSize; i++) {\n            literals[offsetLiterals++] ^= 0xff;\n          }\n        }\n      }\n\n      const ihdr = new Uint8Array([\n        (width >> 24) & 0xff,\n        (width >> 16) & 0xff,\n        (width >> 8) & 0xff,\n        width & 0xff,\n        (height >> 24) & 0xff,\n        (height >> 16) & 0xff,\n        (height >> 8) & 0xff,\n        height & 0xff,\n        bitDepth, // bit depth\n        colorType, // color type\n        0x00, // compression method\n        0x00, // filter method\n        0x00, // interlace method\n      ]);\n      const idat = deflateSync(literals);\n\n      // PNG consists of: header, IHDR+data, IDAT+data, and IEND.\n      const pngLength =\n        PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n      const data = new Uint8Array(pngLength);\n      let offset = 0;\n      data.set(PNG_HEADER, offset);\n      offset += PNG_HEADER.length;\n      writePngChunk(\"IHDR\", ihdr, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n      writePngChunk(\"IDATA\", idat, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + idat.length;\n      writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n\n      return createObjectURL(data, \"image/png\", forceDataSchema);\n    }\n\n    // eslint-disable-next-line no-shadow\n    return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n      const kind =\n        imgData.kind === undefined ? ImageKind.GRAYSCALE_1BPP : imgData.kind;\n      return encode(imgData, kind, forceDataSchema, isMask);\n    };\n  })();\n\n  class SVGExtraState {\n    constructor() {\n      this.fontSizeScale = 1;\n      this.fontWeight = SVG_DEFAULTS.fontWeight;\n      this.fontSize = 0;\n\n      this.textMatrix = IDENTITY_MATRIX;\n      this.fontMatrix = FONT_IDENTITY_MATRIX;\n      this.leading = 0;\n      this.textRenderingMode = TextRenderingMode.FILL;\n      this.textMatrixScale = 1;\n\n      // Current point (in user coordinates)\n      this.x = 0;\n      this.y = 0;\n\n      // Start of text line (in text coordinates)\n      this.lineX = 0;\n      this.lineY = 0;\n\n      // Character and word spacing\n      this.charSpacing = 0;\n      this.wordSpacing = 0;\n      this.textHScale = 1;\n      this.textRise = 0;\n\n      // Default foreground and background colors\n      this.fillColor = SVG_DEFAULTS.fillColor;\n      this.strokeColor = \"#000000\";\n\n      this.fillAlpha = 1;\n      this.strokeAlpha = 1;\n      this.lineWidth = 1;\n      this.lineJoin = \"\";\n      this.lineCap = \"\";\n      this.miterLimit = 0;\n\n      this.dashArray = [];\n      this.dashPhase = 0;\n\n      this.dependencies = [];\n\n      // Clipping\n      this.activeClipUrl = null;\n      this.clipGroup = null;\n\n      this.maskId = \"\";\n    }\n\n    clone() {\n      return Object.create(this);\n    }\n\n    setCurrentPoint(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }\n\n  // eslint-disable-next-line no-inner-declarations\n  function opListToTree(opList) {\n    let opTree = [];\n    const tmp = [];\n\n    for (const opListElement of opList) {\n      if (opListElement.fn === \"save\") {\n        opTree.push({ fnId: 92, fn: \"group\", items: [] });\n        tmp.push(opTree);\n        opTree = opTree.at(-1).items;\n        continue;\n      }\n\n      if (opListElement.fn === \"restore\") {\n        opTree = tmp.pop();\n      } else {\n        opTree.push(opListElement);\n      }\n    }\n    return opTree;\n  }\n\n  /**\n   * Format a float number as a string.\n   *\n   * @param value {number} - The float number to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pf(value) {\n    if (Number.isInteger(value)) {\n      return value.toString();\n    }\n    const s = value.toFixed(10);\n    let i = s.length - 1;\n    if (s[i] !== \"0\") {\n      return s;\n    }\n\n    // Remove trailing zeros.\n    do {\n      i--;\n    } while (s[i] === \"0\");\n    return s.substring(0, s[i] === \".\" ? i : i + 1);\n  }\n\n  /**\n   * Format a transform matrix as a string. The standard rotation, scale and\n   * translation matrices are replaced by their shorter forms, and for\n   * identity matrices an empty string is returned to save memory.\n   *\n   * @param m {Array} - The transform matrix to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pm(m) {\n    if (m[4] === 0 && m[5] === 0) {\n      if (m[1] === 0 && m[2] === 0) {\n        if (m[0] === 1 && m[3] === 1) {\n          return \"\";\n        }\n        return `scale(${pf(m[0])} ${pf(m[3])})`;\n      }\n      if (m[0] === m[3] && m[1] === -m[2]) {\n        const a = (Math.acos(m[0]) * 180) / Math.PI;\n        return `rotate(${pf(a)})`;\n      }\n    } else {\n      if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n        return `translate(${pf(m[4])} ${pf(m[5])})`;\n      }\n    }\n    return (\n      `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` +\n      `${pf(m[5])})`\n    );\n  }\n\n  // The counts below are relevant for all pages, so they have to be global\n  // instead of being members of `SVGGraphics` (which is recreated for\n  // each page).\n  let clipCount = 0;\n  let maskCount = 0;\n  let shadingCount = 0;\n\n  SVGGraphics = class {\n    constructor(commonObjs, objs, forceDataSchema = false) {\n      deprecated(\n        \"The SVG back-end is no longer maintained and *may* be removed in the future.\"\n      );\n      this.svgFactory = new DOMSVGFactory();\n\n      this.current = new SVGExtraState();\n      this.transformMatrix = IDENTITY_MATRIX; // Graphics state matrix\n      this.transformStack = [];\n      this.extraStack = [];\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n\n      this.embedFonts = false;\n      this.embeddedFonts = Object.create(null);\n      this.cssStyle = null;\n      this.forceDataSchema = !!forceDataSchema;\n\n      // In `src/shared/util.js` the operator names are mapped to IDs.\n      // The list below represents the reverse of that, i.e., it maps IDs\n      // to operator names.\n      this._operatorIdMapping = [];\n      for (const op in OPS) {\n        this._operatorIdMapping[OPS[op]] = op;\n      }\n    }\n\n    getObject(data, fallback = null) {\n      if (typeof data === \"string\") {\n        return data.startsWith(\"g_\")\n          ? this.commonObjs.get(data)\n          : this.objs.get(data);\n      }\n      return fallback;\n    }\n\n    save() {\n      this.transformStack.push(this.transformMatrix);\n      const old = this.current;\n      this.extraStack.push(old);\n      this.current = old.clone();\n    }\n\n    restore() {\n      this.transformMatrix = this.transformStack.pop();\n      this.current = this.extraStack.pop();\n      this.pendingClip = null;\n      this.tgrp = null;\n    }\n\n    group(items) {\n      this.save();\n      this.executeOpTree(items);\n      this.restore();\n    }\n\n    loadDependencies(operatorList) {\n      const fnArray = operatorList.fnArray;\n      const argsArray = operatorList.argsArray;\n\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        if (fnArray[i] !== OPS.dependency) {\n          continue;\n        }\n\n        for (const obj of argsArray[i]) {\n          const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n          const promise = new Promise(resolve => {\n            objsPool.get(obj, resolve);\n          });\n          this.current.dependencies.push(promise);\n        }\n      }\n      return Promise.all(this.current.dependencies);\n    }\n\n    transform(a, b, c, d, e, f) {\n      const transformMatrix = [a, b, c, d, e, f];\n      this.transformMatrix = Util.transform(\n        this.transformMatrix,\n        transformMatrix\n      );\n      this.tgrp = null;\n    }\n\n    getSVG(operatorList, viewport) {\n      this.viewport = viewport;\n\n      const svgElement = this._initialize(viewport);\n      return this.loadDependencies(operatorList).then(() => {\n        this.transformMatrix = IDENTITY_MATRIX;\n        this.executeOpTree(this.convertOpList(operatorList));\n        return svgElement;\n      });\n    }\n\n    convertOpList(operatorList) {\n      const operatorIdMapping = this._operatorIdMapping;\n      const argsArray = operatorList.argsArray;\n      const fnArray = operatorList.fnArray;\n      const opList = [];\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        const fnId = fnArray[i];\n        opList.push({\n          fnId,\n          fn: operatorIdMapping[fnId],\n          args: argsArray[i],\n        });\n      }\n      return opListToTree(opList);\n    }\n\n    executeOpTree(opTree) {\n      for (const opTreeElement of opTree) {\n        const fn = opTreeElement.fn;\n        const fnId = opTreeElement.fnId;\n        const args = opTreeElement.args;\n\n        switch (fnId | 0) {\n          case OPS.beginText:\n            this.beginText();\n            break;\n          case OPS.dependency:\n            // Handled in `loadDependencies`, so no warning should be shown.\n            break;\n          case OPS.setLeading:\n            this.setLeading(args);\n            break;\n          case OPS.setLeadingMoveText:\n            this.setLeadingMoveText(args[0], args[1]);\n            break;\n          case OPS.setFont:\n            this.setFont(args);\n            break;\n          case OPS.showText:\n            this.showText(args[0]);\n            break;\n          case OPS.showSpacedText:\n            this.showText(args[0]);\n            break;\n          case OPS.endText:\n            this.endText();\n            break;\n          case OPS.moveText:\n            this.moveText(args[0], args[1]);\n            break;\n          case OPS.setCharSpacing:\n            this.setCharSpacing(args[0]);\n            break;\n          case OPS.setWordSpacing:\n            this.setWordSpacing(args[0]);\n            break;\n          case OPS.setHScale:\n            this.setHScale(args[0]);\n            break;\n          case OPS.setTextMatrix:\n            this.setTextMatrix(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.setTextRise:\n            this.setTextRise(args[0]);\n            break;\n          case OPS.setTextRenderingMode:\n            this.setTextRenderingMode(args[0]);\n            break;\n          case OPS.setLineWidth:\n            this.setLineWidth(args[0]);\n            break;\n          case OPS.setLineJoin:\n            this.setLineJoin(args[0]);\n            break;\n          case OPS.setLineCap:\n            this.setLineCap(args[0]);\n            break;\n          case OPS.setMiterLimit:\n            this.setMiterLimit(args[0]);\n            break;\n          case OPS.setFillRGBColor:\n            this.setFillRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeRGBColor:\n            this.setStrokeRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeColorN:\n            this.setStrokeColorN(args);\n            break;\n          case OPS.setFillColorN:\n            this.setFillColorN(args);\n            break;\n          case OPS.shadingFill:\n            this.shadingFill(args[0]);\n            break;\n          case OPS.setDash:\n            this.setDash(args[0], args[1]);\n            break;\n          case OPS.setRenderingIntent:\n            this.setRenderingIntent(args[0]);\n            break;\n          case OPS.setFlatness:\n            this.setFlatness(args[0]);\n            break;\n          case OPS.setGState:\n            this.setGState(args[0]);\n            break;\n          case OPS.fill:\n            this.fill();\n            break;\n          case OPS.eoFill:\n            this.eoFill();\n            break;\n          case OPS.stroke:\n            this.stroke();\n            break;\n          case OPS.fillStroke:\n            this.fillStroke();\n            break;\n          case OPS.eoFillStroke:\n            this.eoFillStroke();\n            break;\n          case OPS.clip:\n            this.clip(\"nonzero\");\n            break;\n          case OPS.eoClip:\n            this.clip(\"evenodd\");\n            break;\n          case OPS.paintSolidColorImageMask:\n            this.paintSolidColorImageMask();\n            break;\n          case OPS.paintImageXObject:\n            this.paintImageXObject(args[0]);\n            break;\n          case OPS.paintInlineImageXObject:\n            this.paintInlineImageXObject(args[0]);\n            break;\n          case OPS.paintImageMaskXObject:\n            this.paintImageMaskXObject(args[0]);\n            break;\n          case OPS.paintFormXObjectBegin:\n            this.paintFormXObjectBegin(args[0], args[1]);\n            break;\n          case OPS.paintFormXObjectEnd:\n            this.paintFormXObjectEnd();\n            break;\n          case OPS.closePath:\n            this.closePath();\n            break;\n          case OPS.closeStroke:\n            this.closeStroke();\n            break;\n          case OPS.closeFillStroke:\n            this.closeFillStroke();\n            break;\n          case OPS.closeEOFillStroke:\n            this.closeEOFillStroke();\n            break;\n          case OPS.nextLine:\n            this.nextLine();\n            break;\n          case OPS.transform:\n            this.transform(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.constructPath:\n            this.constructPath(args[0], args[1]);\n            break;\n          case OPS.endPath:\n            this.endPath();\n            break;\n          case 92:\n            this.group(opTreeElement.items);\n            break;\n          default:\n            warn(`Unimplemented operator ${fn}`);\n            break;\n        }\n      }\n    }\n\n    setWordSpacing(wordSpacing) {\n      this.current.wordSpacing = wordSpacing;\n    }\n\n    setCharSpacing(charSpacing) {\n      this.current.charSpacing = charSpacing;\n    }\n\n    nextLine() {\n      this.moveText(0, this.current.leading);\n    }\n\n    setTextMatrix(a, b, c, d, e, f) {\n      const current = this.current;\n      current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n      current.textMatrixScale = Math.hypot(a, b);\n\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtElement.append(current.tspan);\n    }\n\n    beginText() {\n      const current = this.current;\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n      current.textMatrix = IDENTITY_MATRIX;\n      current.lineMatrix = IDENTITY_MATRIX;\n      current.textMatrixScale = 1;\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    moveText(x, y) {\n      const current = this.current;\n      current.x = current.lineX += x;\n      current.y = current.lineY += y;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n    }\n\n    showText(glyphs) {\n      const current = this.current;\n      const font = current.font;\n      const fontSize = current.fontSize;\n      if (fontSize === 0) {\n        return;\n      }\n\n      const fontSizeScale = current.fontSizeScale;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const fontDirection = current.fontDirection;\n      const textHScale = current.textHScale * fontDirection;\n      const vertical = font.vertical;\n      const spacingDir = vertical ? 1 : -1;\n      const defaultVMetrics = font.defaultVMetrics;\n      const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n      let x = 0;\n      for (const glyph of glyphs) {\n        if (glyph === null) {\n          // Word break\n          x += fontDirection * wordSpacing;\n          continue;\n        } else if (typeof glyph === \"number\") {\n          x += (spacingDir * glyph * fontSize) / 1000;\n          continue;\n        }\n\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const character = glyph.fontChar;\n        let scaledX, scaledY;\n        let width = glyph.width;\n        if (vertical) {\n          let vx;\n          const vmetric = glyph.vmetric || defaultVMetrics;\n          vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n          vx = -vx * widthAdvanceScale;\n          const vy = vmetric[2] * widthAdvanceScale;\n\n          width = vmetric ? -vmetric[0] : width;\n          scaledX = vx / fontSizeScale;\n          scaledY = (x + vy) / fontSizeScale;\n        } else {\n          scaledX = x / fontSizeScale;\n          scaledY = 0;\n        }\n\n        if (glyph.isInFont || font.missingFile) {\n          current.xcoords.push(current.x + scaledX);\n          if (vertical) {\n            current.ycoords.push(-current.y + scaledY);\n          }\n          current.tspan.textContent += character;\n        } else {\n          // TODO: To assist with text selection, we should replace the missing\n          // character with a space character if charWidth is not zero.\n          // But we cannot just do \"character = ' '\", because the ' ' character\n          // might actually map to a different glyph.\n        }\n\n        let charWidth;\n        if (vertical) {\n          charWidth = width * widthAdvanceScale - spacing * fontDirection;\n        } else {\n          charWidth = width * widthAdvanceScale + spacing * fontDirection;\n        }\n\n        x += charWidth;\n      }\n      current.tspan.setAttributeNS(\n        null,\n        \"x\",\n        current.xcoords.map(pf).join(\" \")\n      );\n      if (vertical) {\n        current.tspan.setAttributeNS(\n          null,\n          \"y\",\n          current.ycoords.map(pf).join(\" \")\n        );\n      } else {\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      }\n\n      if (vertical) {\n        current.y -= x;\n      } else {\n        current.x += x * textHScale;\n      }\n\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n        current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n      }\n      if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n        current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n      }\n\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n          current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n        }\n        if (current.fillAlpha < 1) {\n          current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        }\n      } else if (current.textRenderingMode === TextRenderingMode.ADD_TO_PATH) {\n        // Workaround for Firefox: We must set fill=\"transparent\" because\n        // fill=\"none\" would generate an empty clipping path.\n        current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n      } else {\n        current.tspan.setAttributeNS(null, \"fill\", \"none\");\n      }\n\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        const lineWidthScale = 1 / (current.textMatrixScale || 1);\n        this._setStrokeAttributes(current.tspan, lineWidthScale);\n      }\n\n      // Include the text rise in the text matrix since the `pm` function\n      // creates the SVG element's `translate` entry (work on a copy to avoid\n      // altering the original text matrix).\n      let textMatrix = current.textMatrix;\n      if (current.textRise !== 0) {\n        textMatrix = textMatrix.slice();\n        textMatrix[5] += current.textRise;\n      }\n\n      current.txtElement.setAttributeNS(\n        null,\n        \"transform\",\n        `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`\n      );\n      current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n      current.txtElement.append(current.tspan);\n      current.txtgrp.append(current.txtElement);\n\n      this._ensureTransformGroup().append(current.txtElement);\n    }\n\n    setLeadingMoveText(x, y) {\n      this.setLeading(-y);\n      this.moveText(x, y);\n    }\n\n    addFontStyle(fontObj) {\n      if (!fontObj.data) {\n        throw new Error(\n          \"addFontStyle: No font data available, \" +\n            'ensure that the \"fontExtraProperties\" API parameter is set.'\n        );\n      }\n      if (!this.cssStyle) {\n        this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n        this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n        this.defs.append(this.cssStyle);\n      }\n\n      const url = createObjectURL(\n        fontObj.data,\n        fontObj.mimetype,\n        this.forceDataSchema\n      );\n      this.cssStyle.textContent +=\n        `@font-face { font-family: \"${fontObj.loadedName}\";` +\n        ` src: url(${url}); }\\n`;\n    }\n\n    setFont(details) {\n      const current = this.current;\n      const fontObj = this.commonObjs.get(details[0]);\n      let size = details[1];\n      current.font = fontObj;\n\n      if (\n        this.embedFonts &&\n        !fontObj.missingFile &&\n        !this.embeddedFonts[fontObj.loadedName]\n      ) {\n        this.addFontStyle(fontObj);\n        this.embeddedFonts[fontObj.loadedName] = fontObj;\n      }\n      current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n      let bold = \"normal\";\n      if (fontObj.black) {\n        bold = \"900\";\n      } else if (fontObj.bold) {\n        bold = \"bold\";\n      }\n      const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n      if (size < 0) {\n        size = -size;\n        current.fontDirection = -1;\n      } else {\n        current.fontDirection = 1;\n      }\n      current.fontSize = size;\n      current.fontFamily = fontObj.loadedName;\n      current.fontWeight = bold;\n      current.fontStyle = italic;\n\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    endText() {\n      const current = this.current;\n      if (\n        current.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG &&\n        current.txtElement?.hasChildNodes()\n      ) {\n        // If no glyphs are shown (i.e. no child nodes), no clipping occurs.\n        current.element = current.txtElement;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    // Path properties\n    setLineWidth(width) {\n      if (width > 0) {\n        this.current.lineWidth = width;\n      }\n    }\n\n    setLineCap(style) {\n      this.current.lineCap = LINE_CAP_STYLES[style];\n    }\n\n    setLineJoin(style) {\n      this.current.lineJoin = LINE_JOIN_STYLES[style];\n    }\n\n    setMiterLimit(limit) {\n      this.current.miterLimit = limit;\n    }\n\n    setStrokeAlpha(strokeAlpha) {\n      this.current.strokeAlpha = strokeAlpha;\n    }\n\n    setStrokeRGBColor(r, g, b) {\n      this.current.strokeColor = Util.makeHexColor(r, g, b);\n    }\n\n    setFillAlpha(fillAlpha) {\n      this.current.fillAlpha = fillAlpha;\n    }\n\n    setFillRGBColor(r, g, b) {\n      this.current.fillColor = Util.makeHexColor(r, g, b);\n      this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      this.current.xcoords = [];\n      this.current.ycoords = [];\n    }\n\n    setStrokeColorN(args) {\n      this.current.strokeColor = this._makeColorN_Pattern(args);\n    }\n\n    setFillColorN(args) {\n      this.current.fillColor = this._makeColorN_Pattern(args);\n    }\n\n    shadingFill(args) {\n      const width = this.viewport.width;\n      const height = this.viewport.height;\n      const inv = Util.inverseTransform(this.transformMatrix);\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", x0);\n      rect.setAttributeNS(null, \"y\", y0);\n      rect.setAttributeNS(null, \"width\", x1 - x0);\n      rect.setAttributeNS(null, \"height\", y1 - y0);\n      rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n      if (this.current.fillAlpha < 1) {\n        rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n      }\n      this._ensureTransformGroup().append(rect);\n    }\n\n    /**\n     * @private\n     */\n    _makeColorN_Pattern(args) {\n      if (args[0] === \"TilingPattern\") {\n        return this._makeTilingPattern(args);\n      }\n      return this._makeShadingPattern(args);\n    }\n\n    /**\n     * @private\n     */\n    _makeTilingPattern(args) {\n      const color = args[1];\n      const operatorList = args[2];\n      const matrix = args[3] || IDENTITY_MATRIX;\n      const [x0, y0, x1, y1] = args[4];\n      const xstep = args[5];\n      const ystep = args[6];\n      const paintType = args[7];\n\n      const tilingId = `shading${shadingCount++}`;\n      const [tx0, ty0, tx1, ty1] = Util.normalizeRect([\n        ...Util.applyTransform([x0, y0], matrix),\n        ...Util.applyTransform([x1, y1], matrix),\n      ]);\n      const [xscale, yscale] = Util.singularValueDecompose2dScale(matrix);\n      const txstep = xstep * xscale;\n      const tystep = ystep * yscale;\n\n      const tiling = this.svgFactory.createElement(\"svg:pattern\");\n      tiling.setAttributeNS(null, \"id\", tilingId);\n      tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n      tiling.setAttributeNS(null, \"width\", txstep);\n      tiling.setAttributeNS(null, \"height\", tystep);\n      tiling.setAttributeNS(null, \"x\", `${tx0}`);\n      tiling.setAttributeNS(null, \"y\", `${ty0}`);\n\n      // Save current state.\n      const svg = this.svg;\n      const transformMatrix = this.transformMatrix;\n      const fillColor = this.current.fillColor;\n      const strokeColor = this.current.strokeColor;\n\n      const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n      this.svg = bbox;\n      this.transformMatrix = matrix;\n      if (paintType === 2) {\n        const cssColor = Util.makeHexColor(...color);\n        this.current.fillColor = cssColor;\n        this.current.strokeColor = cssColor;\n      }\n      this.executeOpTree(this.convertOpList(operatorList));\n\n      // Restore saved state.\n      this.svg = svg;\n      this.transformMatrix = transformMatrix;\n      this.current.fillColor = fillColor;\n      this.current.strokeColor = strokeColor;\n\n      tiling.append(bbox.childNodes[0]);\n      this.defs.append(tiling);\n      return `url(#${tilingId})`;\n    }\n\n    /**\n     * @private\n     */\n    _makeShadingPattern(args) {\n      if (typeof args === \"string\") {\n        args = this.objs.get(args);\n      }\n      switch (args[0]) {\n        case \"RadialAxial\":\n          const shadingId = `shading${shadingCount++}`;\n          const colorStops = args[3];\n          let gradient;\n\n          switch (args[1]) {\n            case \"axial\":\n              const point0 = args[4];\n              const point1 = args[5];\n              gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"x1\", point0[0]);\n              gradient.setAttributeNS(null, \"y1\", point0[1]);\n              gradient.setAttributeNS(null, \"x2\", point1[0]);\n              gradient.setAttributeNS(null, \"y2\", point1[1]);\n              break;\n            case \"radial\":\n              const focalPoint = args[4];\n              const circlePoint = args[5];\n              const focalRadius = args[6];\n              const circleRadius = args[7];\n              gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n              gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n              gradient.setAttributeNS(null, \"r\", circleRadius);\n              gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n              gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n              gradient.setAttributeNS(null, \"fr\", focalRadius);\n              break;\n            default:\n              throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n          }\n          for (const colorStop of colorStops) {\n            const stop = this.svgFactory.createElement(\"svg:stop\");\n            stop.setAttributeNS(null, \"offset\", colorStop[0]);\n            stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n            gradient.append(stop);\n          }\n          this.defs.append(gradient);\n          return `url(#${shadingId})`;\n        case \"Mesh\":\n          warn(\"Unimplemented pattern Mesh\");\n          return null;\n        case \"Dummy\":\n          return \"hotpink\";\n        default:\n          throw new Error(`Unknown IR type: ${args[0]}`);\n      }\n    }\n\n    setDash(dashArray, dashPhase) {\n      this.current.dashArray = dashArray;\n      this.current.dashPhase = dashPhase;\n    }\n\n    constructPath(ops, args) {\n      const current = this.current;\n      let x = current.x,\n        y = current.y;\n      let d = [];\n      let j = 0;\n\n      for (const op of ops) {\n        switch (op | 0) {\n          case OPS.rectangle:\n            x = args[j++];\n            y = args[j++];\n            const width = args[j++];\n            const height = args[j++];\n            const xw = x + width;\n            const yh = y + height;\n            d.push(\n              \"M\",\n              pf(x),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(yh),\n              \"L\",\n              pf(x),\n              pf(yh),\n              \"Z\"\n            );\n            break;\n          case OPS.moveTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"M\", pf(x), pf(y));\n            break;\n          case OPS.lineTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"L\", pf(x), pf(y));\n            break;\n          case OPS.curveTo:\n            x = args[j + 4];\n            y = args[j + 5];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3]),\n              pf(x),\n              pf(y)\n            );\n            j += 6;\n            break;\n          case OPS.curveTo2:\n            d.push(\n              \"C\",\n              pf(x),\n              pf(y),\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3])\n            );\n            x = args[j + 2];\n            y = args[j + 3];\n            j += 4;\n            break;\n          case OPS.curveTo3:\n            x = args[j + 2];\n            y = args[j + 3];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(x),\n              pf(y),\n              pf(x),\n              pf(y)\n            );\n            j += 4;\n            break;\n          case OPS.closePath:\n            d.push(\"Z\");\n            break;\n        }\n      }\n\n      d = d.join(\" \");\n\n      if (\n        current.path &&\n        ops.length > 0 &&\n        ops[0] !== OPS.rectangle &&\n        ops[0] !== OPS.moveTo\n      ) {\n        // If a path does not start with an OPS.rectangle or OPS.moveTo, it has\n        // probably been divided into two OPS.constructPath operators by\n        // OperatorList. Append the commands to the previous path element.\n        d = current.path.getAttributeNS(null, \"d\") + d;\n      } else {\n        current.path = this.svgFactory.createElement(\"svg:path\");\n        this._ensureTransformGroup().append(current.path);\n      }\n\n      current.path.setAttributeNS(null, \"d\", d);\n      current.path.setAttributeNS(null, \"fill\", \"none\");\n\n      // Saving a reference in current.element so that it can be addressed\n      // in 'fill' and 'stroke'\n      current.element = current.path;\n      current.setCurrentPoint(x, y);\n    }\n\n    endPath() {\n      const current = this.current;\n\n      // Painting operators end a path.\n      current.path = null;\n\n      if (!this.pendingClip) {\n        return;\n      }\n      if (!current.element) {\n        this.pendingClip = null;\n        return;\n      }\n\n      // Add the current path to a clipping path.\n      const clipId = `clippath${clipCount++}`;\n      const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n      clipPath.setAttributeNS(null, \"id\", clipId);\n      clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n      // A deep clone is needed when text is used as a clipping path.\n      const clipElement = current.element.cloneNode(true);\n      if (this.pendingClip === \"evenodd\") {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n      } else {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n      }\n      this.pendingClip = null;\n      clipPath.append(clipElement);\n      this.defs.append(clipPath);\n\n      if (current.activeClipUrl) {\n        // The previous clipping group content can go out of order -- resetting\n        // cached clipGroups.\n        current.clipGroup = null;\n        for (const prev of this.extraStack) {\n          prev.clipGroup = null;\n        }\n        // Intersect with the previous clipping path.\n        clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n      }\n      current.activeClipUrl = `url(#${clipId})`;\n\n      this.tgrp = null;\n    }\n\n    clip(type) {\n      this.pendingClip = type;\n    }\n\n    closePath() {\n      const current = this.current;\n      if (current.path) {\n        const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n        current.path.setAttributeNS(null, \"d\", d);\n      }\n    }\n\n    setLeading(leading) {\n      this.current.leading = -leading;\n    }\n\n    setTextRise(textRise) {\n      this.current.textRise = textRise;\n    }\n\n    setTextRenderingMode(textRenderingMode) {\n      this.current.textRenderingMode = textRenderingMode;\n    }\n\n    setHScale(scale) {\n      this.current.textHScale = scale / 100;\n    }\n\n    setRenderingIntent(intent) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setFlatness(flatness) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setGState(states) {\n      for (const [key, value] of states) {\n        switch (key) {\n          case \"LW\":\n            this.setLineWidth(value);\n            break;\n          case \"LC\":\n            this.setLineCap(value);\n            break;\n          case \"LJ\":\n            this.setLineJoin(value);\n            break;\n          case \"ML\":\n            this.setMiterLimit(value);\n            break;\n          case \"D\":\n            this.setDash(value[0], value[1]);\n            break;\n          case \"RI\":\n            this.setRenderingIntent(value);\n            break;\n          case \"FL\":\n            this.setFlatness(value);\n            break;\n          case \"Font\":\n            this.setFont(value);\n            break;\n          case \"CA\":\n            this.setStrokeAlpha(value);\n            break;\n          case \"ca\":\n            this.setFillAlpha(value);\n            break;\n          default:\n            warn(`Unimplemented graphic state operator ${key}`);\n            break;\n        }\n      }\n    }\n\n    fill() {\n      const current = this.current;\n      if (current.element) {\n        current.element.setAttributeNS(null, \"fill\", current.fillColor);\n        current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        this.endPath();\n      }\n    }\n\n    stroke() {\n      const current = this.current;\n      if (current.element) {\n        this._setStrokeAttributes(current.element);\n        current.element.setAttributeNS(null, \"fill\", \"none\");\n        this.endPath();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _setStrokeAttributes(element, lineWidthScale = 1) {\n      const current = this.current;\n      let dashArray = current.dashArray;\n      if (lineWidthScale !== 1 && dashArray.length > 0) {\n        dashArray = dashArray.map(function (value) {\n          return lineWidthScale * value;\n        });\n      }\n      element.setAttributeNS(null, \"stroke\", current.strokeColor);\n      element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n      element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n      element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n      element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n      element.setAttributeNS(\n        null,\n        \"stroke-width\",\n        pf(lineWidthScale * current.lineWidth) + \"px\"\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dasharray\",\n        dashArray.map(pf).join(\" \")\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dashoffset\",\n        pf(lineWidthScale * current.dashPhase) + \"px\"\n      );\n    }\n\n    eoFill() {\n      this.current.element?.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      this.fill();\n    }\n\n    fillStroke() {\n      // Order is important since stroke wants fill to be none.\n      // First stroke, then if fill needed, it will be overwritten.\n      this.stroke();\n      this.fill();\n    }\n\n    eoFillStroke() {\n      this.current.element?.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      this.fillStroke();\n    }\n\n    closeStroke() {\n      this.closePath();\n      this.stroke();\n    }\n\n    closeFillStroke() {\n      this.closePath();\n      this.fillStroke();\n    }\n\n    closeEOFillStroke() {\n      this.closePath();\n      this.eoFillStroke();\n    }\n\n    paintSolidColorImageMask() {\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", \"1px\");\n      rect.setAttributeNS(null, \"height\", \"1px\");\n      rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n      this._ensureTransformGroup().append(rect);\n    }\n\n    paintImageXObject(objId) {\n      const imgData = this.getObject(objId);\n      if (!imgData) {\n        warn(`Dependent image with object ID ${objId} is not ready yet`);\n        return;\n      }\n      this.paintInlineImageXObject(imgData);\n    }\n\n    paintInlineImageXObject(imgData, mask) {\n      const width = imgData.width;\n      const height = imgData.height;\n\n      const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n      const cliprect = this.svgFactory.createElement(\"svg:rect\");\n      cliprect.setAttributeNS(null, \"x\", \"0\");\n      cliprect.setAttributeNS(null, \"y\", \"0\");\n      cliprect.setAttributeNS(null, \"width\", pf(width));\n      cliprect.setAttributeNS(null, \"height\", pf(height));\n      this.current.element = cliprect;\n      this.clip(\"nonzero\");\n\n      const imgEl = this.svgFactory.createElement(\"svg:image\");\n      imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n      imgEl.setAttributeNS(null, \"x\", \"0\");\n      imgEl.setAttributeNS(null, \"y\", pf(-height));\n      imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n      imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n      imgEl.setAttributeNS(\n        null,\n        \"transform\",\n        `scale(${pf(1 / width)} ${pf(-1 / height)})`\n      );\n      if (mask) {\n        mask.append(imgEl);\n      } else {\n        this._ensureTransformGroup().append(imgEl);\n      }\n    }\n\n    paintImageMaskXObject(img) {\n      const imgData = this.getObject(img.data, img);\n      if (imgData.bitmap) {\n        warn(\n          \"paintImageMaskXObject: ImageBitmap support is not implemented, \" +\n            \"ensure that the `isOffscreenCanvasSupported` API parameter is disabled.\"\n        );\n        return;\n      }\n      const current = this.current;\n      const width = imgData.width;\n      const height = imgData.height;\n      const fillColor = current.fillColor;\n\n      current.maskId = `mask${maskCount++}`;\n      const mask = this.svgFactory.createElement(\"svg:mask\");\n      mask.setAttributeNS(null, \"id\", current.maskId);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", pf(width));\n      rect.setAttributeNS(null, \"height\", pf(height));\n      rect.setAttributeNS(null, \"fill\", fillColor);\n      rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n\n      this.defs.append(mask);\n      this._ensureTransformGroup().append(rect);\n\n      this.paintInlineImageXObject(imgData, mask);\n    }\n\n    paintFormXObjectBegin(matrix, bbox) {\n      if (Array.isArray(matrix) && matrix.length === 6) {\n        this.transform(\n          matrix[0],\n          matrix[1],\n          matrix[2],\n          matrix[3],\n          matrix[4],\n          matrix[5]\n        );\n      }\n\n      if (bbox) {\n        const width = bbox[2] - bbox[0];\n        const height = bbox[3] - bbox[1];\n\n        const cliprect = this.svgFactory.createElement(\"svg:rect\");\n        cliprect.setAttributeNS(null, \"x\", bbox[0]);\n        cliprect.setAttributeNS(null, \"y\", bbox[1]);\n        cliprect.setAttributeNS(null, \"width\", pf(width));\n        cliprect.setAttributeNS(null, \"height\", pf(height));\n        this.current.element = cliprect;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    paintFormXObjectEnd() {}\n\n    /**\n     * @private\n     */\n    _initialize(viewport) {\n      const svg = this.svgFactory.create(viewport.width, viewport.height);\n\n      // Create the definitions element.\n      const definitions = this.svgFactory.createElement(\"svg:defs\");\n      svg.append(definitions);\n      this.defs = definitions;\n\n      // Create the root group element, which acts a container for all other\n      // groups and applies the viewport transform.\n      const rootGroup = this.svgFactory.createElement(\"svg:g\");\n      rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n      svg.append(rootGroup);\n\n      // For the construction of the SVG image we are only interested in the\n      // root group, so we expose it as the entry point of the SVG image for\n      // the other code in this class.\n      this.svg = rootGroup;\n\n      return svg;\n    }\n\n    /**\n     * @private\n     */\n    _ensureClipGroup() {\n      if (!this.current.clipGroup) {\n        const clipGroup = this.svgFactory.createElement(\"svg:g\");\n        clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n        this.svg.append(clipGroup);\n        this.current.clipGroup = clipGroup;\n      }\n      return this.current.clipGroup;\n    }\n\n    /**\n     * @private\n     */\n    _ensureTransformGroup() {\n      if (!this.tgrp) {\n        this.tgrp = this.svgFactory.createElement(\"svg:g\");\n        this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n        if (this.current.activeClipUrl) {\n          this._ensureClipGroup().append(this.tgrp);\n        } else {\n          this.svg.append(this.tgrp);\n        }\n      }\n      return this.tgrp;\n    }\n  };\n}\n\nexport { SVGGraphics };\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __w_pdfjs_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/api\").OnProgressParameters} OnProgressParameters */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/api\").PDFDocumentLoadingTask} PDFDocumentLoadingTask */\n/** @typedef {import(\"./display/api\").PDFDocumentProxy} PDFDocumentProxy */\n/** @typedef {import(\"./display/api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display/api\").RenderTask} RenderTask */\n/** @typedef {import(\"./display/display_utils\").PageViewport} PageViewport */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/text_layer\").TextLayerRenderTask} TextLayerRenderTask */\n\nimport {\n  AbortException,\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  AnnotationMode,\n  CMapCompressionType,\n  createValidAbsoluteUrl,\n  FeatureTest,\n  InvalidPDFException,\n  MissingPDFException,\n  normalizeUnicode,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  PromiseCapability,\n  shadow,\n  UnexpectedResponseException,\n  Util,\n  VerbosityLevel,\n} from \"./shared/util.js\";\nimport {\n  build,\n  getDocument,\n  PDFDataRangeTransport,\n  PDFWorker,\n  version,\n} from \"./display/api.js\";\nimport {\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isDataScheme,\n  isPdfFile,\n  loadScript,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  setLayerDimensions,\n} from \"./display/display_utils.js\";\nimport { renderTextLayer, updateTextLayer } from \"./display/text_layer.js\";\nimport { AnnotationEditorLayer } from \"./display/editor/annotation_editor_layer.js\";\nimport { AnnotationEditorUIManager } from \"./display/editor/tools.js\";\nimport { AnnotationLayer } from \"./display/annotation_layer.js\";\nimport { GlobalWorkerOptions } from \"./display/worker_options.js\";\nimport { SVGGraphics } from \"./display/svg.js\";\nimport { XfaLayer } from \"./display/xfa_layer.js\";\n\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsVersion =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : void 0;\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsBuild =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : void 0;\n\nexport {\n  AbortException,\n  AnnotationEditorLayer,\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  AnnotationEditorUIManager,\n  AnnotationLayer,\n  AnnotationMode,\n  build,\n  CMapCompressionType,\n  createValidAbsoluteUrl,\n  FeatureTest,\n  getDocument,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  GlobalWorkerOptions,\n  InvalidPDFException,\n  isDataScheme,\n  isPdfFile,\n  loadScript,\n  MissingPDFException,\n  normalizeUnicode,\n  OPS,\n  PasswordResponses,\n  PDFDataRangeTransport,\n  PDFDateString,\n  PDFWorker,\n  PermissionFlag,\n  PixelsPerInch,\n  PromiseCapability,\n  RenderingCancelledException,\n  renderTextLayer,\n  setLayerDimensions,\n  shadow,\n  SVGGraphics,\n  UnexpectedResponseException,\n  updateTextLayer,\n  Util,\n  VerbosityLevel,\n  version,\n  XfaLayer,\n};\n", "var cl = Object.defineProperty;\nvar Wl = (d, b, Z) => b in d ? cl(d, b, { enumerable: !0, configurable: !0, writable: !0, value: Z }) : d[b] = Z;\nvar e = (d, b, Z) => (Wl(d, typeof b != \"symbol\" ? b + \"\" : b, Z), Z);\nimport { defineComponent as n, ref as I, watch as F, onMounted as K, openBlock as o, createElementBlock as Q, toRaw as j, withDirectives as g, createVNode as H, vShow as P, createElementVNode as _, renderSlot as Gl, shallowRef as B } from \"vue\";\nimport * as w from \"pdfjs-dist\";\nconst A = \"internal-link\", ml = \"link\", Nl = \"file-attachment\", Ml = \"form-text\", Yl = \"form-select\", Xl = \"form-checkbox\", Vl = \"form-radio\", Tl = \"form-button\", f = [\"click\", \"dblclick\", \"mouseover\", \"input\", \"change\"];\nfunction k(d, b, Z) {\n  const l = [];\n  if (Z)\n    for (const W of Z)\n      W[d] === b && l.push(W);\n  return l;\n}\nfunction a(d, b) {\n  return { type: d, data: b };\n}\nfunction x(d, b) {\n  switch (d.type) {\n    case \"textarea\":\n    case \"text\":\n      return a(Ml, {\n        fieldName: d.name,\n        value: d.value\n      });\n    case \"select-one\":\n    case \"select-multiple\":\n      const Z = [];\n      for (const W of d.options)\n        Z.push({\n          value: W.value,\n          label: W.label\n        });\n      const l = [];\n      for (const W of d.selectedOptions)\n        l.push({\n          value: W.value,\n          label: W.label\n        });\n      return a(Yl, {\n        fieldName: d.name,\n        value: l,\n        options: Z\n      });\n    case \"checkbox\":\n      return a(Xl, {\n        fieldName: d.name,\n        checked: d.checked\n      });\n    case \"radio\":\n      return a(Vl, {\n        fieldName: d.name,\n        ...b\n      });\n    case \"button\":\n      return a(Tl, {\n        fieldName: d.name,\n        ...b\n      });\n  }\n}\nfunction Ll(d) {\n  return a(Nl, d.file);\n}\nasync function yl(d, b) {\n  if (d.dest) {\n    if (typeof d.dest == \"string\")\n      return a(A, {\n        referencedPage: Number(d.dest.substring(1, d.dest.length)),\n        offset: null\n      });\n    {\n      const Z = await b.getPageIndex(d.dest[0]);\n      return a(A, {\n        referencedPage: Z + 1,\n        offset: {\n          left: d.dest[2],\n          bottom: d.dest[3]\n        }\n      });\n    }\n  } else if (d.url)\n    return a(ml, {\n      url: d.url,\n      unsafeUrl: d.unsafeUrl\n    });\n}\nfunction r(d) {\n  for (const b of d.getElementsByTagName(\"span\")) {\n    let Z = b.textContent;\n    const l = JSON.parse(b.dataset.l10nArgs ?? \"{}\");\n    if (Z)\n      for (const W in l)\n        Z = Z.replace(`{{${W}}}`, l[W]);\n    b.textContent = Z;\n  }\n}\nfunction ul(d, b, Z) {\n  var W;\n  let l = d.target.parentNode;\n  if (l.tagName === \"DIV\" && (l = l.firstChild), l.className === \"linkAnnotation\" && d.type === \"click\") {\n    const G = (W = l.dataset) == null ? void 0 : W.annotationId;\n    if (G)\n      return yl(k(\"id\", G, Z)[0], b);\n  } else if (l.className.includes(\"popupAnnotation\") || l.className.includes(\"textAnnotation\"))\n    r(l);\n  else if (l.className.includes(\"fileAttachmentAnnotation\")) {\n    r(l);\n    const G = l.dataset.annotationId;\n    if (G && d.type === \"dblclick\")\n      return Ll(k(\"id\", G, Z)[0]);\n  } else if (l.className.includes(\"textWidgetAnnotation\") && d.type === \"input\") {\n    let G = l.getElementsByTagName(\"input\")[0];\n    return G || (G = l.getElementsByTagName(\"textarea\")[0]), x(G);\n  } else {\n    if (l.className.includes(\"choiceWidgetAnnotation\") && d.type === \"input\")\n      return x(l.getElementsByTagName(\"select\")[0]);\n    if (l.className.includes(\"buttonWidgetAnnotation checkBox\") && d.type === \"change\")\n      return x(l.getElementsByTagName(\"input\")[0]);\n    if (l.className.includes(\"buttonWidgetAnnotation radioButton\") && d.type === \"change\") {\n      const G = l.dataset.annotationId;\n      if (G) {\n        const M = k(\"id\", G, Z)[0], m = [];\n        for (const X of k(\"fieldName\", M.fieldName, Z))\n          X.buttonValue && m.push(X.buttonValue);\n        return x(l.getElementsByTagName(\"input\")[0], {\n          value: M.buttonValue,\n          defaultValue: M.fieldValue,\n          options: m\n        });\n      }\n    } else if (l.className.includes(\"buttonWidgetAnnotation pushButton\") && d.type === \"click\") {\n      const G = l.dataset.annotationId;\n      if (G) {\n        const M = k(\"id\", G, Z)[0];\n        return M.resetForm ? x(\n          { name: M.fieldName, type: \"button\" },\n          { actions: M.actions, reset: !0 }\n        ) : x(\n          { name: M.fieldName, type: \"button\" },\n          { actions: M.actions, reset: !1 }\n        );\n      }\n    }\n  }\n}\nclass $ {\n  constructor() {\n    e(this, \"externalLinkEnabled\");\n    this.externalLinkEnabled = !0;\n  }\n  /**\n     * @type {number}\n     */\n  get pagesCount() {\n    return 0;\n  }\n  /**\n     * @type {number}\n     */\n  get page() {\n    return 0;\n  }\n  /**\n     * @param {number} _value\n     */\n  set page(b) {\n  }\n  /**\n     * @type {number}\n     */\n  get rotation() {\n    return 0;\n  }\n  /**\n     * @param {number} _value\n     */\n  set rotation(b) {\n  }\n  /**\n     * @type {boolean}\n     */\n  get isInPresentationMode() {\n    return !1;\n  }\n  /**\n     * @param {string|Array} _dest - The named, or explicit, PDF destination.\n     */\n  async goToDestination(b) {\n  }\n  /**\n     * @param {number|string} _val - The page number, or page label.\n     */\n  goToPage(b) {\n  }\n  /**\n     * @param {HTMLAnchorElement} link\n     * @param {string} url\n     * @param {boolean} [_newWindow]\n     */\n  addLinkAttributes(b, Z, l = !1) {\n  }\n  /**\n     * @param _dest - The PDF destination object.\n     * @returns {string} The hyperlink to the PDF object.\n     */\n  getDestinationHash(b) {\n    return \"#\";\n  }\n  /**\n     * @param _hash - The PDF parameters/hash.\n     * @returns {string} The hyperlink to the PDF object.\n     */\n  getAnchorUrl(b) {\n    return \"#\";\n  }\n  /**\n     * @param {string} _hash\n     */\n  setHash(b) {\n  }\n  /**\n     * @param {string} _action\n     */\n  executeNamedAction(b) {\n  }\n  /**\n     * @param {Object} _action\n     */\n  executeSetOCGState(b) {\n  }\n  /**\n     * @param {number} _pageNum - page number.\n     * @param {Object} _pageRef - reference to the page.\n     */\n  cachePageRef(b, Z) {\n  }\n}\nconst hl = /* @__PURE__ */ n({\n  __name: \"AnnotationLayer\",\n  props: {\n    page: {},\n    viewport: {},\n    document: {},\n    filter: {},\n    map: {},\n    imageResourcesPath: {},\n    hideForms: { type: Boolean },\n    enableScripting: { type: Boolean }\n  },\n  emits: [\"annotation\"],\n  setup(d, { emit: b }) {\n    const Z = d, l = I(), W = I();\n    function G(Y) {\n      const L = ul(Y, Z.document, W.value);\n      Promise.resolve(L).then((T) => {\n        T && b(\"annotation\", T);\n      });\n    }\n    async function M() {\n      var L;\n      return await ((L = j(Z.document)) == null ? void 0 : L.getFieldObjects());\n    }\n    async function m() {\n      var L;\n      return await ((L = j(Z.document)) == null ? void 0 : L.hasJSActions());\n    }\n    async function X() {\n      const Y = Z.page;\n      let L = await (Y == null ? void 0 : Y.getAnnotations());\n      if (Z.filter) {\n        const T = Z.filter;\n        L = L.filter((z) => {\n          const s = z.subtype, R = z.fieldType ? `${s}.${z.fieldType}` : null;\n          return (T == null ? void 0 : T.includes(s)) || R !== null && (T == null ? void 0 : T.includes(R));\n        });\n      }\n      return L;\n    }\n    async function h() {\n      var J, O;\n      (O = (J = l.value).replaceChildren) == null || O.call(J);\n      for (const y of f)\n        l.value.removeEventListener(y, G);\n      const Y = j(Z.document), L = Z.page, T = Z.viewport;\n      W.value = await X();\n      const z = /* @__PURE__ */ new Map([]);\n      for (const y of W.value)\n        if (y.subtype === \"Widget\" && y.fieldType === \"Btn\" && y.pushButton) {\n          const S = y.rect[2] - y.rect[0], t = y.rect[3] - y.rect[1], U = document.createElement(\"canvas\");\n          U.setAttribute(\"width\", (S * T.scale).toString()), U.setAttribute(\"height\", (t * T.scale).toString()), z.set(y.id, U);\n        }\n      const s = Y.annotationStorage;\n      if (Z.map)\n        for (const [y, S] of Object.entries(Z.map))\n          s.setValue(y, S);\n      const R = {\n        annotations: W.value,\n        viewport: T.clone({ dontFlip: !0 }),\n        linkService: new $(),\n        annotationCanvasMap: z,\n        div: l.value,\n        annotationStorage: s,\n        renderForms: !Z.hideForms,\n        page: L,\n        enableScripting: !1,\n        hasJSActions: await m(),\n        fieldObjects: await M(),\n        downloadManager: null,\n        imageResourcesPath: Z.imageResourcesPath\n      };\n      w.AnnotationLayer.render(R);\n      for (const y of f)\n        l.value.addEventListener(y, G);\n    }\n    return F(() => Z.viewport, () => {\n      Z.page && Z.viewport && l.value && h();\n    }), K(() => {\n      Z.page && Z.viewport && l.value && h();\n    }), (Y, L) => (o(), Q(\"div\", {\n      ref_key: \"layer\",\n      ref: l,\n      class: \"annotationLayer\",\n      style: { display: \"block\" }\n    }, null, 512));\n  }\n});\nconst zl = /* @__PURE__ */ n({\n  __name: \"TextLayer\",\n  props: {\n    page: {},\n    viewport: {}\n  },\n  setup(d) {\n    const b = d, Z = I(), l = I();\n    function W() {\n      var T, z;\n      (z = (T = Z.value).replaceChildren) == null || z.call(T);\n      const m = b.page, X = b.viewport, Y = {\n        textContentSource: m == null ? void 0 : m.streamTextContent({ includeMarkedContent: !0, disableNormalization: !0 }),\n        viewport: X,\n        container: Z.value,\n        isOffscreenCanvasSupported: !0,\n        textDivs: [],\n        textDivProperties: /* @__PURE__ */ new WeakMap()\n      };\n      w.renderTextLayer(Y).promise.then(() => {\n        var R;\n        const s = document.createElement(\"div\");\n        s.className = \"endOfContent\", (R = Z.value) == null || R.appendChild(s), l.value = s;\n      });\n    }\n    function G() {\n      l.value && l.value.classList.add(\"active\");\n    }\n    function M() {\n      l.value && l.value.classList.remove(\"active\");\n    }\n    return F(() => b.viewport, (m) => {\n      b.page && b.viewport && Z.value && W();\n    }), K(() => {\n      b.page && b.viewport && Z.value && W();\n    }), (m, X) => (o(), Q(\"div\", {\n      ref_key: \"layer\",\n      ref: Z,\n      class: \"textLayer\",\n      style: { display: \"block\" },\n      onMousedown: G,\n      onMouseup: M\n    }, null, 544));\n  }\n}), sl = /* @__PURE__ */ n({\n  __name: \"XFALayer\",\n  props: {\n    page: {},\n    document: {},\n    viewport: {}\n  },\n  setup(d) {\n    const b = d, Z = I();\n    async function l() {\n      var m, X;\n      (X = (m = Z.value).replaceChildren) == null || X.call(m);\n      const W = j(b.document), G = b.page, M = b.viewport;\n      if (W.isPureXfa) {\n        const h = await G.getXfa(), Y = {\n          div: Z.value,\n          viewport: M.clone({ dontFlip: !0 }),\n          linkService: new $(),\n          annotationStorage: W == null ? void 0 : W.annotationStorage,\n          xfaHtml: h\n        };\n        w.XfaLayer.render(Y);\n      }\n    }\n    return F(() => b.viewport, (W) => {\n      b.page && b.viewport && Z.value && l();\n    }), K(() => {\n      b.page && b.viewport && Z.value && l();\n    }), (W, G) => (o(), Q(\"div\", {\n      ref_key: \"layer\",\n      ref: Z,\n      style: { display: \"block\" }\n    }, null, 512));\n  }\n});\nconst Il = /* @__PURE__ */ _(\"canvas\", {\n  dir: \"ltr\",\n  style: { display: \"block\" },\n  role: \"main\"\n}, null, -1), q = /* @__PURE__ */ n({\n  __name: \"VuePDF\",\n  props: {\n    pdf: {},\n    page: { default: 1 },\n    scale: { default: 1 },\n    rotation: {},\n    fitParent: { type: Boolean },\n    textLayer: { type: Boolean },\n    imageResourcesPath: {},\n    hideForms: { type: Boolean },\n    annotationLayer: { type: Boolean },\n    annotationsFilter: {},\n    annotationsMap: {},\n    watermarkText: {}\n  },\n  emits: [\"annotation\", \"loaded\"],\n  setup(d, { expose: b, emit: Z }) {\n    const l = d, W = I(), G = I(), M = I(!1);\n    let m;\n    const X = I(), h = I(), Y = I();\n    function L(c) {\n      Z(\"loaded\", c);\n    }\n    function T(c) {\n      Z(\"annotation\", c);\n    }\n    function z(c) {\n      if (!(typeof c == \"number\" && c % 90 === 0))\n        return 0;\n      const N = c / 90;\n      return N > 4 ? z(c - 360) : N < 0 ? z(c + 360) : c;\n    }\n    function s(c) {\n      let N = l.scale;\n      if (l.fitParent) {\n        const V = W.value.parentNode.clientWidth, u = c.getViewport({ scale: 1 }).width;\n        N = V / u;\n      }\n      return N;\n    }\n    function R(c, N = 18, V = 1) {\n      if (!l.watermarkText)\n        return;\n      const u = c.getContext(\"2d\");\n      if (!u)\n        return;\n      u.font = `${N * V}px Trebuchet MS`, u.fillStyle = \"rgba(211, 210, 211, 0.3)\";\n      const D = 50;\n      for (let p = 0; p < D; p++) {\n        const C = p % 5 * (c.width / 5) + c.width / 10, i = Math.floor(p / 5) * (c.height / 5) + c.height / 10;\n        u.save(), u.translate(C, i), u.rotate(-(Math.PI / 4)), u.fillText(l.watermarkText, 0, 0), u.restore();\n      }\n    }\n    function J() {\n      var N;\n      let c = null;\n      return (N = W.value) == null || N.childNodes.forEach((V) => {\n        V.tagName === \"CANVAS\" && (c = V);\n      }), c;\n    }\n    function O(c) {\n      var D;\n      let N;\n      const V = J();\n      V && (V == null ? void 0 : V.getAttribute(\"role\")) === \"main\" ? N = V : (N = document.createElement(\"canvas\"), N.style.display = \"block\", N.setAttribute(\"dir\", \"ltr\"));\n      const u = window.devicePixelRatio || 1;\n      return N.width = Math.floor(c.width * u), N.height = Math.floor(c.height * u), N.style.width = `${Math.floor(c.width)}px`, N.style.height = `${Math.floor(c.height)}px`, (D = W.value) == null || D.style.setProperty(\"--scale-factor\", `${c.scale}`), G.value.style.width = `${Math.floor(c.width)}px`, G.value.style.height = `${Math.floor(c.height)}px`, G.value.style.top = \"0\", G.value.style.left = \"0\", M.value = !0, N;\n    }\n    function y() {\n      m && m.cancel();\n    }\n    function S(c) {\n      var N;\n      (N = j(X.value)) == null || N.getPage(c).then((V) => {\n        var v;\n        y();\n        const u = V.getViewport(), D = {\n          scale: s(V),\n          rotation: z((l.rotation || 0) + u.rotation)\n        }, p = V.getViewport(D), C = J(), i = O(p), E = window.devicePixelRatio || 1, bl = E !== 1 ? [E, 0, 0, E, 0, 0] : void 0, dl = {\n          canvasContext: i.getContext(\"2d\"),\n          viewport: p,\n          annotationMode: l.hideForms ? w.AnnotationMode.ENABLE : w.AnnotationMode.ENABLE_FORMS,\n          transform: bl\n        };\n        (i == null ? void 0 : i.getAttribute(\"role\")) !== \"main\" ? C && ((v = W.value) == null || v.replaceChild(i, C)) : i.removeAttribute(\"role\"), h.value = V, Y.value = p, m = V.render(dl), m.promise.then(() => {\n          R(i, 18, p.scale), M.value = !1, L(Y.value);\n        }).catch(() => {\n        });\n      });\n    }\n    function t(c) {\n      c.promise.then(async (N) => {\n        X.value = N, S(l.page);\n      });\n    }\n    F(() => l.pdf, (c) => {\n      c !== void 0 && t(c);\n    }), F(() => [l.scale, l.rotation, l.page, l.hideForms, l.watermarkText], () => {\n      S(l.page);\n    }), K(() => {\n      l.pdf !== void 0 && t(l.pdf);\n    });\n    function U() {\n      S(l.page);\n    }\n    function ll() {\n      y();\n    }\n    function Zl() {\n      const c = j(X.value);\n      return c == null ? void 0 : c.annotationStorage;\n    }\n    return b({\n      reload: U,\n      cancel: ll,\n      getAnnotationStorage: Zl\n    }), (c, N) => (o(), Q(\"div\", {\n      ref_key: \"container\",\n      ref: W,\n      style: { position: \"relative\", display: \"block\", overflow: \"hidden\" }\n    }, [\n      Il,\n      g(H(hl, {\n        filter: c.annotationsFilter,\n        map: c.annotationsMap,\n        viewport: Y.value,\n        \"image-resources-path\": c.imageResourcesPath,\n        \"hide-forms\": c.hideForms,\n        page: h.value,\n        document: X.value,\n        onAnnotation: N[0] || (N[0] = (V) => T(V))\n      }, null, 8, [\"filter\", \"map\", \"viewport\", \"image-resources-path\", \"hide-forms\", \"page\", \"document\"]), [\n        [P, c.annotationLayer]\n      ]),\n      g(H(zl, {\n        page: h.value,\n        viewport: Y.value\n      }, null, 8, [\"page\", \"viewport\"]), [\n        [P, c.textLayer]\n      ]),\n      H(sl, {\n        page: h.value,\n        viewport: Y.value,\n        document: X.value\n      }, null, 8, [\"page\", \"viewport\", \"document\"]),\n      g(_(\"div\", {\n        ref_key: \"loadingLayer\",\n        ref: G,\n        style: { position: \"absolute\" }\n      }, [\n        Gl(c.$slots, \"default\")\n      ], 512), [\n        [P, M.value]\n      ])\n    ], 512));\n  }\n}), Rl = \"data:application/javascript;base64,\";\nfunction pl(d) {\n  w.GlobalWorkerOptions.workerSrc = d;\n}\nfunction wl(d, b = {\n  onProgress: void 0,\n  onPassword: void 0,\n  onError: void 0,\n  password: \"\"\n}) {\n  var M;\n  (M = w.GlobalWorkerOptions) != null && M.workerSrc || pl(Rl);\n  const Z = B(), l = B(0), W = B({}), G = w.getDocument(d);\n  if (b.onProgress && (G.onProgress = b.onProgress), b.onPassword)\n    G.onPassword = b.onPassword;\n  else if (b.password) {\n    const m = (X, h) => {\n      X(b.password ?? \"\");\n    };\n    G.onPassword = m;\n  }\n  return G.promise.then(async (m) => {\n    Z.value = m.loadingTask, l.value = m.numPages;\n    const X = await m.getMetadata(), h = await m.getAttachments(), Y = await m.getJavaScript();\n    W.value = {\n      metadata: X,\n      attachments: h,\n      javascript: Y\n    };\n  }, (m) => {\n    typeof b.onError == \"function\" && b.onError(m);\n  }), {\n    pdf: Z,\n    pages: l,\n    info: W\n  };\n}\nconst Sl = {\n  install(d) {\n    d.component(q.name, q);\n  }\n};\nexport {\n  q as VuePDF,\n  Sl as VuePDFPlugin,\n  Sl as default,\n  wl as usePDF\n};\n"],
  "mappings": "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",
  "names": ["exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "IDENTITY_MATRIX", "exports", "FONT_IDENTITY_MATRIX", "MAX_IMAGE_SIZE_TO_CACHE", "LINE_FACTOR", "LINE_DESCENT_FACTOR", "BASELINE_FACTOR", "RenderingIntentFlag", "ANY", "DISPLAY", "PRINT", "SAVE", "ANNOTATIONS_FORMS", "ANNOTATIONS_STORAGE", "ANNOTATIONS_DISABLE", "OPLIST", "AnnotationMode", "DISABLE", "ENABLE", "ENABLE_FORMS", "ENABLE_STORAGE", "AnnotationEditorPrefix", "AnnotationEditorType", "NONE", "FREETEXT", "INK", "AnnotationEditorParamsType", "FREETEXT_SIZE", "FREETEXT_COLOR", "FREETEXT_OPACITY", "INK_COLOR", "INK_THICKNESS", "INK_OPACITY", "PermissionFlag", "MODIFY_CONTENTS", "COPY", "MODIFY_ANNOTATIONS", "FILL_INTERACTIVE_FORMS", "COPY_FOR_ACCESSIBILITY", "ASSEMBLE", "PRINT_HIGH_QUALITY", "TextRenderingMode", "FILL", "STROKE", "FILL_STROKE", "INVISIBLE", "FILL_ADD_TO_PATH", "STROKE_ADD_TO_PATH", "FILL_STROKE_ADD_TO_PATH", "ADD_TO_PATH", "FILL_STROKE_MASK", "ADD_TO_PATH_FLAG", "ImageKind", "GRAYSCALE_1BPP", "RGB_24BPP", "RGBA_32BPP", "AnnotationType", "TEXT", "LINK", "LINE", "SQUARE", "CIRCLE", "POLYGON", "POLYLINE", "HIGHLIGHT", "UNDERLINE", "SQUIGGLY", "STRIKEOUT", "STAMP", "CARET", "POPUP", "FILEATTACHMENT", "SOUND", "MOVIE", "WIDGET", "SCREEN", "PRINTERMARK", "TRAPNET", "WATERMARK", "THREED", "REDACT", "AnnotationStateModelType", "MARKED", "REVIEW", "AnnotationMarkedState", "UNMARKED", "AnnotationReviewState", "ACCEPTED", "REJECTED", "CANCELLED", "COMPLETED", "AnnotationReplyType", "GROUP", "REPLY", "AnnotationFlag", "HIDDEN", "NOZOOM", "NOROTATE", "NOVIEW", "READONLY", "LOCKED", "TOGGLENOVIEW", "LOCKEDCONTENTS", "AnnotationFieldFlag", "REQUIRED", "NOEXPORT", "MULTILINE", "PASSWORD", "NOTOGGLETOOFF", "RADIO", "PUSHBUTTON", "COMBO", "EDIT", "SORT", "FILESELECT", "MULTISELECT", "DONOTSPELLCHECK", "DONOTSCROLL", "COMB", "RICHTEXT", "RADIOSINUNISON", "COMMITONSELCHANGE", "AnnotationBorderStyleType", "SOLID", "DASHED", "BEVELED", "INSET", "AnnotationActionEventType", "E", "X", "D", "U", "Fo", "Bl", "PO", "PC", "PV", "PI", "K", "F", "V", "C", "DocumentActionEventType", "WC", "WS", "DS", "WP", "DP", "PageActionEventType", "O", "VerbosityLevel", "ERRORS", "WARNINGS", "INFOS", "CMapCompressionType", "BINARY", "OPS", "dependency", "setLineWidth", "setLineCap", "setLineJoin", "setMiterLimit", "setDash", "setRenderingIntent", "setFlatness", "setGState", "save", "restore", "transform", "moveTo", "lineTo", "curveTo", "curveTo2", "curveTo3", "closePath", "rectangle", "stroke", "closeStroke", "fill", "eoFill", "fillStroke", "eoFillStroke", "closeFillStroke", "closeEOFillStroke", "endPath", "clip", "eoClip", "beginText", "endText", "setCharSpacing", "setWordSpacing", "setHScale", "setLeading", "setFont", "setTextRenderingMode", "setTextRise", "moveText", "setLeadingMoveText", "setTextMatrix", "nextLine", "showText", "showSpacedText", "nextLineShowText", "nextLineSetSpacingShowText", "setCharWidth", "setCharWidthAndBounds", "setStrokeColorSpace", "setFillColorSpace", "setStrokeColor", "setStrokeColorN", "setFillColor", "setFillColorN", "setStrokeGray", "setFillGray", "setStrokeRGBColor", "setFillRGBColor", "setStrokeCMYKColor", "setFillCMYKColor", "shadingFill", "beginInlineImage", "beginImageData", "endInlineImage", "paintXObject", "markPoint", "markPointProps", "beginMarkedContent", "beginMarkedContentProps", "endMarkedContent", "beginCompat", "endCompat", "paintFormXObjectBegin", "paintFormXObjectEnd", "beginGroup", "endGroup", "beginAnnotation", "endAnnotation", "paintImageMaskXObject", "paintImageMaskXObjectGroup", "paintImageXObject", "paintInlineImageXObject", "paintInlineImageXObjectGroup", "paintImageXObjectRepeat", "paintImageMaskXObjectRepeat", "paintSolidColorImageMask", "constructPath", "PasswordResponses", "NEED_PASSWORD", "INCORRECT_PASSWORD", "verbosity", "setVerbosityLevel", "level", "Number", "isInteger", "getVerbosityLevel", "info", "msg", "console", "log", "warn", "unreachable", "Error", "assert", "cond", "_isValidProtocol", "url", "protocol", "createValidAbsoluteUrl", "baseUrl", "options", "addDefaultProtocol", "startsWith", "dots", "match", "length", "tryConvertEncoding", "stringToUTF8String", "ex", "absoluteUrl", "URL", "shadow", "obj", "prop", "value", "nonSerializable", "Object", "defineProperty", "enumerable", "configurable", "writable", "BaseException", "BaseExceptionClosure", "message", "name", "constructor", "prototype", "PasswordException", "code", "UnknownErrorException", "details", "InvalidPDFException", "MissingPDFException", "UnexpectedResponseException", "status", "FormatError", "AbortException", "bytesToString", "bytes", "undefined", "MAX_ARGUMENT_COUNT", "String", "fromCharCode", "apply", "strBuf", "i", "chunkEnd", "Math", "min", "chunk", "subarray", "push", "join", "stringToBytes", "str", "Uint8Array", "charCodeAt", "string32", "objectSize", "keys", "objectFromMap", "map", "create", "key", "isLittleEndian", "buffer8", "view32", "Uint32Array", "buffer", "isEvalSupported", "Function", "e", "FeatureTest", "isOffscreenCanvasSupported", "OffscreenCanvas", "platform", "navigator", "isWin", "isMac", "includes", "hexNumbers", "Array", "n", "toString", "padStart", "Util", "makeHexColor", "r", "g", "b", "scaleMinMax", "minMax", "temp", "m1", "m2", "applyTransform", "p", "m", "xt", "yt", "applyInverseTransform", "d", "getAxialAlignedBoundingBox", "p1", "p2", "slice", "p3", "p4", "max", "inverseTransform", "singularValueDecompose2dScale", "transpose", "a", "c", "first", "second", "sqrt", "sx", "sy", "normalizeRect", "rect", "intersect", "rect1", "rect2", "xLow", "xHigh", "yLow", "yHigh", "bezierBoundingBox", "x0", "y0", "x1", "y1", "x2", "y2", "x3", "y3", "tvalues", "bounds", "t", "t1", "t2", "b2ac", "sqrtb2ac", "abs", "j", "mt", "jlen", "PDFStringTranslateTable", "stringToPDFString", "encoding", "decoder", "TextDecoder", "fatal", "decode", "ii", "charAt", "decodeURIComponent", "escape", "utf8StringToString", "unescape", "encodeURIComponent", "isArrayBuffer", "v", "byteLength", "isArrayEqual", "arr1", "arr2", "getModificationDate", "date", "Date", "getUTCFullYear", "getUTCMonth", "getUTCDate", "getUTCHours", "getUTCMinutes", "getUTCSeconds", "PromiseCapability", "promise", "Promise", "resolve", "reject", "data", "reason", "settled", "NormalizeRegex", "NormalizationMap", "normalizeUnicode", "Map", "replaceAll", "_", "normalize", "get", "_util", "require", "_annotation_storage", "_display_utils", "_font_loader", "_canvas", "_worker_options", "_is_node", "_message_handler", "_metadata", "_optional_content_config", "_transport_stream", "_xfa_text", "DEFAULT_RANGE_CHUNK_SIZE", "RENDERING_CANCELLED_TIMEOUT", "DELAYED_CLEANUP_TIMEOUT", "DefaultCanvasFactory", "DOMCanvasFactory", "DefaultCMapReaderFactory", "DOMCMapReaderFactory", "DefaultFilterFactory", "DOMFilterFactory", "DefaultStandardFontDataFactory", "DOMStandardFontDataFactory", "isNodeJS", "NodeCanvasFactory", "NodeCMapReaderFactory", "NodeFilterFactory", "NodeStandardFontDataFactory", "createPDFNetworkStream", "PDFNodeStream", "params", "PDFNetworkStream", "PDFFetchStream", "isValidFetchUrl", "getDocument", "src", "range", "task", "PDFDocumentLoadingTask", "docId", "getUrlProp", "getDataProp", "httpHeaders", "withCredentials", "password", "rangeTransport", "PDFDataRangeTransport", "rangeChunkSize", "worker", "PDFWorker", "docBaseUrl", "isDataScheme", "cMapUrl", "cMapPacked", "CMapReaderFactory", "standardFontDataUrl", "StandardFontDataFactory", "ignoreErrors", "stopAtErrors", "maxImageSize", "canvasMaxAreaInBytes", "disableFontFace", "fontExtraProperties", "enableXfa", "ownerDocument", "globalThis", "document", "disableRange", "disableStream", "disableAutoFetch", "pdfBug", "NaN", "useSystemFonts", "useWorkerFetch", "baseURI", "canvasFactory", "filterFactory", "styleElement", "transportFactory", "cMapReaderFactory", "isCompressed", "standardFontDataFactory", "workerParams", "port", "GlobalWorkerOptions", "workerPort", "fromPort", "_worker", "fetchDocParams", "apiVersion", "evaluatorOptions", "transportParams", "then", "destroyed", "workerIdPromise", "_fetchDocument", "networkStreamPromise", "networkStream", "PDFDataTransportStream", "initialData", "progressiveDone", "contentDispositionFilename", "all", "workerId", "messageHandler", "MessageHandler", "transport", "WorkerTransport", "_transport", "send", "catch", "_capability", "source", "sendWithPromise", "val", "href", "window", "location", "Buffer", "deprecated", "isNaN", "onPassword", "onProgress", "destroy", "_a", "_rangeListeners", "_progressListeners", "_progressiveReadListeners", "_progressiveDoneListeners", "_readyCapability", "addRangeListener", "listener", "addProgressListener", "addProgressiveReadListener", "addProgressiveDoneListener", "onDataRange", "begin", "onDataProgress", "loaded", "total", "onDataProgressiveRead", "onDataProgressiveDone", "transportReady", "requestDataRange", "end", "abort", "PDFDocumentProxy", "pdfInfo", "_pdfInfo", "annotationStorage", "numPages", "fingerprints", "isPureXfa", "_htmlForXfa", "allXfaHtml", "getPage", "pageNumber", "getPageIndex", "ref", "getDestinations", "getDestination", "id", "getPageLabels", "getPageLayout", "getPageMode", "getViewerPreferences", "getOpenAction", "getAttachments", "getJavaScript", "getJSActions", "getDocJSActions", "getOutline", "getOptionalContentConfig", "getPermissions", "getMetadata", "getMarkInfo", "getData", "saveDocument", "getDownloadInfo", "downloadInfoCapability", "cleanup", "keepLoadedFonts", "startCleanup", "loadingTask", "loadingParams", "getFieldObjects", "hasJSActions", "getCalculationOrderIds", "PDFPageProxy", "pageIndex", "pageInfo", "_pageIndex", "_pageInfo", "_stats", "StatTimer", "_pdfBug", "commonObjs", "objs", "PDFObjects", "_maybeCleanupAfterRender", "_intentStates", "rotate", "userUnit", "view", "getViewport", "scale", "rotation", "offsetX", "offsetY", "dontFlip", "PageViewport", "viewBox", "getAnnotations", "intent", "intentArgs", "getRenderingIntent", "renderingIntent", "getPageJSActions", "getXfa", "children", "render", "canvasContext", "viewport", "annotationMode", "background", "optionalContentConfigPromise", "annotationCanvasMap", "pageColors", "printAnnotationStorage", "arguments", "time", "intentState", "cacheKey", "set", "streamReaderCancelTimeout", "clearTimeout", "intentPrint", "displayReadyCapability", "operatorList", "fnArray", "argsArray", "lastChunk", "separateAnnots", "_pumpOperatorList", "complete", "error", "renderTasks", "delete", "internalRenderTask", "capability", "_abortOperatorList", "timeEnd", "_b", "InternalRenderTask", "callback", "useRequestAnimationFrame", "Set", "add", "renderTask", "transparency", "optionalContentConfig", "initializeGraphics", "operatorListChanged", "getOperatorList", "opListReadCapability", "opListTask", "streamTextContent", "includeMarkedContent", "disableNormalization", "TEXT_CONTENT_CHUNK_SIZE", "sendWithStream", "highWaterMark", "size", "textContent", "items", "getTextContent", "xfa", "XfaText", "readableStream", "pump", "reader", "read", "done", "assign", "styles", "getReader", "getStructTree", "_destroy", "waitOn", "values", "force", "completed", "cancel", "clear", "resetStats", "success", "_startRenderPage", "_renderPageChunk", "operatorListChunk", "annotationStorageMap", "streamReader", "RenderingCancelledException", "delay", "extraDelay", "setTimeout", "curCacheKey", "curIntentState", "stats", "tryCleanup", "delayed", "abortDelayedCleanup", "LoopbackPort", "postMessage", "transfer", "event", "structuredClone", "call", "addEventListener", "removeEventListener", "terminate", "PDFWorkerUtil", "isWorkerDisabled", "fallbackWorkerSrc", "fakeWorkerId", "__non_webpack_require__", "pdfjsFilePath", "currentScript", "replace", "isSameOrigin", "otherUrl", "base", "origin", "other", "createCDNWrapper", "wrapper", "createObjectURL", "Blob", "has", "_port", "_webWorker", "_messageHandler", "_initializeFromPort", "_initialize", "on", "_mainThreadWorkerMessageHandler", "workerSrc", "Worker", "terminateEarly", "onWorkerError", "_setupFakeWorker", "sendTest", "testObj", "_setupFakeWorkerGlobal", "WorkerMessageHandler", "workerHandler", "setup", "pdfjsWorker", "loader", "mainWorkerMessageHandler", "eval", "loadScript", "WeakMap", "factory", "fontLoader", "FontLoader", "_params", "destroyCapability", "_passwordCapability", "_networkStream", "_fullReader", "_lastProgress", "setupMessageHandler", "AnnotationStorage", "isOpList", "annotationMap", "PrintAnnotationStorage", "serializable", "getHash", "page", "hasOwnProperty", "resetModified", "terminated", "cancelAllRequests", "sink", "getFullReader", "evt", "onPull", "close", "ArrayBuffer", "enqueue", "onCancel", "ready", "readyReason", "headersCapability", "fullReader", "headersReady", "isStreamingSupported", "isRangeSupported", "contentLength", "rangeReader", "getRangeReader", "_numPages", "htmlForXfa", "exception", "updatePassword", "type", "exportedData", "exportedError", "inspectFont", "FontInspector", "enabled", "font", "fontAdded", "FontFaceObject", "bind", "finally", "imageData", "pageProxy", "bitmap", "width", "height", "fetch", "filename", "cachedPromise", "num", "gen", "results", "OptionalContentConfig", "metadata", "Metadata", "cleanupSuccessful", "cacheSimpleMethod", "objId", "ensureObj", "RenderTask", "onContinue", "form", "canvas", "operatorListIdx", "running", "graphicsReadyCallback", "graphicsReady", "_useRequestAnimationFrame", "cancelled", "_cancelBound", "_continueBound", "_continue", "_scheduleNextBound", "_scheduleNext", "_nextBound", "_next", "StepperManager", "stepper", "init", "nextBreakPoint", "getNextBreakPoint", "gfx", "CanvasGraphics", "beginDrawing", "endDrawing", "updateOperatorList", "requestAnimationFrame", "executeOperatorList", "WeakSet", "version", "build", "_editor", "_murmurhash", "onSetModified", "onResetModified", "onAnnotationEditor", "getValue", "defaultValue", "getRawValue", "remove", "AnnotationEditor", "setValue", "modified", "entry", "entries", "_type", "getAll", "setAll", "print", "clone", "serialized", "serialize", "hash", "MurmurHash3_64", "update", "JSON", "stringify", "hexdigest", "setModified", "parent", "_tools", "parameters", "focusin", "focusout", "_uiManager", "_zIndex", "div", "uiManager", "rawDims", "pageWidth", "pageHeight", "pageX", "pageY", "pageRotation", "viewParameters", "pageDimensions", "pageTranslation", "parentDimensions", "x", "y", "isAttachedToDOM", "_defaultLineColor", "_colorManager", "getHexCode", "addCommands", "currentLayer", "setInBackground", "style", "zIndex", "setInForeground", "setParent", "setSelected", "target", "relatedTarget", "closest", "preventDefault", "isMultipleSelection", "commitOrRemove", "isEmpty", "commit", "addToAnnotationStorage", "dragstart", "getBoundingClientRect", "startX", "clientX", "startY", "clientY", "dataTransfer", "setData", "effectAllowed", "setAt", "tx", "ty", "screenToPageTranslation", "left", "top", "translate", "parentRotation", "parentScale", "realScale", "setDims", "parentWidth", "parentHeight", "fixDims", "widthPercent", "endsWith", "heightPercent", "parseFloat", "getInitialTranslation", "createElement", "setAttribute", "className", "bindEvents", "pointerdown", "button", "ctrlKey", "shiftKey", "metaKey", "toggleSelected", "getRect", "shiftX", "shiftY", "getRectInCurrentCoords", "onceAdded", "enableEditMode", "disableEditMode", "isInEditMode", "shouldGetKeyboardEvents", "needsToBeRebuilt", "rebuild", "deserialize", "editor", "getNextId", "select", "classList", "unselect", "updateParams", "disableEditing", "enableEditing", "propertiesToUpdate", "contentDiv", "isEditing", "setActiveEditor", "ColorManager", "element", "names", "opacityToHex", "opacity", "round", "IdManager", "getId", "CommandManager", "maxSize", "cmd", "undo", "mustExec", "overwriteIfSameType", "keepUndo", "next", "splice", "redo", "hasSomethingToUndo", "hasSomethingToRedo", "KeyboardManager", "callbacks", "allKeys", "isMacKey", "split", "at", "exec", "self", "stopPropagation", "altKey", "_colors", "colors", "getColorValues", "convert", "color", "rgb", "getRGB", "matchMedia", "matches", "RGB", "every", "_colorsMapping", "AnnotationEditorUIManager", "container", "eventBus", "copy", "cut", "paste", "keydown", "onEditingAction", "onPageChanging", "onScaleChanging", "onRotationChanging", "hasSelectedEditor", "_on", "PixelsPerInch", "PDF_TO_CSS_UNITS", "_off", "layer", "focusMainContainer", "focus", "addShouldRescale", "removeShouldRescale", "pagesRotation", "hasSelection", "editors", "clipboardData", "parse", "isArray", "unselectAll", "newEditors", "deserializedEditor", "getActive", "_keyboardManager", "setEditingState", "registerEditorTypes", "types", "editorType", "defaultPropertiesToUpdate", "currentPageIndex", "addLayer", "enable", "disable", "removeLayer", "updateMode", "mode", "updateToolbar", "dispatch", "updateDefaultParams", "getEditors", "getEditor", "addEditor", "removeEditor", "ed", "isSelected", "selectAll", "isActive", "getMode", "addKeyboardManager", "removeKeyboardManager", "addCopyPasteListeners", "removeCopyPasteListeners", "dispatchUpdateStates", "hasChanged", "some", "dispatchUpdateUI", "enableAll", "disableAll", "addEditorToLayer", "addOrRebuild", "selectEditors", "_base_factory", "SVG_NS", "AnnotationPrefix", "CSS", "PDF", "BaseFilterFactory", "addFilter", "maps", "tableR", "tableG", "tableB", "mapR", "mapG", "mapB", "bufferR", "bufferG", "bufferB", "filter", "createElementNS", "feComponentTransfer", "append", "addHCMFilter", "fgColor", "bgColor", "getComputedStyle", "getPropertyValue", "fgRGB", "bgRGB", "table", "feColorMatrix", "getSteps", "start", "arr", "keepHCM", "parentNode", "cache", "defs", "visibility", "contain", "position", "svg", "body", "appendFeFunc", "func", "feFunc", "BaseCanvasFactory", "_document", "_createCanvas", "fetchData", "asTypedArray", "response", "ok", "statusText", "arrayBuffer", "text", "request", "XMLHttpRequest", "open", "responseType", "onreadystatechange", "readyState", "DONE", "responseText", "BaseCMapReaderFactory", "_fetchData", "compressionType", "cMapData", "BaseStandardFontDataFactory", "DOMSVGFactory", "BaseSVGFactory", "_createSVG", "centerX", "centerY", "rotateA", "rotateB", "rotateC", "rotateD", "offsetCanvasX", "offsetCanvasY", "convertToViewportPoint", "convertToViewportRectangle", "topLeft", "bottomRight", "convertToPdfPoint", "trim", "substring", "toLowerCase", "isPdfFile", "test", "getFilenameFromUrl", "onlyStripPath", "lastIndexOf", "getPdfFilenameFromUrl", "defaultFilename", "reURI", "reFilename", "splitURI", "suggestedFilename", "started", "times", "now", "outBuf", "longest", "padEnd", "removeScriptElement", "script", "onload", "onerror", "head", "documentElement", "pdfDateStringRegex", "PDFDateString", "toDateObject", "input", "RegExp", "year", "parseInt", "month", "day", "hour", "minute", "universalTimeRelation", "offsetHour", "offsetMinute", "UTC", "getXfaPageViewport", "xfaPage", "attributes", "colorRGB", "span", "computedColor", "getCurrentTransform", "ctx", "f", "getTransform", "getCurrentTransformInverse", "invertSelf", "setLayerDimensions", "mustFlip", "mustRotate", "widthStr", "heightStr", "context", "getContext", "reset", "canvasAndContext", "skipDimensions", "SEED", "MASK_HIGH", "MASK_LOW", "seed", "h1", "h2", "blockCounts", "tailLength", "dataUint32", "k1", "k2", "C1", "C2", "C1_LOW", "C2_LOW", "nativeFontFaces", "loadingRequests", "loadTestFontId", "addNativeFontFace", "nativeFontFace", "fonts", "removeNativeFontFace", "insertRule", "rule", "getElementsByTagName", "styleSheet", "sheet", "cssRules", "loadSystemFont", "loadedName", "isFontLoadingAPISupported", "fontFace", "FontFace", "load", "baseFontName", "attached", "missingFile", "systemFontInfo", "createNativeFontFace", "family", "createFontFaceRule", "isSyncFontLoadingSupported", "_queueLoadingCallback", "_prepareFontLoadEvent", "hasFonts", "supported", "userAgent", "completeRequest", "otherRequest", "shift", "_loadTestFont", "testFont", "atob", "int32", "offset", "spliceString", "s", "insert", "chunk1", "chunk2", "called", "isFontReady", "fillText", "getImageData", "COMMENT_OFFSET", "CFF_CHECKSUM_OFFSET", "XXXX_VALUE", "checksum", "btoa", "fontFamily", "translatedData", "compiledGlyphs", "_inspectFont", "cssFontInfo", "css", "weight", "fontWeight", "italicAngle", "mimetype", "getPathGenerator", "character", "cmds", "jsBuf", "current", "args", "process", "versions", "nw", "electron", "_pattern_helper", "_image_utils", "MIN_FONT_SIZE", "MAX_FONT_SIZE", "MAX_GROUP_SIZE", "EXECUTION_TIME", "EXECUTION_STEPS", "MAX_SIZE_TO_COMPILE", "FULL_CHUNK_HEIGHT", "mirrorContextOperations", "destCtx", "_removeMirroring", "__originalSave", "__originalRestore", "__originalRotate", "__originalScale", "__originalTranslate", "__originalTransform", "__originalSetTransform", "setTransform", "__originalResetTransform", "resetTransform", "__originalClip", "__originalMoveTo", "__originalLineTo", "__originalBezierCurveTo", "bezierCurveTo", "__originalRect", "__originalClosePath", "__originalBeginPath", "beginPath", "ctxSave", "ctxRestore", "ctxTranslate", "ctxScale", "ctxTransform", "ctxSetTransform", "ctxResetTransform", "ctxRotate", "angle", "cp1x", "cp1y", "cp2x", "cp2y", "CachedCanvases", "getCanvas", "canvasEntry", "drawImageAtIntegerCoords", "srcImg", "srcX", "srcY", "srcW", "srcH", "destX", "destY", "destW", "destH", "tlX", "rTlX", "tlY", "rTlY", "brX", "rWidth", "brY", "rHeight", "sign", "drawImage", "scaleX", "hypot", "scaleY", "compileType3Glyph", "imgData", "POINT_TO_PROCESS_LIMIT", "POINT_TYPES", "width1", "points", "j0", "lineSize", "pos", "elem", "mask", "count", "sum", "steps", "Int32Array", "path", "Path2D", "p0", "step", "pp", "drawOutline", "CanvasExtraState", "alphaIsShape", "fontSize", "fontSizeScale", "textMatrix", "textMatrixScale", "fontMatrix", "leading", "lineX", "lineY", "charSpacing", "wordSpacing", "textHScale", "textRenderingMode", "textRise", "fillColor", "strokeColor", "patternFill", "fillAlpha", "strokeAlpha", "lineWidth", "activeSMask", "transferMaps", "startNewPathAndClipBox", "clipBox", "setCurrentPoint", "updatePathMinMax", "minX", "minY", "maxX", "maxY", "updateRectMinMax", "updateScalingPathMinMax", "updateCurvePathMinMax", "box", "getPathBoundingBox", "pathType", "PathType", "xStrokePad", "yStrokePad", "updateClipFromPath", "isEmptyClip", "Infinity", "getClippedPathBoundingBox", "putBinaryImageData", "ImageData", "putImageData", "partialChunkHeight", "fullChunks", "totalChunks", "chunkImgData", "createImageData", "srcPos", "destPos", "dest", "thisChunkHeight", "elemsInThisChunk", "kind", "srcLength", "dest32", "dest32DataLength", "fullSrcDiff", "white", "black", "srcDiff", "k", "kEnd", "kEndUnrolled", "srcByte", "putBinaryImageMask", "convertBlackAndWhiteToRGBA", "nonBlackColor", "copyCtxState", "sourceCtx", "properties", "property", "setLineDash", "getLineDash", "lineDashOffset", "resetCtxToDefault", "strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "composeSMaskBackdrop", "r0", "g0", "b0", "alpha", "alpha_", "composeSMaskAlpha", "maskData", "layerData", "transferMap", "composeSMaskLuminosity", "genericComposeSMask", "maskCtx", "layerCtx", "subtype", "backdrop", "layerOffsetX", "layerOffsetY", "maskOffsetX", "maskOffsetY", "hasBackdrop", "composeFn", "PIXELS_TO_PROCESS", "chunkSize", "ceil", "row", "chunkHeight", "composeSMask", "smask", "layerBox", "layerWidth", "layerHeight", "getImageSmoothingEnabled", "interpolate", "fround", "actualScale", "devicePixelRatio", "LINE_CAP_STYLES", "LINE_JOIN_STYLES", "NORMAL_CLIP", "EO_CLIP", "canvasCtx", "markedContentStack", "stateStack", "pendingClip", "pendingEOFill", "res", "xobjs", "groupStack", "processingType3", "baseTransform", "baseTransformStack", "groupLevel", "smaskStack", "smaskCounter", "tempSMask", "suspendedCtx", "contentVisible", "cachedCanvases", "cachedPatterns", "viewportScale", "outputScaleX", "outputScaleY", "_cachedScaleForStroking", "_cachedGetSinglePixelWidth", "_cachedBitmapsMap", "getObject", "fallback", "savedFillStyle", "fillRect", "transparentCanvas", "compositeCtx", "executionStartIdx", "continueCallback", "argsArrayLen", "chunkOperations", "endTime", "fnId", "breakIt", "depObjId", "objsPool", "HTMLCanvasElement", "_scaleImage", "img", "widthScale", "heightScale", "paintWidth", "paintHeight", "tmpCanvasId", "tmpCanvas", "tmpCtx", "newWidth", "newHeight", "floor", "clearRect", "_createMaskCanvas", "isPatternFill", "currentTransform", "scaled", "maskCanvas", "mainKey", "cachedImage", "maskToCanvas", "cord1", "cord2", "drawnWidth", "drawnHeight", "fillCanvas", "fillCtx", "imageSmoothingEnabled", "inverse", "getPattern", "limit", "dashArray", "dashPhase", "flatness", "states", "checkSMaskState", "inSMaskMode", "beginSMaskMode", "endSMaskMode", "cacheId", "scratchCanvas", "compose", "dirtyBox", "old", "pop", "ops", "isScalingMatrix", "minMaxForBezier", "xw", "yh", "consumePath", "rescaleAndStroke", "needRestore", "paths", "pendingTextPaths", "addToPath", "spacing", "fontRefName", "fontObj", "fontDirection", "isType3Font", "typeface", "fallbackName", "bold", "italic", "browserFontSize", "rise", "paintChar", "patternTransform", "fillStrokeMode", "isAddToPathSet", "strokeText", "isFontSubpixelAAEnabled", "glyphs", "showType3Text", "glyphsLength", "vertical", "spacingDir", "defaultVMetrics", "widthAdvanceScale", "simpleFillText", "pattern", "getSinglePixelWidth", "isInvalidPDFjsFont", "chars", "glyph", "unicode", "restoreNeeded", "isSpace", "fontChar", "accent", "scaledX", "scaledY", "vmetric", "vx", "vy", "remeasure", "measuredWidth", "measureText", "characterScaleX", "isInFont", "scaledAccentX", "scaledAccentY", "charWidth", "isTextInvisible", "spacingLength", "charProcOperatorList", "operatorListId", "transformed", "xWidth", "yWidth", "llx", "lly", "urx", "ury", "getColorN_Pattern", "IR", "canvasGraphicsFactory", "createCanvasGraphics", "TilingPattern", "_getPattern", "matrix", "getShadingPattern", "SHADING", "inv", "bl", "br", "ul", "ur", "bbox", "group", "currentCtx", "isolated", "knockout", "canvasBounds", "groupCtx", "startTransformInverse", "currentMtx", "hasOwnCanvas", "canvasWidth", "canvasHeight", "annotationCanvas", "savedCtx", "compiled", "skewX", "skewY", "positions", "trans", "images", "image", "w", "h", "applyTransferMapsToCanvas", "applyTransferMapsToBitmap", "imgToPaint", "HTMLElement", "tag", "visible", "isVisible", "isContentVisible", "absDet", "normX", "normY", "getScaleForStroking", "scaledLineWidth", "scaledXLineWidth", "scaledYLineWidth", "baseArea", "saveRestore", "dashes", "restoreInitialState", "drawFilter", "hcmFilterId", "foreground", "savedFilter", "op", "applyBoundingBox", "region", "BaseShadingPattern", "RadialAxialShadingPattern", "_bbox", "_colorStops", "_p0", "_p1", "_r0", "_r1", "_createGradient", "grad", "createLinearGradient", "createRadialGradient", "colorStop", "addColorStop", "owner", "ownerBBox", "createPattern", "domMatrix", "DOMMatrix", "drawTriangle", "c1", "c2", "c3", "coords", "rowSize", "tmp", "c1r", "c1g", "c1b", "c2r", "c2g", "c2b", "c3r", "c3g", "c3b", "xa", "car", "cag", "cab", "xb", "cbr", "cbg", "cbb", "x1_", "x2_", "drawFigure", "figure", "ps", "cs", "verticesPerRow", "rows", "cols", "q", "MeshShadingPattern", "_coords", "_figures", "_bounds", "_background", "_createMeshCanvas", "combinedScale", "backgroundColor", "EXPECTED_SCALE", "MAX_PATTERN_SIZE", "BORDER_SIZE", "boundsWidth", "boundsHeight", "paddedWidth", "paddedHeight", "matrixScale", "temporaryPatternCanvas", "DummyShadingPattern", "PaintType", "COLORED", "UNCOLORED", "xstep", "ystep", "paintType", "tilingType", "createPatternCanvas", "curMatrixScale", "dimx", "getSizeAndScale", "dimy", "graphics", "setFillAndStrokeStyleToContext", "adjustedX0", "adjustedY0", "adjustedX1", "adjustedY1", "clipBbox", "realOutputSize", "bboxWidth", "bboxHeight", "cssColor", "convertToRGBA", "convertRGBToRGBA", "inverseDecode", "zeroMapping", "oneMapping", "widthInSource", "widthRemainder", "len32", "src32", "s1", "s2", "s3", "jj", "grayToRGBA", "CallbackKind", "UNKNOWN", "DATA", "ERROR", "StreamKind", "CANCEL", "CANCEL_COMPLETE", "CLOSE", "ENQUEUE", "PULL", "PULL_COMPLETE", "START_COMPLETE", "wrapReason", "sourceName", "targetName", "comObj", "callbackId", "streamId", "streamSinks", "streamControllers", "callbackCapabilities", "actionHandler", "_onComObjOnMessage", "stream", "action", "cbSourceName", "cbTargetName", "result", "actionName", "handler", "ah", "transfers", "queueingStrategy", "ReadableStream", "controller", "startCapability", "startCall", "pullCall", "cancelCall", "isClosed", "desiredSize", "pull", "pullCapability", "cancelCapability", "createStreamSink", "streamSink", "isCancelled", "lastDesiredSize", "sinkCapability", "processStreamMessage", "streamController", "deleteStreamController", "allSettled", "parsedData", "rawData", "getRaw", "INTERNAL", "Symbol", "OptionalContentGroup", "_setVisible", "internal", "creator", "order", "groups", "baseState", "off", "expression", "policy", "ids", "setVisibility", "hasInitialVisibility", "getOrder", "getGroups", "getGroup", "evaluateVisibilityExpression", "array", "operator", "state", "pdfDataRangeTransport", "_queuedChunks", "_progressiveDone", "_contentDispositionFilename", "_pdfDataRangeTransport", "_isStreamingSupported", "_isRangeSupported", "_contentLength", "_fullRequestReader", "_rangeReaders", "_onReceiveData", "_onProgress", "_onProgressiveDone", "_enqueue", "found", "_begin", "_progressiveDataLength", "_loaded", "_removeRangeReader", "indexOf", "queuedChunks", "PDFDataTransportStreamReader", "PDFDataTransportStreamRangeReader", "_stream", "_done", "_filename", "_requests", "_headersReady", "requestCapability", "_end", "_queuedChunk", "requestsCapability", "output", "walk", "node", "shouldBuildText", "child", "fs", "readFile", "Canvas", "createCanvas", "_network_utils", "http", "https", "fileUriRegex", "parseUrl", "sourceUrl", "parsedUrl", "host", "isHttp", "isFsUrl", "_rangeRequestReaders", "PDFNodeStreamFsFullReader", "PDFNodeStreamFullReader", "PDFNodeStreamFsRangeReader", "PDFNodeStreamRangeReader", "BaseFullReader", "_url", "_storedError", "_disableRange", "_rangeChunkSize", "_readableStream", "_readCapability", "_headersCapability", "_error", "_setReadableStream", "BaseRangeReader", "createRequestOptions", "headers", "auth", "hostname", "method", "handleResponse", "statusCode", "getResponseHeader", "allowRangeRequests", "suggestedLength", "validateRangeRequestCapabilities", "extractFilenameFromHeader", "_request", "_httpHeaders", "Range", "lstat", "stat", "createReadStream", "_content_disposition", "returnValues", "contentEncoding", "contentDisposition", "getFilenameFromContentDispositionHeader", "createResponseStatusError", "validateResponseStatus", "needsEncodingFixup", "toParamRegExp", "rfc2616unquote", "rfc5987decode", "rfc2047decode", "fixupEncoding", "rfc2231getparam", "attributePattern", "flags", "textdecode", "contentDispositionStr", "iter", "quot", "part", "parts", "quotindex", "extvalue", "encodingend", "langvalue", "charset", "hex", "OK_RESPONSE", "PARTIAL_CONTENT_RESPONSE", "getArrayBuffer", "xhr", "NetworkManager", "currXhrId", "pendingRequests", "requestRange", "listeners", "requestFull", "xhrId", "pendingRequest", "setRequestHeader", "expectedStatus", "onError", "onStateChange", "onprogress", "onHeadersReceived", "onDone", "xhrStatus", "ok_response_on_range_request", "rangeHeader", "getRequestXhr", "isPendingRequest", "abortRequest", "_source", "_manager", "_onRangeRequestReaderClosed", "PDFNetworkStreamFullRequestReader", "PDFNetworkStreamRangeRequestReader", "onClosed", "manager", "_onHeadersReceived", "_onDone", "_onError", "_fullRequestId", "_headersReceivedCapability", "_cachedChunks", "fullRequestXhrId", "fullRequestXhr", "lengthComputable", "_requestId", "_close", "createFetchOptions", "abortController", "signal", "credentials", "redirect", "createHeaders", "Headers", "PDFFetchStreamReader", "PDFFetchStreamRangeReader", "_reader", "_withCredentials", "_abortController", "AbortController", "_headers", "MAX_TEXT_DIVS_TO_RENDER", "DEFAULT_FONT_SIZE", "DEFAULT_FONT_ASCENT", "ascentCache", "getCtx", "getAscent", "cachedAscent", "metrics", "ascent", "fontBoundingBoxAscent", "descent", "fontBoundingBoxDescent", "ratio", "pixels", "appendText", "geom", "textDiv", "textDivProperties", "hasText", "hasEOL", "_textDivs", "_transform", "atan2", "fontName", "fontHeight", "fontAscent", "_isOffscreenCanvasSupported", "sin", "cos", "scaleFactorStr", "divStyle", "_container", "_rootContainer", "_pageWidth", "toFixed", "_pageHeight", "dir", "_fontInspectorEnabled", "dataset", "shouldScaleText", "absScaleX", "absScaleY", "_textDivProperties", "_isReadableStream", "_layoutText", "layout", "prevFontSize", "prevFontFamily", "_canceled", "textDivs", "textDivsLength", "TextLayerRenderTask", "textContentSource", "textContentItemsStr", "_textContentSource", "_textContentItemsStr", "_layoutTextParams", "_processItems", "styleCache", "item", "_render", "renderTextLayer", "textContentStream", "scaleFactor", "updateTextLayer", "mustRescale", "_freetext", "_ink", "AnnotationEditorLayer", "pointerup", "_initialized", "FreeTextEditor", "initialize", "l10n", "InkEditor", "accessibilityManager", "addInkEditorIfNeeded", "disableClick", "enableClick", "toggle", "hidden", "isCommitting", "pointerEvents", "currentActive", "attach", "detach", "removePointerInTextLayer", "display", "activeElement", "moveEditorInDOM", "moveElementInDOM", "addANewEditor", "addUndoableEditor", "annotationType", "drop", "dropEffect", "endX", "endY", "dragover", "changeParent", "createNewEditor", "createAndAddNewEditor", "editorDivBlur", "editorDivFocus", "editorDivInput", "editorDivKeydown", "_defaultColor", "_defaultFontSize", "_l10nPromise", "_internalPadding", "overlayDiv", "editorDiv", "contentEditable", "draggable", "removeAttribute", "preventScroll", "innerText", "trimEnd", "dblclick", "baseX", "baseY", "line", "createTextNode", "padding", "updateFontSize", "setFontsize", "savedFontsize", "updateColor", "savedColor", "extractText", "divs", "setEditorDimensions", "savedDisplay", "_freeTextDefaultContent", "RESIZER_SIZE", "canvasContextMenu", "canvasPointermove", "canvasPointerleave", "canvasPointerup", "canvasPointerdown", "thickness", "bezierPath2D", "allRawPaths", "currentPath", "translationX", "translationY", "_defaultThickness", "_defaultOpacity", "disconnect", "setDimensions", "roundedWidth", "roundedHeight", "bezier", "p10", "p11", "p20", "p21", "p30", "p31", "path2D", "updateThickness", "savedThickness", "updateOpacity", "savedOpacity", "getInitialBBox", "setStroke", "startDrawing", "draw", "lastX", "lastY", "lastPoint", "stopDrawing", "xy", "drawPoints", "lastPoints", "xMin", "xMax", "yMin", "yMax", "makeBezierCurve", "prevX", "prevY", "generateBezierPoints", "bezierPoints", "control1", "control2", "redraw", "createObserver", "ResizeObserver", "contentRect", "observe", "setCanvasDims", "setScaleFactor", "scaleFactorW", "scaleFactorH", "updateTransform", "buildPath2D", "serializePaths", "NUMBER_OF_POINTS_ON_BEZIER_CURVE", "p40", "p41", "extractPointsOnBezier", "q10", "q11", "q20", "q21", "q30", "q31", "isAlmostFlat", "tol", "ax", "ay", "bx", "by", "getBbox", "getPadding", "fitToContent", "firstTime", "prevTranslationX", "prevTranslationY", "unscaledPadding", "setMinDims", "minHeight", "minWidth", "_scripting_utils", "_xfa_layer", "DEFAULT_TAB_INDEX", "GetElementsByNameSet", "getRectDims", "AnnotationElementFactory", "LinkAnnotationElement", "TextAnnotationElement", "fieldType", "TextWidgetAnnotationElement", "radioButton", "RadioButtonWidgetAnnotationElement", "checkBox", "CheckboxWidgetAnnotationElement", "PushButtonWidgetAnnotationElement", "ChoiceWidgetAnnotationElement", "WidgetAnnotationElement", "PopupAnnotationElement", "FreeTextAnnotationElement", "LineAnnotationElement", "SquareAnnotationElement", "CircleAnnotationElement", "PolylineAnnotationElement", "CaretAnnotationElement", "InkAnnotationElement", "PolygonAnnotationElement", "HighlightAnnotationElement", "UnderlineAnnotationElement", "SquigglyAnnotationElement", "StrikeOutAnnotationElement", "StampAnnotationElement", "FileAttachmentAnnotationElement", "AnnotationElement", "isRenderable", "ignoreBorder", "createQuadrilaterals", "linkService", "downloadManager", "imageResourcesPath", "renderForms", "svgFactory", "enableScripting", "_fieldObjects", "fieldObjects", "_createContainer", "quadrilaterals", "_createQuadrilaterals", "noRotate", "borderStyle", "borderWidth", "horizontalRadius", "horizontalCornerRadius", "verticalRadius", "verticalCornerRadius", "radius", "borderRadius", "borderBottomStyle", "borderColor", "setRotation", "elementWidth", "elementHeight", "_commonActions", "setColor", "jsName", "styleName", "detail", "ColorConverters", "userName", "title", "readonly", "required", "_setRequired", "textColor", "_dispatchEventFromSandbox", "actions", "jsEvent", "commonActions", "_setDefaultPropertiesFromJS", "storedData", "eventProxy", "quadPoints", "savedRect", "quadPoint", "_createPopup", "trigger", "popupElement", "PopupElement", "titleObj", "modificationDate", "contentsObj", "richText", "hideWrapper", "popup", "_renderQuadrilaterals", "quadrilateral", "_getElementsByName", "skipId", "fields", "fieldObj", "exportValues", "exportValue", "domElement", "querySelector", "getElementsByName", "getAttribute", "isTooltipOnly", "link", "isBound", "addLinkAttributes", "newWindow", "_bindNamedAction", "attachment", "_bindAttachment", "setOCGState", "_bindLink", "Action", "_bindJSAction", "resetForm", "_bindResetFormAction", "index", "linkElement", "cloneNode", "destination", "getDestinationHash", "onclick", "goToDestination", "getAnchorUrl", "executeNamedAction", "openOrDownloadData", "content", "otherClickAction", "resetFormFields", "refs", "resetFormRefs", "include", "allFields", "fieldIds", "fieldName", "field", "storage", "allIds", "dispatchEvent", "Event", "setInternalLink", "bindSetOCGState", "executeSetOCGState", "hasPopup", "alt", "l10nId", "l10nArgs", "alternativeText", "showElementAndHideCanvas", "previousSibling", "nodeName", "_getKeyModifier", "_setEventListener", "baseName", "eventName", "valueGetter", "modifier", "_setEventListeners", "getter", "_setBackgroundColor", "_setTextStyle", "TEXT_ALIGNMENT", "fontColor", "defaultAppearanceData", "computedFontSize", "roundToOneDecimal", "multiLine", "numberOfLines", "lineHeight", "textAlignment", "textAlign", "isRequired", "hasAppearance", "fieldValue", "setPropertyOnSiblings", "keyInStorage", "maxLen", "charLimit", "fieldFormattedValues", "formattedValue", "comb", "elementData", "userValue", "lastCommittedValue", "commitKey", "doNotScroll", "overflowY", "overflowX", "disabled", "readOnly", "tabIndex", "maxLength", "defaultFieldValue", "blurListener", "scrollLeft", "selRange", "setSelectionRange", "willCommit", "selStart", "selectionStart", "selEnd", "selectionEnd", "_blurListener", "Keystroke", "inputType", "change", "fieldWidth", "combWidth", "letterSpacing", "verticalAlign", "checked", "checkbox", "curChecked", "buttonValue", "radio", "pdfButtonValue", "lastChild", "selectElement", "addAnEmptyEntry", "combo", "multiSelect", "multiple", "option", "selected", "optionElement", "displayValue", "removeEmptyEntry", "noneOptionElement", "prepend", "isExport", "selectedIndex", "selectedValues", "getItems", "multipleSelection", "findIndex", "selectChild", "before", "indices", "editable", "changeEx", "keyDown", "IGNORE_TYPES", "parentType", "parentElements", "querySelectorAll", "parentId", "from", "parentRect", "popupLeft", "popupTop", "pinned", "BACKGROUND_ENLIGHT", "hideElement", "dateObject", "toLocaleDateString", "toLocaleTimeString", "XfaLayer", "xfaHtml", "html", "contents", "_formatContents", "_toggle", "_show", "_hide", "lines", "pin", "unpin", "lineSpan", "lineCoordinates", "square", "circle", "containerClassName", "svgElementName", "coordinate", "vertices", "polyline", "inkList", "inkLists", "file", "_download", "AnnotationLayer", "annotations", "elementParams", "noHTML", "rendered", "renderedElement", "appendElement", "contentElement", "firstChild", "setAnnotationCanvasMap", "replaceWith", "makeColorComp", "CMYK_G", "G_CMYK", "G_RGB", "G_HTML", "G", "RGB_G", "RGB_HTML", "R", "B", "T_HTML", "CMYK_RGB", "CMYK_HTML", "components", "RGB_CMYK", "setupStorage", "xfaOn", "xfaOff", "setAttributes", "isHTMLAnchorElement", "HTMLAnchorElement", "dataId", "root", "rootHtml", "stack", "rootDiv", "childHtml", "xmlns", "el", "SVGGraphics", "opListToTree", "opList", "opTree", "opListElement", "fn", "pf", "pm", "acos", "SVG_DEFAULTS", "fontStyle", "XML_NS", "XLINK_NS", "contentType", "forceDataSchema", "digits", "b1", "b2", "b3", "d1", "d2", "d3", "d4", "convertImgDataToPng", "PNG_HEADER", "CHUNK_WRAPPER_SIZE", "crcTable", "crc32", "crc", "writePngChunk", "len", "adler32", "deflateSync", "literals", "deflateSyncUncompressed", "maxBlockLength", "deflateBlocks", "idat", "pi", "adler", "encode", "isMask", "bitDepth", "colorType", "offsetLiterals", "offsetBytes", "ihdr", "pngLength", "SVGExtraState", "dependencies", "activeClipUrl", "clipGroup", "maskId", "clipCount", "maskCount", "shadingCount", "transformMatrix", "transformStack", "extraStack", "embedFonts", "embeddedFonts", "cssStyle", "_operatorIdMapping", "tgrp", "executeOpTree", "loadDependencies", "getSVG", "svgElement", "convertOpList", "operatorIdMapping", "opTreeElement", "lineMatrix", "xcoords", "ycoords", "tspan", "setAttributeNS", "txtElement", "txtgrp", "lineWidthScale", "_setStrokeAttributes", "_ensureTransformGroup", "addFontStyle", "hasChildNodes", "setStrokeAlpha", "setFillAlpha", "_makeColorN_Pattern", "_makeShadingPattern", "_makeTilingPattern", "tilingId", "tx0", "ty0", "tx1", "ty1", "xscale", "yscale", "txstep", "tystep", "tiling", "childNodes", "shadingId", "colorStops", "gradient", "point0", "point1", "focalPoint", "circlePoint", "focalRadius", "circleRadius", "stop", "getAttributeNS", "clipId", "clipPath", "clipElement", "prev", "imgSrc", "cliprect", "imgEl", "definitions", "rootGroup", "_ensureClipGroup", "module", "_api", "_text_layer", "_annotation_editor_layer", "_annotation_layer", "_svg", "pdfjsVersion", "pdfjsBuild"]
}
