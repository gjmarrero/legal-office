import type { HighlightOptions } from '@/utils/types';
interface Props {
    searching: boolean;
    open: boolean;
    count?: number;
    current?: number;
}
declare const _default: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<Props>>> & Readonly<{
        onClose?: (() => any) | undefined;
        onOpen?: (() => any) | undefined;
        onNext?: (() => any) | undefined;
        onPrev?: (() => any) | undefined;
        "onUpdate:checkboxFilter"?: ((value: HighlightOptions) => any) | undefined;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        prev: () => void;
    } & {
        next: () => void;
    } & {
        open: () => void;
    } & {
        close: () => void;
    } & {
        "update:checkboxFilter": (value: HighlightOptions) => void;
    }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<Props>>> & Readonly<{
        onClose?: (() => any) | undefined;
        onOpen?: (() => any) | undefined;
        onNext?: (() => any) | undefined;
        onPrev?: (() => any) | undefined;
        "onUpdate:checkboxFilter"?: ((value: HighlightOptions) => any) | undefined;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<Props>>> & Readonly<{
    onClose?: (() => any) | undefined;
    onOpen?: (() => any) | undefined;
    onNext?: (() => any) | undefined;
    onPrev?: (() => any) | undefined;
    "onUpdate:checkboxFilter"?: ((value: HighlightOptions) => any) | undefined;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    prev: () => void;
} & {
    next: () => void;
} & {
    open: () => void;
} & {
    close: () => void;
} & {
    "update:checkboxFilter": (value: HighlightOptions) => void;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        icon: (_: {}) => any;
        loader: (_: {}) => any;
    };
});
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
