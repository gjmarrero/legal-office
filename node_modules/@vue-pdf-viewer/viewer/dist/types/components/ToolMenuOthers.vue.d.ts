import { CanvasLoadedCallback } from '../utils/types';
declare const _default: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<{
        rootContainer: HTMLDivElement;
        textSelection: boolean;
        print: (showProgress?: boolean) => Promise<void>;
        afterCanvasLoaded?: Record<number, CanvasLoadedCallback> | undefined;
    }>>> & Readonly<{
        onRotateClockwise?: (() => any) | undefined;
        onRotateCounterclockwise?: (() => any) | undefined;
        onTextSelection?: ((isTextSelection: boolean) => any) | undefined;
        onGotoFirstPage?: (() => any) | undefined;
        onGotoLastPage?: (() => any) | undefined;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        rotateClockwise: () => void;
    } & {
        rotateCounterclockwise: () => void;
    } & {
        textSelection: (isTextSelection: boolean) => void;
    } & {
        gotoFirstPage: () => void;
    } & {
        gotoLastPage: () => void;
    }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<{
        rootContainer: HTMLDivElement;
        textSelection: boolean;
        print: (showProgress?: boolean) => Promise<void>;
        afterCanvasLoaded?: Record<number, CanvasLoadedCallback> | undefined;
    }>>> & Readonly<{
        onRotateClockwise?: (() => any) | undefined;
        onRotateCounterclockwise?: (() => any) | undefined;
        onTextSelection?: ((isTextSelection: boolean) => any) | undefined;
        onGotoFirstPage?: (() => any) | undefined;
        onGotoLastPage?: (() => any) | undefined;
    }>, {}, {}, {}, {}, {}>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<{
    rootContainer: HTMLDivElement;
    textSelection: boolean;
    print: (showProgress?: boolean) => Promise<void>;
    afterCanvasLoaded?: Record<number, CanvasLoadedCallback> | undefined;
}>>> & Readonly<{
    onRotateClockwise?: (() => any) | undefined;
    onRotateCounterclockwise?: (() => any) | undefined;
    onTextSelection?: ((isTextSelection: boolean) => any) | undefined;
    onGotoFirstPage?: (() => any) | undefined;
    onGotoLastPage?: (() => any) | undefined;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    rotateClockwise: () => void;
} & {
    rotateCounterclockwise: () => void;
} & {
    textSelection: (isTextSelection: boolean) => void;
} & {
    gotoFirstPage: () => void;
} & {
    gotoLastPage: () => void;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Record<string, {}> & Record<string, {}> & {
        icon: (_: {}) => any;
        iconFirstPage: (_: {}) => any;
        iconLastPage: (_: {}) => any;
        iconRotateClockwise: (_: {}) => any;
        iconRotateCounterClockwise: (_: {}) => any;
        iconTextSelection: (_: {}) => any;
        iconHandMode: (_: {}) => any;
        iconDocProperties: (_: {}) => any;
    };
});
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
